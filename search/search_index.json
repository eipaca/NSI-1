{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A propos","text":"<p>Bienvenue sur le site de ressources du cours de 1\u00e8re NSI de l'Ecole Internationale PACA .</p> <p>L'image <code>gif</code> ci-dessous pr\u00e9sente un Jeu de la vie r\u00e9alis\u00e9 par un groupe d'\u00e9l\u00e8ves dans le cadre de leur projet en classe de 1\u00e8re NSI. Le jeu de la vie un automate cellulaire imagin\u00e9 par le c\u00e9l\u00e8bre math\u00e9maticien John Horton Conway. </p> <p> </p> Jeu de la vie par Antoine et Octave, 1\u00e8re NSI, 2021-22"},{"location":"#programme-de-1ere-nsi","title":"Programme de 1\u00e8re NSI","text":"<ul> <li>Le  programme officiel.</li> </ul>"},{"location":"#comment-est-construit-ce-site","title":"Comment est construit ce site ?","text":"<p>Ce site est r\u00e9dig\u00e9 en Markdown avec le th\u00e8me Material for MkDocs.</p>"},{"location":"algorithmique/","title":"Algorithmique","text":"<p>Un algorithme est une suite finie et non ambigu\u00eb d'instructions et d\u2019op\u00e9rations permettant de r\u00e9soudre une classe de probl\u00e8mes.</p> <p>Le domaine qui \u00e9tudie les algorithmes est appel\u00e9 l'algorithmique. On retrouve aujourd'hui des algorithmes dans de nombreuses applications informatiques, dont dans les syst\u00e8mes permettant le fonctionnement des ordinateurs, la cryptographie, le routage d'informations, la planification et l'utilisation optimale des ressources, le traitement d'images, le traitement de textes, la bio-informatique, l'intelligence artificielle, l'automatique, etc.</p> <p>Les ordinateurs sur lesquels s'ex\u00e9cutent ces algorithmes ne sont pas infiniment rapides, car le temps de machine reste une ressource limit\u00e9e, malgr\u00e9 une augmentation constante des performances des ordinateurs. L\u2019analyse de la complexit\u00e9, ou co\u00fbt d'algorithmique permet de pr\u00e9dire l'\u00e9volution en temps calcul n\u00e9cessaire pour amener un algorithme \u00e0 son terme, en fonction de la quantit\u00e9 de donn\u00e9es \u00e0 traiter.</p>"},{"location":"algorithmique/2-tris/","title":"Algorithmes de tri","text":""},{"location":"algorithmique/2-tris/#tri-par-selection","title":"Tri par s\u00e9lection","text":"<p>Imaginons un tableau de n nombres dans un ordre quelconque. Comment faire pour le trier de fa\u00e7on syst\u00e9matique ? Attention, on ne veut pas cr\u00e9er un nouveau tableau, cela pourrait prendre trop de place en m\u00e9moire, il faut juste modifier le tableau existant. On appelle cela un tri sur place.</p> <p>Une approche toute simple est la suivante :</p> <ul> <li> <p>On commence par parcourir tous les \u00e9l\u00e9ments pour trouver le plus petit, puis on l'\u00e9change avec celui qui \u00e9tait position 0. </p> </li> <li> <p>On a bien mis le plus petit au d\u00e9but du tableau, il faut maintenant trier le reste. On parcourt tous les \u00e9l\u00e9ments \u00e0 partir de la position 1 pour trouver le plus petit, puis on l'\u00e9change avec celui qui \u00e9tait en  position 1. </p> </li> <li> <p>On a bien mis les 2 plus petits au d\u00e9but du tableau, en ordre croissant, il faut maintenant trier le reste.  On parcourt tous les \u00e9l\u00e9ments \u00e0 partir de la position 2 pour trouver le plus petit, puis on l'\u00e9change avec celui qui \u00e9tait en  position 2.</p> </li> <li> <p>On a bien mis les 3 plus petits au d\u00e9but du tableau, en ordre croissant, il faut maintenant trier le reste. On parcourt tous les \u00e9l\u00e9ments \u00e0 partir de la position 3 pour trouver le plus petit, puis on l'\u00e9change avec celui qui \u00e9tait en  position 3.</p> </li> <li> <p>... </p> </li> <li> <p>On a bien mis les i plus petits au d\u00e9but du tableau, en ordre croissant, il faut maintenant trier le reste. On parcourt tous les \u00e9l\u00e9ments apr\u00e8s le i-ieme, pour trouver le plus petit, puis on l'\u00e9change avec celui qui \u00e9tait en 3ieme position. </p> </li> <li> <p>On a bien mis les n-1 plus petits au d\u00e9but du tableau, en ordre croissant, il ne reste qu'un seul \u00e9l\u00e9ment qui est le plus grand, il est tri\u00e9. </p> </li> </ul> <p>Le d\u00e9but du tableau \u00e9tant d\u00e9j\u00e0 tri\u00e9 (jusqu'\u00e0 i exclus), on parcourt le reste pour trouver le plus petit \u00e9l\u00e9ment \u00e0 rajouter en fin de la partie tri\u00e9e (en i).</p> <pre><code>def tri_selection(T):\n    n = len(T)\n    for i in range(n):   # on suppose T tri\u00e9 jusqu'\u00e0 i exclus   \n        i_min = i\n        for j in range(i+1, n):\n            if T[j] &lt; T[i_min]:\n                i_min = j\n        T[i], T[i_min] = T[i_min], T[i]\n    return T\n</code></pre> <p>Quelques remarques : </p> <ul> <li> <p>On peut bien s\u00fbr \u00e9crire <code>for i in range(n-1)</code> puisque \u00e0 la fin de la boucle le dernier \u00e9l\u00e9ment (position <code>n-1</code>) est de toute f\u00e7on le plus grand, inutile de continuer \u00e0 trier.</p> </li> <li> <p>On peut aussi \u00e9crire <code>for j in range(i, n)</code>, ce qui ne change rien puisque la condition <code>if T[j] &lt; T[i_min]</code> est fausse.</p> </li> <li> <p>Python permet l'\u00e9change des deux valeurs en une seule instruction : <code>T[i], T[i_min] = T[i_min], T[i]</code>. Dans d'autres langages o\u00f9 ce n'est pas possible il faut passer par une variable temporaire :  <code>temp = T[i]; T[i] = T[i_min]; T[i_min] = temp;</code></p> </li> </ul> <p>Au niveau de la terminaison de l'algorithme, les boucles <code>for</code> se terminent toujours donc on sait que l'algorithme se terminera, inutile de chercher un variant de boucle.</p> <p>La correction est un peu plus compliqu\u00e9e. Ici, l'invariant de boucle est le suivant : \u00ab Tous les \u00e9l\u00e9ments jusqu'\u00e0 <code>i</code> (exclus) sont tri\u00e9s en ordre croissant et inf\u00e9rieurs \u00e0 tous les \u00e9l\u00e9ments de <code>i</code> \u00e0 la fin \u00bb. On va faire un raisonnement par r\u00e9curence pour v\u00e9rifier que cet invariant est correct :</p> <ul> <li> <p>Il est clairement v\u00e9rifi\u00e9 au d\u00e9part puisqu'il n'y a aucun \u00e9l\u00e9ment avant l'indice <code>0</code>. </p> </li> <li> <p>Supposons qu'il est v\u00e9rifi\u00e9 jusqu'\u00e0 une valeur de <code>i</code> : Tous les \u00e9l\u00e9ments jusqu'\u00e0 <code>i</code> (exclus) sont tri\u00e9s en ordre croissant et inf\u00e9rieurs \u00e0 tous les \u00e9l\u00e9ments de <code>i</code> \u00e0 la fin. Le prochain passage dans la boucle <code>for i in range(n)</code> consiste \u00e0 chercher la plus petite valeur entre tous les \u00e9lements de <code>i</code> jusqu\u00e0 la fin et de la mettre en position <code>i</code>. Cette nouvelle valeur mise en <code>i</code>est bien sup\u00e9rieure \u00e0 tous les \u00e9lements qui la pr\u00e9c\u00e8dent et inf\u00e9rieure \u00e0 tous ceux qui la suivent. On peut toujours dire que \u00ab tous les \u00e9l\u00e9ments jusqu'\u00e0 <code>i+1</code> (exclus) sont tri\u00e9s en ordre croissant et inf\u00e9rieurs \u00e0 tous les \u00e9l\u00e9ments de <code>i+1</code> \u00e0 la fin \u00bb, l'invariant est donc toujours v\u00e9rifi\u00e9. </p> </li> </ul> <p>Une fois que la boucle <code>for i in range(n)</code> se termine, l'invariant de boucle nous assure que tous les \u00e9lements jusqu'\u00e0 <code>n</code> (exclus) sont tri\u00e9s en ordre croissant. On a donc bien prouv\u00e9 la correction de l'algorithme.</p> <p>Etudions maintenant le co\u00fbt, ou complexit\u00e9 temporelle de l'algorithme pour un tableau de grande taille \\(n\\). La boucle <code>for i in range(n)</code> se r\u00e9p\u00e8te donc \\(n\\) fois. Et \u00e0 chaque r\u00e9petition, la boucle <code>for j in range(i+1, n)</code> va faire \\(n-1\\) comparaisons <code>if T[j] &lt; T[i_min]</code> et quelques op\u00e9rations, puis \\(n-2\\) comparaisons, puis \\(n-3\\) comparaisons, etc., jusqu'\u00e0 \\(0\\). Au total, on va faire : \\((n-1) + (n-2) + (n-3) + ... + 2 + 1\\) comparaisons et quelques op\u00e9rations suppl\u00e9mentaires. Ceux qui connaissent la formule savent que cette somme est \u00e9gale \u00e0 \\(n \\times (n-1) \\over 2\\), mais seul l'ordre de grandeur nous int\u00e9resse ici et on vois bien que c'est de l'ordre de \\(n \\times n\\), autrement dit que le co\u00fbt est quadratique en \\(O(n^2)\\).</p> <p>Cours</p> <p>Algorithme : \u00c0 \u00e9tape on cherche le plus petit \u00e9l\u00e9ment parmi les \u00e9lements restants et on l'ajoute au tableau tri\u00e9.</p> <p>Terminaison : Les boucles <code>for</code> se terminent.</p> <p>Correction/Invariant de boucle : Les \u00e9l\u00e9ments jusqu'\u00e0 <code>i</code> (exclus) sont tri\u00e9s en ordre croissant et inf\u00e9rieurs \u00e0 tous les \u00e9l\u00e9ments de <code>i</code> \u00e0 la fin.</p> <p>Co\u00fbt (ou complexit\u00e9) : Quadratique, en O(n).</p>"},{"location":"algorithmique/5-algorithmes-gloutons/","title":"Algorithmes gloutons","text":""},{"location":"algorithmique/5-algorithmes-gloutons/#rendu-de-monnaie","title":"Rendu de monnaie","text":"<p>Dans le syst\u00e8me mon\u00e9taire de la zone euro, les pi\u00e8ces et billets prennent pour valeurs 1, 2, 5, 10, 20, 50, 100, 200 et 500 euros. Dans la suite de l\u2019activit\u00e9 on ne fait pas de diff\u00e9rence entre billets et pi\u00e8ces.</p> <p>Le syst\u00e8me de monnaie peut \u00eatre repr\u00e9sent\u00e9 par le tableau de pi\u00e8ces suivant :</p> <pre><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200, 500]\n</code></pre> <p>Supposons maintenant qu\u2019on doive rendre 49 euros de monnaie. Quelles pi\u00e8ces peuvent \u00eatre rendues ? Il existe plusieurs r\u00e9ponses, par exemple deux pi\u00e8ces de 20, 1 pi\u00e8ce de 5 et deux pi\u00e8ces de 2 conviennent. Mais quarante-neuf pi\u00e8ces de 1 conviennent aussi.</p> <p>Mais si on souhaite rendre 49 euros avec un minimum de pi\u00e8ces, il n\u2019y a qu\u2019une solution. C'est le probl\u00e8me du rendu de monnaie, un probl\u00e8me d\u2019algorithmique qui consiste \u00e0 rendre un montant avec le nombre minimal de pi\u00e8ces (et billets) choisies parmi une liste de valeurs donn\u00e9e.</p> <p>Analysons le probl\u00e8me en prennant quelques exemples :</p> <ul> <li> <p>Le minimum de pi\u00e8ces pour rendre 9 est de 3 pi\u00e8ces : 5 + 2 + 2.</p> </li> <li> <p>Le minimum de pi\u00e8ces pour rendre 37 est de 4 pi\u00e8ces : 20 + 10 + 5 + 2.</p> </li> <li> <p>Le minimum de pi\u00e8ces pour rendre 743 est de 6 pi\u00e8ces : 500 + 200 + 20 + 20 + 2 + 1.</p> </li> </ul> <p>On observer qu'on trouve les pi\u00e8ces en ordre d\u00e9croissant. En effet, l\u2019algorithme suivi \u00e9crit en langage naturel est le suivant :</p> <ul> <li> <p>liste_rendu = liste vide</p> </li> <li> <p>Tant que a_rendre &gt; 0:</p> <ul> <li>choisir la plus grande pi\u00e8ce inf\u00e9rieure \u00e0 a_rendre</li> <li>mettre cette pi\u00e8ce dans liste_rendu</li> <li>diminuer a_rendre de la valeur de la pi\u00e8ce</li> </ul> </li> </ul> <p>A chaque \u00e9tape de l\u2019algorithme on prend la meilleure d\u00e9cision possible  (choisir la plus grande pi\u00e8ce inf\u00e9rieure \u00e0 la somme \u00e0 rendre), puis on continue avec un probl\u00e8me de plus en plus petit \u00e0 r\u00e9soudre (on diminue la somme \u00e0 rendre). Dans ce type de r\u00e9solution, il n'y a pas de retour en arri\u00e8re. Lorsqu'un choix est fait, il n'est pas modifi\u00e9 par la suite. C\u2019est le propre des algorithmes gloutons.</p> <p>Cours</p> <p>Un algorithme glouton est un algorithme dans lequel on proc\u00e8de \u00e9tape par \u00e9tape en faisant, \u00e0 chaque \u00e9tape, le meilleur choix possible en fonction de la situation actuelle, sans retour en arri\u00e8re et sans se soucier de la forme du probl\u00e8me global, dans l'espoir de conduire vers une solution optimale du probl\u00e8me \u00e0 r\u00e9soudre.</p> <p>Traduit en Python, on obtient le programme suivant :</p> <pre><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200, 500]\n\n\ndef plus_grande_piece(pieces, a_rendre):\n    \"\"\" list, int -&gt; int\n    Renvoie la plus grande valeur de pieces inf\u00e9rieure \u00e0 a_rendre\n    \"\"\"\n    pieces = sorted(pieces) # tri pieces en ordre croissant\n    for p in pieces: # parcours du tableau tri\u00e9\n        if p &lt;= a_rendre: # si p est possible\n            plus_grande = p # on le garde\n    return plus_grande\n\n\ndef rendu_monnaie(pieces, a_rendre):\n    \"\"\" list, int -&gt; int\n    Renvoie le tableau de pieces obtenu par l\u2019algorithme glouton\n    \"\"\"\n    liste_rendu = []\n    while a_rendre &gt; 0:\n        piece = plus_grande_piece(pieces, a_rendre)\n        liste_rendu.append(piece)\n        a_rendre = a_rendre - piece\n    return liste_rendu\n\nassert rendre_monnaie(pieces, 9) == [5, 2, 2]\nassert rendre_monnaie(pieces, 37) == [20, 10, 5, 2]\nassert rendre_monnaie(pieces, 743) == [500, 200, 20, 20, 2, 1]\n</code></pre> <p>On utilise maintenant un syst\u00e8me de pi\u00e8ces diff\u00e9rents de celui de la zone euro :</p> <p><pre><code>pieces2 = [1, 3, 6, 12, 24, 30]\n</code></pre> Essayons quelques montants \u00e0 rendre : <pre><code>&gt;&gt;&gt; rendre_monnaie(pieces2, 48) \n[30, 12, 6]\n&gt;&gt;&gt; rendre_monnaie(pieces2, 49) \n[30, 12, 6, 1]\n&gt;&gt;&gt; rendre_monnaie(pieces2, 50) \n[30, 12, 6, 1, 1]\n</code></pre> On observe rapidement que l'algorithme glouton ne renvoie pas le nombre minimal de pi\u00e8ces \u00e0 rendre, on pouvait rendre 48 avec deux pi\u00e8ces de 24; 49 avec deux pi\u00e8ces de 24 et une pi\u00e8ce de 1, etc. </p> <p>Cours</p> <p>Les algorithmes gloutons ne donnent pas syst\u00e9matiquement la solution optimale \u00e0 un probl\u00e8me.</p>"},{"location":"algorithmique/5-algorithmes-gloutons/#probleme-du-sac-a-dos","title":"Probl\u00e8me du sac \u00e0 dos","text":"<p>On dispose d'un sac \u00e0 dos avec une capacit\u00e9 maximum de poids \u00e0 transporter de 15 kg. On a le choix d\u2019emporter certains des objets dont on conna\u00eet le poids et la valeur : </p> Objet no 0 1 2 3 4 Poids (kg) 12 4 2 1 1 Prix (\u20ac) 40 100 20 20 10 <p>Quels objets faut-il choisir pour obtenir une valeur totale maximale tout en ne d\u00e9passant pas 15 kg ? C\u2019est un probl\u00e8me d\u2019optimisation par contrainte.</p> <p>On voit tout de suite que l'objet 1 est int\u00e9ressant car il n\u2019est pas lourd mais a beaucoup de valeur. Par contre l\u2019objet 0 est beaucoup moins int\u00e9ressant car il est lourd et n\u2019a pas beaucoup de valeur. Une r\u00e8gle de choix pertinente pour un algorithme glouton consiste donc \u00e0 choisir en premier les objets qui ont la plus grande valeur par unit\u00e9 de poids. Ainsi l\u2019objet 1 a une valeur de 25 \u20ac/kg (100/4 = 25) alors que l\u2019objet de 0 a une valeur d\u2019environ 3.3 \u20ac/kg (40/12 = 3.333\u2026).</p> <p>L\u2019algorithme glouton est le suivant :</p> <ul> <li>poids_sac = 0</li> <li>valeur_sac = 0</li> <li>Parcourir les objets tri\u00e9s en ordre d\u00e9croissant de valeur/poids :<ul> <li>Si le poids de l\u2019objet plus le poids des objets d\u00e9j\u00e0 dans le sac ne d\u00e9passe pas le poids autoris\u00e9 : ajouter le poids de l\u2019objet \u00e0 poids_sac et sa valeur \u00e0 valeur_sac.</li> <li>Sinon, ne pas mettre l\u2019objet dans le sac.</li> </ul> </li> <li>Renvoyer valeur_sac.</li> </ul> <p>Traduit en Python, on obtient le programme suivant :</p> <pre><code>objets = [{'poids': 12, 'valeur': 40},\n           {'poids': 4, 'valeur': 100},\n           {'poids': 2, 'valeur': 20},\n           {'poids': 1, 'valeur': 20},\n           {'poids': 1, 'valeur': 10}]\n\n\ndef sac_glouton(objets, poids_max):\n    \"\"\" list(dict) int -&gt; int\n    Renvoie la valeur maximale d'une liste d'objets [{'poids', 'valeur'}]\n    qui peuvent \u00eatre mis dans le sac sans que leur poids d\u00e9passe poids_max\n    \"\"\"\n    poids_sac = 0\n    valeur_sac = 0\n    # objets pris en ordre de valeur d\u00e9croissante\n    for objet in sorted(objets, key=lambda x: x['valeur'], reverse=True):\n        # si le poids de objet ne fait pas d\u00e9passer la capacit\u00e9 du sac\n        if objet['poids'] + poids_sac &lt;= poids_max:\n            # on le met dans le sac\n            poids_sac += objet['poids']\n            valeur_sac += objet['valeur']\n    return valeur_sac\n\nassert sac_glouton(objets, 15) == 150\n</code></pre>"},{"location":"algorithmique/5-algorithmes-gloutons/#dautres-problemes-doptimisation-par-contrainte","title":"D\u2019autres probl\u00e8mes d\u2019optimisation par contrainte","text":"<p>Les algorithmes gloutons constituent une famille d'algorithmes que l\u2019on peut les utiliser pour trouver une solution \u00e0 de nombreux probl\u00e8mes : lorsqu'on a une s\u00e9lection \u00e0 effectuer sur un ensemble d'objets en cherchant \u00e0 maximiser ou minimiser une certaine grandeur tout en respectant certaines contraintes.</p>"},{"location":"algorithmique/5-algorithmes-gloutons/#choisir-5-valeurs-dans-un-tableau","title":"Choisir 5 valeurs dans un tableau","text":"<p>On cherche \u00e0 s\u00e9lectionner cinq valeurs parmi un tableau de nombres entiers positifs en cherchant \u00e0 avoir la plus grande somme possible (maximiser une grandeur) et en s'interdisant de choisir deux nombres voisins (contrainte).</p> <p>Par exemple on peut choisir dans le tableau suivant les nombres 20, 19, 18, 17 et 16 dont la somme fait 90 : <pre><code>nombres = [15, 4, 20, 17, 11, 8, 11, 16, 7, 14, 19, 7, 5, 17, 2, 18, 4, 5, 13, 8]\n</code></pre></p> <p>Exercice corrig\u00e9</p> <ol> <li> <p>\u00c9crire une fonction <code>select_5(tab)</code> qui renvoie la somme de cinq nombres qui ne sont pas voisins choisis dans un tableau de nombres entiers <code>tab</code>.</p> <p>Aide : Les nombres du tableau \u00e9tant tous positifs, on peut \u00e9craser la valeur des nombres s\u00e9lectionn\u00e9s et de ceux qui sont interdits par 0.</p> </li> <li> <p>Trouver un exemple pour lequel l\u2019algorithme glouton n\u2019est pas optimal.</p> </li> </ol> R\u00e9ponse <ol> <li> <p>Voyons d'abord la solution qui ne fonctionne pas : <pre><code>def plus_grand(tab):\n    \"\"\" list -&gt; int\n    Renvoie l'indice de la plus grande valeur de tab\n    \"\"\"\n    imax = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; tab[imax]:\n            imax = i\n    return imax\n\n\ndef select_5(tab):\n    \"\"\" list -&gt; list\n    Renvoie les 5 nombres de tab dont la somme est la plus grande\n    sans choisir deux nombres voisins\n    \"\"\"\n    somme = 0\n    for _ in range(5):\n        # on prend la plus grande valeur de tab et on la met \u00e0 0\n        imax = plus_grand(tab)\n        somme += tab[imax]\n        tab[imax] = 0\n        # les nombres voisins sont aussi mis \u00e0 0\n        if imax &gt; 0:         # si c'est n'est pas le premier \u00e9k\u00e9ment de tab\n            tab[imax-1] = 0      # on met le nombre de gauche \u00e0 0\n        if imax &lt; len(tab)- 1:   # si ce n'est pas le dernier\n            tab[imax+1] =0      # on met le nombre de droite \u00e0 0\n    return somme\n\n\n&gt;&gt;&gt; nombres = [15, 4, 20, 17, 11, 8, 11, 16, 7, 14, 19, 7, 5, 17, 2, 18, 4, 5, 13, 8]\n&gt;&gt;&gt; select_5(nombres) \n90\n</code></pre></p> </li> <li> <p>Avec les nombres <code>[15, 4, 20, 17, 11, 8, 11, 16, 7, 14, 2, 7, 5, 17, 19, 18, 4, 5, 13, 8]</code> on obtient 84 alors qu\u2019on pouvait choisir 20 + 18 +17 + 16 + 15 = 86</p> </li> </ol>"},{"location":"algorithmique/5-algorithmes-gloutons/#charger-les-wagons","title":"Charger les wagons","text":"<p>On doit charger des containers de marchandises sur les wagons d\u2019un train. On peut charger autant de containers qu'on le souhaite sur chaque wagon tant que la masse des containers ne d\u00e9passe pas 60 tonnes.</p> <p>Par exemple, on peut charger les 18 containers qui ont les masses (en tonnes) suivantes :</p> <pre><code>containers = [32, 1, 4, 11, 16, 38, 30, 15, 40, 20, 26, 5, 25, 14, 44, 17, 7, 6]\n</code></pre> <p>sur 7 wagons en les r\u00e9partissant ainsi :</p> <p><pre><code>[32, 20, 4], [30, 26], [11, 44], [40, 15, 5], [38, 17], [14, 16, 25, 1], [6, 7]\n</code></pre> On cherche la r\u00e9partition des containers (s\u00e9lectionner) qui permet d'utiliser le plus petit nombre de wagons minimiser une grandeur) sans d\u00e9passer la capacit\u00e9 des wagons de 60 tonnes (contrainte).</p> <p>On propose d\u2019utiliser l\u2019algorithme glouton suivant :</p> <ul> <li>train = tableau_vide</li> <li>Trier les containers en ordre croissant (du plus leger au plus lourd).</li> <li>Tant qu\u2019il reste des containers \u00e0 charger :<ul> <li>wagon = tableau vide</li> <li>Parcourir les containers qui restent en partant de la fin (du plus lourd au plus leger) :<ul> <li>Si on ne d\u00e9passe pas 60 tonnes sur le wagon : enlever le container de la liste des containers et l'ajouter sur le wagon.</li> </ul> </li> <li>Ajouter le wagon au train.</li> </ul> </li> </ul> <p>Exercice corrig\u00e9</p> <ol> <li>\u00c9crire une fonction <code>charger(containers, pmax)</code> qui prend en param\u00e8tre <code>containers</code>, le tableau des poids des containers en tonne et <code>pmax</code>, la capacit\u00e9 d\u2019un wagon (un nombre entier) et renvoie la r\u00e9partition des containers</li> </ol> R\u00e9ponse <pre><code>def charger(containers, pmax):\n    \"\"\" list, int -&gt; list[list]\n    Renvoie la r\u00e9partition des containers en utilisant le plus petit nombre de\n    wagons sans d\u00e9passer une capacit\u00e9 des wagons de pmax\n    \"\"\"\n    train = []\n    # tri des containers en ordre croissant\n    containers = sorted(containers)\n    # tant qu'il reste des containers \u00e0 charger\n    while len(containers) != 0:\n        # on cr\u00e9e un nouveau wagon\n        wagon = []\n        # on parcourt containers en partant de la fin (du plus lourd au plus leger)\n        i = len(containers) - 1\n        while i &gt;= 0:\n            # si on ne d\u00e9passe pas pmax en mettant le container sur le wagon\n            if sum(wagon) + containers[i] &lt;= pmax:\n                # on l'ajoute au wagon et on le supprime de containers\n                wagon.append(containers.pop(i))\n            i = i - 1\n        # on ajoute le wagon au train\n        train.append(wagon)\n    return train\n\n&gt;&gt;&gt; containers = [32, 1, 4, 11, 16, 38, 30, 15, 40, 20, 26, 5, 25, 14, 44, 17, 7, 6]\n&gt;&gt;&gt; charger(containers, 60)\n[[44, 16], [40, 20], [38, 17, 5], [32, 26, 1], [30, 25, 4], [15, 14, 11, 7, 6]]\n</code></pre>"},{"location":"donnees-en-tables/","title":"Traitement de donn\u00e9es en tables","text":"<p>Les donn\u00e9es organis\u00e9es en table correspondent \u00e0 une liste de p-uplets nomm\u00e9s qui partagent les m\u00eames descripteurs. La mobilisation de ce type de structure de donn\u00e9es est un premier aper\u00e7u de la notion de base de donn\u00e9es qui est \u00e9tudi\u00e9e en terminale. </p> <p>Dans ce chapitre, les p-uplets nomm\u00e9s sont repr\u00e9sent\u00e9s par des tableaux de tableaux, tableaux de p-uplets ou tableaux de dictionnaires. Le module Python <code>namedtuple</code> de la biblioth\u00e8que <code>collections</code> n'est pas utilis\u00e9.</p>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/","title":"Lecture et \u00e9criture dans un fichier","text":""},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#les-chemins-de-fichiers","title":"Les chemins de fichiers","text":"<p>Il y a deux fa\u00e7ons de d\u00e9crire l'emplacement d'un fichier : son chemin absolu ou son chemin relatif :</p> <ul> <li> <p>Son chemin absolu d\u00e9crit l'int\u00e9gralit\u00e9 des dossiers (ou r\u00e9pertoires<sup>3</sup>) menant au fichier, peu importe le r\u00e9pertoire courant, depuis un r\u00e9pertoire dit \u00ab racine \u00bb. Sous Windows, la racine  est le nom de volume (C:\\, D:\\\u2026), sous les syst\u00e8mes de la famille Unix, c'est \u00ab / \u00bb.</p> </li> <li> <p>Son chemin relatif d\u00e9crit la succession de r\u00e9pertoires \u00e0 parcourir en prenant comme point de d\u00e9part le r\u00e9pertoire courrant dans lequel on se trouve.</p> </li> </ul> <p>Exemple : Quel est le chemin du fichier <code>explorer.exe</code> dans l'arborescence suivante ?</p> <pre><code>graph TD\nA[C:] --&gt; B;\nA --&gt; C[Program Files];\nB[Windows] --&gt; D{{explorer.exe}};\nB --&gt; E{{notepad.exe}};\nA --&gt; F[\"Program Files(x86)\"];\nA --&gt; G[Users];</code></pre> <ul> <li> <p>Son chemin absolu est <code>C:\\Windows\\explorer.exe</code>.</p> </li> <li> <p>Son chemin relatif d\u00e9pend du r\u00e9pertoire courant<sup>4</sup>, par exemple  :</p> </li> </ul> R\u00e9pertoire courant Chemin relatif Windows <code>explorer.exe</code> C: <code>Windows\\explorer.exe</code> Program Files <code>..\\Windows\\explorer.exe</code><sup>5</sup> <p>Python reconnait indiff\u00e9remment les chemins indiqu\u00e9s avec backslash (norme Windows) \u00ab <code>\\</code> \u00bb qu'avec slash \u00ab <code>/</code> \u00bb (norme Unix et protocoles Internet).</p>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#f-open-et-fclose","title":"f = open() et f.close()","text":"<p>Pour lire ou \u00e9crire dans un fichier depuis un programme Python, il faut d'abord ouvrir le fichier. On utilise la fonction <code>open()</code> qui prend pour param\u00e8tre le chemin (absolu ou relatif) du fichier et le mode d'ouverture :</p> <ul> <li><code>'r'</code> pour ouvrir un fichier existant en mode lecture (read-only) est l'option par d\u00e9faut.</li> <li><code>'w'</code> en mode \u00e9crite (write) pour \u00e9crire dans un nouveau fichier (ou \u00e9craser un fichier d\u00e9j\u00e0 existant).</li> <li><code>'a'</code> en mode ajout (append) pour \u00e9crire \u00e0 la fin d'un fichier d\u00e9j\u00e0 existant (ou le cr\u00e9er s'il n'existe pas).</li> </ul> <p>On peut compl\u00e9ter le mode d'ouverture avec <code>b</code> pour un fichier binaire (image ou son par exemple), on obtient <code>rb'</code>, <code>'wb'</code>, <code>'ab'</code>.</p> <p> On ne peut pas ouvrir en mode lecture un fichier qui n'existe pas.</p> <pre><code>f = open('fichier.txt', 'r')\n\n&gt;&gt;&gt; Traceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nFileNotFoundError: [Errno 2] No such file or directory: 'fichier.txt'\n</code></pre> <p>Par contre, en mode \u00e9criture <code>'w'</code> ou ajout <code>'a'</code>, si le fichier n'existe pas quand il est ouvert, alors il est cr\u00e9\u00e9.</p> <pre><code>f = open('fichier.txt', 'w')\n</code></pre> <p>Si \u00ab\u00a0fichier.txt\u00a0\u00bb ne se trouve pas dans le r\u00e9pertoire du programme Python, il faut donner son chemin pour y acc\u00e9der avec <code>/</code> ou <code>\\\\</code>.</p> <pre><code>f = open('C:/\u2026/\u2026/\u2026/fichier.txt', 'r')\nf = open('C:\\\\\u2026\\\\\u2026\\\\\u2026\\\\fichier.txt', 'r')\n</code></pre> <p> Attention, il faut toujours fermer un fichier apr\u00e8s l'avoir ouvert<sup>1</sup>. La m\u00e9thode \u00e0 utiliser est <code>close()</code>.</p> <pre><code>&gt;&gt;&gt; f.close()\n</code></pre>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#with-open-as-f","title":"with open() as f:","text":"<p>Une autre fa\u00e7on d'ouvrir \u00ab\u00a0fichier.txt\u00a0\u00bb  est d'utiliser la construction suivante :</p> <pre><code>with open('fichier.txt', 'w') as f:\n    # bloc d'instructions\n</code></pre> <p>Dans ce cas-l\u00e0, le fichier est automatiquement ferm\u00e9 \u00e0 la fin du bloc d'instructions (attention \u00e0 l'indentation), il n'y a pas besoin de le fermer, cela \u00e9vite beaucoup d'erreurs.</p>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#ecrire-dans-un-fichier","title":"\u00c9crire dans un fichier","text":"<p>Pour \u00e9crire dans un fichier, on utilise la m\u00e9thode <code>.write()</code> en lui passant en param\u00e8tre une cha\u00eene de caract\u00e8res \u00e0 \u00e9crire<sup>2</sup>.  Pour \u00e9crire des nombres il faut les convertir en <code>str</code> avant.</p> <p>Cr\u00e9ons un fichier qui contient des noms de pays avec leur capitale et leur population :</p> f = open(...)with open(...) as f: <pre><code>f = open('pays.txt, 'w')\nf.write('France;Paris;68\\n')\nf.close()   \n</code></pre> <pre><code>with open('pays.txt', 'w') as f:\n    f.write('France;Paris;68\\n')\n</code></pre> <p>Noter le caract\u00e8re \u00ab <code>\\n</code> \u00bb pour indiquer un retour \u00e0 la ligne. On peut ouvrir <code>pays.txt</code> par exemple avec le blocnote et v\u00e9rifier que le texte a bien \u00e9t\u00e9 \u00e9crit.</p> <p>On peut ensuite \u00e9crire deux autres lignes \u00e0 la suite en mode <code>'a'</code>.</p> f = open(...)with open(...) as f: <pre><code>f = open('pays.txt', 'a')\nf.write('Espagne;Madrid;48\\n')\nf.write('Italie;Rome;60\\n')\n\nf.close()   \n</code></pre> <pre><code>with open('pays.txt', 'a') as f:\n    f.write('Espagne;Madrid;48\\n')\n    f.write('Italie;Rome;60\\n')\n</code></pre> <p>On peut maintenant ouvrir le fichier texte dans un \u00e9diteur de texte quelconque :</p> <pre><code>France;Paris;68\nEspagne;Madrid;48\nItalie;Rome;60\n</code></pre> <p> Noter qu'en utilisant l'instruction <code>f = open('pays.txt', 'a')</code>, rien n'est \u00e9crit dans le fichier si on oublie de fermer le fichier avec <code>f.close()</code> !</p> <p>Exercice corrig\u00e9</p> <p>Ecrire un programme qui cr\u00e9e un fichier 'parite.txt' contenant tous les nombres entre 0 et 100 suivis de pair ou impair :</p> <pre><code>0;pair\n1;impair\n2;pair\netc.\n</code></pre> R\u00e9ponse <pre><code>with open('parite.txt', 'w') as f:\n    for i in range(101):\n        ligne = str(i) + ';'\n        if i%2 == 0:\n            ligne = ligne + 'pair\\n'\n        else:\n            ligne = ligne + 'impair\\n'\n        f.write(ligne)\n</code></pre>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#lire-un-fichier","title":"Lire un fichier","text":"<p>Il ewiste plusieurs approches pour lire les donn\u00e9es dans un fichier.</p>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#la-methode-read","title":"La m\u00e9thode <code>.read()</code>","text":"<p>La m\u00e9thode <code>.read()</code>  renvoie l'int\u00e9gralit\u00e9 du fichier dans une chaine de caract\u00e8res :</p> f = open(...)with open(...) as f: <pre><code>f = open('pays.txt', 'r')\ndata = f.read()\nf.close()\n</code></pre> <pre><code>with open('pays.txt', 'r') as f:\n    data = f.read()\n&gt;&gt;&gt; \n</code></pre> <p> \u00c0 noter, le fichier n'est lu qu'une seule fois avant d'\u00eatre referm\u00e9. Par exemple, suite au programme :</p> <p><pre><code>f = open('pays.txt', 'r')\ndata = f.read()\ndata2 = f.read()\nf.close()\n</code></pre> la variable <code>data2</code> sera une cha\u00eene de caract\u00e8res vide. Apr\u00e8s le premier <code>read()</code>, l'interpr\u00e9teur Python est arriv\u00e9 au bout du fichier. Il ne recommence pas \u00e0 le lire depuis le d\u00e9but et le second <code>read()</code> ne lit plus rien. Pour recommencer \u00e0 lire au d\u00e9but du fichier, il faut le fermer et le rouvrir.</p>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#la-methode-readline","title":"La m\u00e9thode <code>.readline()</code>","text":"<p>La m\u00e9thode <code>.readline()</code> permet de lire une seule ligne d'un fichier</p> f = open(...)with open(...) as f: <pre><code>f = open('pays.txt', 'r') \nligne1= f.readline()\nf.close()\n</code></pre> <pre><code>with open('pays.txt', 'r') as f:\n    ligne1 = f.readline()\n&gt;&gt;&gt; \n</code></pre> <p> \u00c0 noter, une fois la premi\u00e8re ligne lue, l'instruction <code>.readline()</code> suivante lit la seconde ligne et ainsi de suite jusqu'\u00e0 la fin du fichier. Pour recommencer au d\u00e9but du fichier il faut fermer et rouvrir le fichier :</p> <pre><code>f = open('pays.txt', 'r')\nligne1 = f.readline()   # premi\u00e8re ligne du fichier\nligne2 = f.readline()   # deuxi\u00e8me ligne du fichier\nf.close()\n</code></pre> <p> Attention donc \u00e0 ne pas confondre <code>readline()</code> qui renvoie une seule ligne dans une cha\u00eene de caract\u00e8res, avec <code>readlines()</code> qui renvoie un tableau de toutes les lignes.</p>"},{"location":"donnees-en-tables/1-lecture-ecriture-dans-un-fichier/#la-boucle-for-in","title":"La boucle <code>for\u2026 in \u2026</code>","text":"<p>Une boucle  <code>for\u2026 in \u2026</code> permet d'it\u00e9rer sur toutes les lignes d'un fichier.</p> f = open(...)with open(...) as f: <pre><code>f = open('pays.txt', 'r') \nfor ligne in f:\n    print(ligne)\nf.close()\n</code></pre> <pre><code>with open('pays.txt', 'r') as f:\n    for ligne in f:\n        print(ligne)\n</code></pre> <p>Ici, la variable <code>ligne</code> est une chaine de caract\u00e8re qui prend la valeur de chaque ligne de <code>pays.txt</code>.</p> <p>Exercice corrig\u00e9</p> <p>\u00ab Green Eggs and Ham is one of Seuss's \"Beginner Books\", written with very simple vocabulary for beginning readers. The vocabulary of the text consists of just 50 words and was the result of a bet between Seuss and Bennett Cerf, Dr. Seuss's publisher \u00bb Source : Wikipedia. </p> <p>Ecrire un programme pour v\u00e9rifier si Dr. Seuss a gagn\u00e9 son pari d'\u00e9crire un livre en utilisant moins de 50 mots dans son livre :  https://www.clear.rice.edu/comp200/resources/texts/Green%20Eggs%20and%20Ham.txt </p> <p>Aide : Utiliser les m\u00e9thodes <code>.lower()</code> pour convertir une cha\u00eene de caract\u00e8res en minuscule, <code>.replace()</code> pour rempalcer les les signes de ponctuation (. , - ! et ? ) par des espaces, et <code>.split()</code> pour s\u00e9parer les mots dans une cha\u00eene de caract\u00e8res. </p> R\u00e9ponse <pre><code>mots_utilises = {}  #dictionnaire des mots utilis\u00e9s et de leur nombre d'occurence\nwith open('green eggs and ham.txt', 'r') as f:\n    texte = f.read()\n    texte = texte.lower()   # met le texte en minuscule\n    # supprime la ponctuation\n    for c in '.,-!?':\n        texte = texte.replace(c, ' ')\n    # s\u00e9pare les mots du texte dans un tableau de str\n    mots = texte.split()\n    # ajoute et compte les mots dans le dictionnaire mots_utilises\n    for m in mots:\n        if m not in mots_utilises:\n            mots_utilises[m] = 1\n        else:\n            mots_utilises[m] += 1\nprint(len(mots_utilises))\n</code></pre> <ol> <li> <p>On peut essayer de supprimer un fichier ouvert depuis Windows explorer pour s\u2019en convaincre.\u00a0\u21a9</p> </li> <li> <p><code>write()</code> renvoie le nombre de caract\u00e8res qui ont \u00e9t\u00e9 \u00e9crits dans le fichier, utile par exemple pour v\u00e9rifier que le fichier contient bien le texte qu'on y a \u00e9crit.\u00a0\u21a9</p> </li> <li> <p>Depuis Windows 7, le terme \u00ab dossier \u00bb remplace \u00ab r\u00e9pertoire \u00bb\u00a0\u21a9</p> </li> <li> <p>En Python, on peut d\u00e9terminer le r\u00e9pertoire courant avec l'instruction <code>getcwd()</code> du module <code>os</code> (noter le  double <code>\\\\</code> dans la cha\u00eene de caract\u00e8re pour \u2018\u00e9chapper' le caract\u00e8re <code>\\</code>)</p> <p><pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'C:\\\\Program Files\\\\PyScripter'\n</code></pre> \u21a9</p> </li> <li> <p>\u00ab <code>..</code> \u00bb d\u00e9signe le r\u00e9pertoire parent.\u00a0\u21a9</p> </li> </ol>"},{"location":"donnees-en-tables/2-table-de-donnees/","title":"Table de donn\u00e9es","text":"<p>Les tables de donn\u00e9es sont le moyen le plus repandu de stocker et traiter de l'information structur\u00e9e. </p> <p>Cours</p> <p>Une table de donn\u00e9es est un ensemble de valeurs organis\u00e9es sous forme de table :</p> <ul> <li>o\u00f9 chaque ligne correspond \u00e0 un \u00e9l\u00e9ment, appel\u00e9 aussi une entit\u00e9 ou une entr\u00e9e de la table,</li> <li>o\u00f9 chaque colonne correspond \u00e0 une cat\u00e9gorie d'information de m\u00eame type, appel\u00e9 un champs ou attribut. </li> </ul> <p>Exemple : une liste d'information sur les pays utilis\u00e9e au chapitre 'Types construits':</p> Pays Capitale Population (ml) France Paris 68 Espagne Madrid 48 Italie Rome 60 <p>Cours</p> <p>Les noms des colonnes, ici Pays, Capitale et Population (ml), sont appel\u00e9s les descripteurs de la table.</p> <p>Les bases de donn\u00e9es permettent de manipuler d'importantes quantit\u00e9s de donn\u00e9es organis\u00e9es en tables.</p>"},{"location":"donnees-en-tables/2-table-de-donnees/#le-format-csv","title":"Le format csv","text":"<p>Cours</p> <p>Le format csv, pour Comma-Separated Values, est un format texte repr\u00e9sentant des donn\u00e9es en table s\u00e9par\u00e9es par des virgules (comme son nom l'indique) ou d'autres s\u00e9parateurs, par exemple point-virgule (\u00ab <code>;</code> \u00bb), tabulation (\u00ab <code>\\t</code> \u00bb), etc. </p> <p>Chaque ligne du texte correspond \u00e0 une ligne du tableau et les virgules correspondent aux s\u00e9parations entre les colonnes. Un fichier csv est un fichier texte mais on utilise l'extension .csv pour indiquer la nature de ses donn\u00e9es.</p>"},{"location":"donnees-en-tables/2-table-de-donnees/#ecrire-une-table-de-donnees-dans-un-fichier-csv","title":"Ecrire une table de donn\u00e9es dans un fichier csv","text":"<p>Un fichier csv est un simple fichier texte, on peut enregister des donn\u00e9es structur\u00e9es dans un fichier csv comme on l'a fait avec un fichier texte en s\u00e9parant les donn\u00e9es par une virgule ou un autre s\u00e9parateur et les lignes par <code>\\n</code>. Il suffit juste de changer l'extension du fichier et d'ajouter une ligne de descripteurs : </p> f = open(...)with open(...) as f: <pre><code>f = open('pays.csv, 'w')\nf.write('Pays;Capitale;Population (ml)\\n')\nf.write('France;Paris;68\\n')\nf.write('Espagne;Madrid;48\\n')\nf.write('Italie,Rome;60\\n')\nf.close()   \n</code></pre> <pre><code>with open('pays.csv', 'w') as f:\n    f.write('Pays;Capitale;Population (ml)\\n')\n    f.write('France;Paris;68\\n')\n    f.write('Espagne;Madrid;48\\n')\n    f.write('Italie,Rome;60\\n')\n</code></pre> <p>Le format csv est un format de fichier texte, ouvert qui peut \u00eatre cr\u00e9\u00e9, lu et modifi\u00e9 par de nombreux logiciels, en particulier des \u00e9diteurs de texte (bloc note), mais aussi des tableurs comme Microsoft Excel<sup>1</sup> ou OpenOffice Calc: </p> <pre><code>Pays;Capitale;Population (ml) \nFrance;Paris;68\nEspagne;Madrid;48\nItalie;Rome;60\n</code></pre> <p>Il existe d'autres formats de donn\u00e9es structur\u00e9es, par exemple JSON ou XML.</p>"},{"location":"donnees-en-tables/2-table-de-donnees/#lire-une-table-de-donnees-depuis-un-fichier-csv","title":"Lire une table de donn\u00e9es depuis un fichier csv","text":"<p>On peut lire les donn\u00e9es depuis un fichier csv et enregistrer ses donn\u00e9es dans un tableau en le lisant ligne par ligne :</p> f = open()with open as f: <pre><code>f = open('pays.csv', 'r')\npays = []\nfor li in f:\n    pays.append(li)\nf.close()\n</code></pre> <pre><code>with open('pays.csv', 'r') as f:\n    pays = []\n    for li in f:\n        pays.append(li)\n</code></pre> <p>On obtient un tableau de cha\u00eenes de caract\u00e8res, un longue cha\u00eene par ligne :</p> <pre><code>&gt;&gt;&gt; pays\n['Pays;Capitale;Population (ml)\\n',\n'France;Paris;68\\n',\n'Espagne;Madrid;48\\n',\n'Italie;Rome;60\\n']\n</code></pre> <p>On peut maintenant remplacer <code>li</code> par <code>li[:-1]</code> pour supprimer les caract\u00e8res de retour \u00e0 la ligne \u00ab <code>\\n</code> \u00bb \u00e0 la fin de chaque cha\u00eene et ajouter une instruction <code>f.readline()</code> apr\u00e8s l'ouverture du fichier pour supprimer la premi\u00e8re ligne contenant les descripteurs :</p> f = open()with open as f: <pre><code>f = open('pays.csv', 'r')\nf.readline()          # supprime la ligne de descripteurs\npays = []\nfor li in f:\n    pays.append(li[:-1])\nf.close()\n</code></pre> <pre><code>with open('pays.csv', 'r') as f:\n    f.readline()          # supprime la ligne de descripteurs\n    pays = []\n    for li in f:\n        pays.append(li[:-1])\n</code></pre> <p>On obtient un tableau de cha\u00eenes de caract\u00e8res contenant seulement les donn\u00e9es qui nous int\u00e9ressent :</p> <pre><code>&gt;&gt;&gt; pays\n['France;Paris;68',\n'Espagne;Madrid;48',\n'Italie;Rome;60']\n</code></pre> <p>Les donn\u00e9es de chaque pays dans une seule cha\u00eene de caract\u00e8res ne seront pas faciles \u00e0 manipuler,  une derni\u00e8re modification consiste \u00e0 les \u00ab d\u00e9couper \u00bb en tableau avec <code>.split()</code>, en indiquant le s\u00e9parateur utilis\u00e9, ici \u00ab ';' \u00bb :</p> f = open()with open as f: <pre><code>f = open('pays.csv', 'r')\nf.readline()          # supprime la ligne de descripteurs\npays = []\nfor li in f:\n    pays.append(li[:-1].split(';'))\nf.close()\n</code></pre> <pre><code>with open('pays.csv', 'r') as f:\n    f.readline()          # supprime la ligne de descripteurs\n    pays = []\n    for li in f:\n        pays.append(li[:-1].split(';'))\n</code></pre> <p>On obtient un tableau de tableaux qui permettra de manipuler les donn\u00e9es efficacement (en prenant soin de convertir les nombres en  <code>int</code> ou <code>float</code> si besoin) :</p> <pre><code>&gt;&gt;&gt; pays\n[['France', 'Paris', '68'],\n['Espagne', 'Madrid', '48'],\n['Italie', 'Rome', '60']]\n</code></pre> <p>On pouvait aussi \u00e9crire la m\u00eame chose directement par compr\u00e9hension :</p> f = open()with open as f: <pre><code>f = open('pays.csv', 'r')\nf.readline()          # supprime la ligne de descripteurs\npays = [li[:-1].split(';') for li in f]\nf.close()\n</code></pre> <pre><code>with open('pays.csv', 'r') as f:\n    f.readline()          # supprime la ligne de descripteurs\n    pays = [li[:-1].split(';') for li in f]\n</code></pre> <p>Exercice corrig\u00e9</p> <p>Importer dans un tableau de tableaux les donn\u00e9es du fichier des codes postaux depuis  https://public.opendatasoft.com/explore/dataset/laposte_hexasmal/export</p> R\u00e9ponse <p>Une fois les donn\u00e9es sauvegard\u00e9es dans le ficher \"laposte_hexasmal.csv\", on peut les visualiser par exemple dans le blocnote. On remarque que :</p> <ul> <li>la premi\u00e8re ligne du fichier contient les six descripteurs de donn\u00e9es (Code_commune_INSEE,  Nom_commune, etc.)</li> <li>les s\u00e9parateurs sont des points-virgules.</li> </ul> <pre><code>f = open('laposte_hexasmal.csv', 'r')   # on ouvre le fichier en lecture \nf.readline()      # on lit la 1ere ligne de descripteur s\u00e9par\u00e9ment\ncodes = []\nfor li in f: \n    codes.append(li[:-1].split(';'))\n\n# ou alors par comprehension:\ncodes = [li[:-1].split(';') for li in f]   \n\nf.close()           # ne pas oublier de fermer le fichier\n\n&gt;&gt;&gt; codes\n[['47078', 'DAMAZAN', '47160', '', 'DAMAZAN', '44.289185426, 0.27533534800000004'], ['95500', 'PONTOISE', '95300', '', 'PONTOISE', '49.051577748, 2.094574042']...]\n    \u2026\n</code></pre> <p>De la m\u00eame fa\u00e7on qu'on a import\u00e9 des donn\u00e9es en table dans un tableau de tableaux, on peut tr\u00e8s bien les importer dans un tableau de p-uplets (pour avoir des donn\u00e9es de types diff\u00e9rents)<sup>2</sup> ou un tableau de dictionnaires (pour utiliser les descripteurs)<sup>3</sup>.</p>"},{"location":"donnees-en-tables/2-table-de-donnees/#lire-un-fichier-csv-avec-le-module-csv","title":"Lire un fichier csv avec le module csv","text":"<p>La fonction<code>reader()</code> du module  <code>csv</code> permet de lire les donn\u00e9es contenues dans un fichier csv.</p> <pre><code>import csv\n\nwith open('pays.csv', 'r') as f:\n    f.readline()          # supprime la ligne de descripteurs\n    pays = csv.reader(f, delimiter=';')\n</code></pre> <p>La variable <code>pays</code>  ne peut pas \u00eatre affich\u00e9e directement : </p> <pre><code>&gt;&gt;&gt; pays\n&lt;_csv.reader object at 0x00000224603A0BE0&gt;\n</code></pre> <p>Mais c'est un objet \u00ab it\u00e9rable \u00bb, on peut donc la parcourir : </p> <p><pre><code>    for ligne in pays:\n        print(ligne)\n</code></pre> ou la convertir directement en tableau avec la fonction <code>list()</code> :</p> <p><pre><code>import csv\n\nwith open('pays.csv', 'r') as f:\n    f.readline()          # supprime la ligne de descripteurs\n    pays = list(csv.reader(f, delimiter=';'))\n</code></pre> On obtient un tableau de tableaux :</p> <pre><code>&gt;&gt;&gt; pays\n[['France', 'Paris', '68'],\n['Espagne', 'Madrid', '48'],\n['Italie', 'Rome', '60']]\n</code></pre> <p> \u00c0 noter que toutes les valeurs sont au format <code>str</code>, y compris les nombres, il faudra en tenir compte dans l'utilisation de ces donn\u00e9es par la suite programme.</p> <p>Le tableau de tableaux, n'est pas toujours id\u00e9al, en particulier la premi\u00e8re ligne de descripteurs n'est pas s\u00e9par\u00e9e du reste des donn\u00e9es. La m\u00e9thode <code>DictReader</code> permet de garder les descripteurs en cr\u00e9ant un tableau de dictionnaires. Comme avec <code>reader</code>, on utilise <code>list()</code> pour convertir le r\u00e9sultat en tableau.</p> <pre><code>import csv\n\nwith open('pays.csv', 'r') as f:\n    # on ne supprime pas les descripteurs\n    pays = list(csv.DictReader(f, delimiter=';'))\n</code></pre> <p>On obtient un tableau de dictionnaires :</p> <pre><code>&gt;&gt;&gt; pays\n[{'Capitale': 'Paris', 'Pays': 'France', 'Population (millions)': '68'}, {'Capitale': 'Madrid', 'Pays': 'Espagne', 'Population (millions)': '48'}, {'Capitale': 'Rome', 'Pays': 'Italie', 'Population (millions)': '60'}]\n</code></pre> <p>On trouvera de nombreuses autres fonctionnalit\u00e9s du module <code>csv</code> dans la  documentation Python. </p> <p>Exercice corrig\u00e9</p> <p>Importer dans un tableau de dictionnaires les donn\u00e9es du fichier des codes postaux depuis https://www.data.gouv.fr/fr/datasets/base-officielle-des-codes-postaux/.</p> R\u00e9ponse <pre><code>import csv\n\nwith open('laposte_hexasmal.csv', 'r', encoding='utf-8-sig') as f:\n    codes = list(csv.DictReader(f, delimiter=';'))\n&gt;&gt;&gt; codes\n[{'Code_commune_INSEE': '90093',\n'Code_postal': '90300',\n'Libelle_acheminement': 'SERMAMAGNY',\n'Ligne_5': '',\n'Nom_commune': 'SERMAMAGNY',\n'coordonnees_gps': '47.687801557,6.8309146345'},\n{'Code_commune_INSEE': '91093',\n'Code_postal': '91470',\n'Libelle_acheminement': 'BOULLAY LES TROUX',\n\u2026\n</code></pre> <ol> <li> <p>Avec le menu Fichier/Ouvrir puis utiliser la fen\u00eatre \u00ab Assistant d'importation du texte \u00bb pour choisir le s\u00e9parateur utilis\u00e9 ou Donn\u00e9es/R\u00e9cup\u00e9rer des donn\u00e9es externes/fichier texte.\u00a0\u21a9</p> </li> <li> <p>Par exemple avec le code suivant : <pre><code>f = open('pays.csv', 'r')\nf.readline()         # ligne de descripteurs ignor\u00e9e\npays = []\nfor li in f:\n    tab = li[:-1].split(';')\n    puplet = (tab[0], tab[1], int(tab[2]))     # la population est convertie en int\n    pays.append(puplet)\nf.close()\n</code></pre> \u21a9</p> </li> <li> <p>Par exemple avec le code suivant : <pre><code>f = open('pays.csv', 'r')\ndescripteurs = f.readline()[:-1].split( ',')   # tableau des descripteurs\npays = []\nfor li in f:\n    tab = li[:-1].split(';')\n    dico = {descripteurs[0]: tab[0] ,\n            descripteurs[1]: tab[1],\n            descripteurs[2]: int(tab[2])  \n        }\n    pays.append(dico)\nf.close()\n</code></pre> \u21a9</p> </li> </ol>"},{"location":"donnees-en-tables/3-rechercher-dans-une-table/","title":"Rechercher dans une table","text":""},{"location":"donnees-en-tables/3-rechercher-dans-une-table/#recherches-simples","title":"Recherches simples","text":""},{"location":"donnees-en-tables/3-rechercher-dans-une-table/#dans-un-tableau-de-de-tableaux-ou-tableau-de-p-uplets","title":"Dans un tableau de de tableaux ou tableau de p-uplets","text":"<p>On peut parcourir un tableau de tableau ou un tableau de p-uplets avec l'instruction <code>for \u2026 in \u2026</code> pour chercher un \u00e9l\u00e9ment avec le mot cl\u00e9 <code>in</code>. Les recherches sont donc tr\u00e8s simples.</p> <p>Reprenons notre tableau de tableaux des pays et cherchons dans quel pays se trouve 'Rome' :</p> <pre><code>&gt;&gt;&gt; pays\n[['France', 'Paris', '68'],\n ['Espagne', 'Madrid', '48'],\n ['Italie', 'Rome', '60']]\n\nfor ligne in pays:\n    if 'Rome' in ligne:\n        print('Rome est en ', ligne[0])\n</code></pre> <p>Pour comprendre ce qu'il se passe, ici <code>ligne</code> it\u00e8re sur chaque ligne de <code>pays</code> prenant tour \u00e0 tour les valeurs des tableaux <code>['France', 'Paris', '68']</code>, <code>['Espagne', 'Madrid', '48']</code> puis <code>['Italie', 'Rome', '60']</code>. Pour chaque tableau, l'instruction conditionnelle <code>if 'Rome' in ligne</code> v\u00e9rifie si <code>'Rome'</code> est pr\u00e9sent ou pas. </p>"},{"location":"donnees-en-tables/3-rechercher-dans-une-table/#dans-un-tableau-de-dictionnaires","title":"Dans un tableau de dictionnaires","text":"<p>Un tableau de dictionnaires est aussi it\u00e9rable avec l'instruction <code>for \u2026 in \u2026</code> mais par d\u00e9faut le mot cl\u00e9 <code>in</code> v\u00e9rifie l'existence d'un \u00e9l\u00e9ment dans les cl\u00e9s du dictionnaire, pas dans les valeurs. Il faut donc pr\u00e9ciser que l'on recherche l'\u00e9l\u00e9ment recherch\u00e9 parmi les valeurs du dictionnaire avec la m\u00e9thode <code>.values()</code>. </p> <p>Cherchons dans quel pays se trouve 'Rome'.</p> <pre><code>pays = [{'Capitale': 'Paris', 'Pays': 'France', 'Population (ml)': '68'},\n        {'Capitale': 'Madrid', 'Pays': 'Espagne', 'Population (ml)': '48'},\n        {'Capitale': 'Rome', 'Pays': 'Italie', 'Population (ml)': '60'}]\n\nfor ligne in pays:\n    if 'Rome' in ligne.values():\n        print('Rome est en ', ligne['Pays'])\n</code></pre> <p>ou alors on peut pr\u00e9ciser la cl\u00e9 dans laquelle on veut faire la recherche, par exemple ici on peut chercher 'Rome' dans les valeurs associ\u00e9es \u00e0 la cl\u00e9 <code>'Capitale'</code> :</p> <pre><code>for ligne in pays:\n    if ligne['Capitale']  == 'Rome':\n        print('Rome est en ', ligne['Pays'])\n</code></pre> <p>Exercice corrig\u00e9</p> <p>On a import\u00e9 un tableau de dictionnaires des codes postaux avec :</p> <pre><code>with open('laposte_hexasmal.csv', 'r', encoding='utf-8-sig') as f:\n    codes = list(csv.DictReader(f, delimiter=';'))\n</code></pre> <ol> <li> <p>Ecrire une fonction <code>coord_gps</code> qui prend en param\u00e8tre un nom de commune et renvoie les coordonn\u00e9es gps de cette commune. </p> <p>Exemple :  <pre><code>&gt;&gt;&gt; coord_gps('MANOSQUE')\n'43.835211125, 5.791029867'\n</code></pre></p> </li> <li> <p>Ecrire une fonction <code>chercher_communes</code> qui prend en param\u00e8tre un code postal et renvoie le tableau des communes qui ont ce code postal.</p> <p>Exemple :  <pre><code>&gt;&gt;&gt; chercher_communes('04000')\n['ENTRAGES',\n'LA ROBINE SUR GALABRE',\n'LA ROBINE SUR GALABRE',\n'LA ROBINE SUR GALABRE',\n'DIGNE LES BAINS',\n'DIGNE LES BAINS',\n'LA JAVIE',\n'LA ROBINE SUR GALABRE']\n</code></pre></p> </li> </ol> R\u00e9ponse <pre><code>def coord_gps(commune):\n    for ligne in codes:\n        if ligne['nom_de_la_commune'] == commune:\n            return ligne['coordonnees_gps']\n\n\ndef chercher_communes(code_postal):\n    communes = []\n    for ligne in codes:\n        if ligne['code_postal'] == code_postal:\n            communes.append(ligne['nom_de_la_commune'])\n    return communes\n</code></pre>"},{"location":"donnees-en-tables/3-rechercher-dans-une-table/#recherches-conditionnelles","title":"Recherches conditionnelles","text":"<p>Pour un tableau de tableaux,  de p-uplets ou de dictionnaires, le mot cl\u00e9 <code>in</code> ne suffit plus pour tester la pr\u00e9sence d'un \u00e9l\u00e9ment avec des conditions. Il faut tester les conditions sur chacun des tableaux, p-uplets ou dictionnaires.</p> <p>Reprenons notre tableau de tableaux de pays et cherchons les pays qui ont plus de 50 millions d'habitants :</p> <pre><code>&gt;&gt;&gt; pays\n[['France', 'Paris', '68'],\n ['Espagne', 'Madrid', '48'],\n ['Italie', 'Rome', '60']]\n\nfor ligne in pays:\n    if int(ligne[2]) &gt; 50:     # convertir la population en entier\n        print(ligne[0], \"a plus de 50 millions d'habitants\")\n</code></pre> <p>Exercice corrig\u00e9</p> <p>On a import\u00e9 un tableau de dictionnaires des codes postaux avec : <pre><code>with open('laposte_hexasmal.csv', 'r', encoding='utf-8-sig') as f:\n    codes = list(csv.DictReader(f, delimiter=';'))\n</code></pre></p> <p>Ecrire une fonction <code>tout_departement</code> qui prend en param\u00e8tre un num\u00e9ro de d\u00e9partement et renvoie un tableau avec toutes les communes de ce d\u00e9partement.</p> <pre><code>Exemple : \n``` py\n&gt;&gt;&gt; tout_departement('04')\n['LE CAIRE',\n'PIERREVERT',\n'STE CROIX DU VERDON',\n'ENTRAGES',\n'LA MOTTE DU CAIRE',\n'SIMIANE LA ROTONDE',\n...]\n```\n</code></pre> R\u00e9ponse <pre><code>def tout_departement(dep):\n    communes = []\n    for ligne in codes:\n        if ligne['code_postal'][:2] == dep:\n            communes.append(ligne['nom_de_la_commune'] )\n    return communes\n</code></pre>"},{"location":"donnees-en-tables/3-rechercher-dans-une-table/#tests-de-coherence-et-recherche-de-doublons","title":"Tests de coh\u00e9rence et recherche de doublons","text":"<p>Jusqu'ici on a fait l'hypoth\u00e8se que tous les champs du fichier sont remplis et corrects sans v\u00e9rifier leur coh\u00e9rence. Ce n'est pas toujours le cas et un fichier mal renseign\u00e9, ou avec des valeurs vides peut ensuite g\u00e9n\u00e9rer des probl\u00e8mes.  Pour l'\u00e9viter, on peut faire des tests de coh\u00e9rence et des recherches de doublons.</p> <p>Prenons l'exemple tableau de tableaux des pays qui aurait \u00e9t\u00e9 import\u00e9 avec des donn\u00e9es peu fiables :</p> <p><pre><code>&gt;&gt;&gt; pays\n[['France', 'Paris', '68.0'],\n ['Espagne', '48'],\n ['Italie', 'Rome', '60'],\n ['Italie', 'Rome', '61']]\n</code></pre> Ces donn\u00e9es vont cr\u00e9er plusieurs probl\u00e8mes :</p> <ul> <li> <p>La donn\u00e9e de population de la France, <code>'68.0'</code>, va lever une erreur quand on va la convertir en nombre entier :</p> <p><pre><code>&gt;&gt;&gt; int(pays[0][2])\nTraceback (most recent call last):\nFile \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: '68.0'\n</code></pre> -   La capitale de l'Espagne n'est pas renseign\u00e9e, c'est la valeur suivante, <code>'48'</code> qui sera utilis\u00e9e \u00e0 la place. Si on ne veut pas renseigner cette capitale, il faudrait \u00e9crire <code>..., ['Espagne', '', '48'], ...</code> ou <code>..., ['Espagne', None, '48'], ...</code> pour respecter les descriteurs de colonne. Ici on peut noter l'avantage d'utiliser un tableau de dictionnaire o\u00f9 il suffirait d'omettre la cl\u00e9 d'une valeur qui n'est pas renseign\u00e9e.</p> </li> <li> <p>Il y a un doublon sur l'Italie, quelle valeur utiliser dans un programme pour la capitale, <code>Rome</code> ou <code>Roma</code>, et pour la population ? C'est source d'erreurs.</p> </li> </ul> <p>Exercice corrig\u00e9</p> <p>On a import\u00e9 un tableau de dictionnaires des codes postaux avec :</p> <pre><code>with open('laposte_hexasmal.csv', 'r', encoding='utf-8-sig') as f:\n    codes = list(csv.DictReader(f, delimiter=';'))\n</code></pre> <ol> <li> <p>Ecrire une fonction <code>coherence</code> qui v\u00e9rifie que tous les noms de communes sont renseign\u00e9s et qu'aucun n'est laiss\u00e9 vide.</p> <p>Exemple :  <pre><code>&gt;&gt;&gt; coherence()\nTrue\n</code></pre></p> </li> <li> <p>Ecrire une fonction <code>doublons</code> qui affiche les doublons.</p> </li> </ol> R\u00e9ponse <pre><code>def coherence():\n    for ligne in codes:\n        if ligne['nom_de_la_commune'] == '':\n            return False\n    return True\n</code></pre> <p>La table n'est pas tri\u00e9e, il faut donc tester toutes les possibilit\u00e9s de doublons :</p> <pre><code>def doublons():\n    for i in range(len(codes)-1):\n        for j in range(i+1, len(codes)) :\n            if codes[i] == codes[j]:\n                print(i, j)\n</code></pre>"},{"location":"donnees-en-tables/4-trier-une-table/","title":"Trier une table","text":""},{"location":"donnees-en-tables/4-trier-une-table/#sorted-et-sort","title":"sorted() et .sort()","text":"<p>Pour trier en ordre croissant de fa\u00e7on simple et facile, le type <code>list</code> offre une m\u00e9thode <code>.sort()</code> qui permet de modifier un tableau en le triant.</p> <p><pre><code>&gt;&gt;&gt; tab = [5, 2, 3, 1, 4]\n&gt;&gt;&gt; tab.sort()\n&gt;&gt;&gt; tab\n[1, 2, 3, 4, 5]\n</code></pre> Notr que <code>tab.sort()</code> a modifi\u00e9 le tableau <code>tab</code> et a renvoy\u00e9 <code>None</code>.</p> <p>Dans cet exemple, on a tri\u00e9 un tableau de nombres entiers. On peut faire la m\u00eame chose avec un tableau de nombres decimaux (<code>float</code>)  ou de chaines de caract\u00e8res.  Les chaines de caract\u00e8res sont tri\u00e9es par ordre lexicographique<sup>1</sup>.</p> <pre><code>&gt;&gt;&gt; tab = ['pomme', 'banane', 'orange', 'fraise']\n&gt;&gt;&gt; tab.sort()\n&gt;&gt;&gt; tab\n['banane', 'fraise', 'orange', 'pomme']\n</code></pre> <p>Noter que  <code>.sort()</code> est une m\u00e9thode reserv\u00e9e aux tableaux, c'est-\u00e0-dire aux variables de type <code>list</code>. Elle ne s'applique pas aux vp-uplets ou aux dictionnaires :</p> <pre><code>&gt;&gt;&gt; puplet  = (5, 2, 3, 1, 4)\n&gt;&gt;&gt; puplet.sort()\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'tuple' object has no attribute 'sort'\n&gt;&gt;&gt; dico = {1: 'D', 2: 'B', 3: 'B', 4: 'E', 5: 'A'}\n&gt;&gt;&gt; dico.sort()\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'dict' object has no attribute 'sort'\n</code></pre> <p>Au contraire de <code>.sort()</code>, la fonction <code>sorted()</code> accepte n'importe quel it\u00e9rable et renvoie un nouveau tableau tri\u00e9  :</p> <p><pre><code>&gt;&gt;&gt; sorted((5, 2, 3, 1, 4))\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; sorted([5, 2, 3, 1, 4])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; sorted({'un':1, 'deux':2, 'trois':3 })\n['deux', 'trois', 'un']\n</code></pre> Noter que <code>sorted()</code> renvoie toujours un tableau, m\u00eame pour trier un p-uplet ou un dictionnaire. Et dans le cas d'un dictionnaire, ce sont les cl\u00e9s qui sont tri\u00e9es et renvoy\u00e9es.</p> <p> Attention pour les tableaux, \u00e0 la diff\u00e9rence de <code>.sort()</code>, le tableau tri\u00e9 n'est pas modifi\u00e9, c'est un nouveau tableau tri\u00e9 qui renvoy\u00e9 par <code>sorted()</code> :</p> <pre><code>&gt;&gt;&gt; tab = [5, 2, 3, 1, 4]\n&gt;&gt;&gt; sorted(tab)\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; tab\n[5, 2, 3, 1, 4]\n&gt;&gt;&gt; tab = [5, 2, 3, 1, 4]\n&gt;&gt;&gt; tab_trie = sorted(tab)\n&gt;&gt;&gt; tab\n[5, 2, 3, 1, 4]\n&gt;&gt;&gt; tab_trie\n[1, 2, 3, 4, 5]\n</code></pre> <p>On peut trier sur des types construits, dans ce cas le tri est fait par ordre des \u00e9l\u00e9ments. Par exemple, pour trier notre tableau de tableaux <code>pays</code>.</p> <p><pre><code>&gt;&gt;&gt; pays\n[['France', 'Paris', '68'],\n ['Espagne', 'Madrid', '48'],\n ['Italie', 'Rome', '60']]\n&gt;&gt;&gt; sorted(pays)\n['Espagne', 'Madrid', '48'], 'France', 'Paris', '68'], ['Italie', 'Rome', '60']]]\n</code></pre> Dans ce cas, le tri se fait en comparant les premi\u00e8res valeurs de chaque sous-tableau  :  <code>'Espagne' &lt; 'France'&lt; 'Italie'</code>. </p> <p>Par contre, on ne peut pas trier un tableau de dictionnaires :</p> <p><pre><code>&gt;&gt;&gt; pays = [{'Capitale': 'Paris', 'Pays': 'France', 'Population (ml)': '68'}, \n    {'Capitale': 'Madrid', 'Pays': 'Espagne', 'Population (ml)': '48'}, \n    {'Capitale': 'Rome', 'Pays': 'Italie', 'Population (ml)': '60'}]\n&gt;&gt;&gt; sorted(pays)\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: '&lt;' not supported between instances of 'dict' and 'dict'\u2003\n</code></pre> On ne peut pas comparer les dictionnaire, il faut pr\u00e9ciser une cl\u00e9 de tri.</p>"},{"location":"donnees-en-tables/4-trier-une-table/#parametre-key","title":"Param\u00e8tre key","text":"<p><code>.sort()</code> et <code>sorted()</code> acceptent un param\u00e8tre nomm\u00e9 <code>key</code> permettant de sp\u00e9cifier une fonction \u00e0 appeler sur chaque \u00e9l\u00e9ment du tableau afin d'effectuer des comparaisons. </p> <p>Par exemple, on peut modifier l'ordre de tri d'un tableau de nombres au format <code>str</code> :</p> <pre><code>&gt;&gt;&gt; sorted(['5', '3', '1', '11', '21'])\n['1', '11', '21', '3', '5']\n</code></pre> <p>en pr\u00e9cisant que les donn\u00e9es doivent \u00eatre converties en entier par la fonction <code>int()</code> avant d'\u00eatre tri\u00e9es : </p> <pre><code>&gt;&gt;&gt; sorted(['5', '3', '1', '11', '21'], key=int)\n['1', '3', '5', '11', '21']\n</code></pre> <p>De la m\u00eame fa\u00e7on, le param\u00e8tre <code>key</code> permet de trier une table en pr\u00e9cisant les colonnes selon lesquelles on veut trier. Par exemple, si on veut trier le tableau de tableaux des pays selon leur population :</p> <pre><code>&gt;&gt;&gt; pays\n[['France', 'Paris', '68'],\n ['Espagne', 'Madrid', '48'],\n ['Italie', 'Rome', '60']]\n</code></pre> <p>On peut \u00e9crire une fonction <code>popul</code> qui renvoie le champs population de chaque pays converti en nombre entier :</p> <pre><code>def popul(x): \n    return int(x[2])\n</code></pre> <p>et qui sert de cl\u00e9 de <code>sorted()</code> :</p> <pre><code>&gt;&gt;&gt; sorted(pays, key=popul)\n[['Espagne', 'Madrid', '48'], ['Italie', 'Rome', '60'],  ['France', 'Paris', '68']]\n</code></pre> <p>Ou bien l'\u00e9crire directement dans une fonction lambda :</p> <pre><code>&gt;&gt;&gt; sorted(pays, key=lambda x:int(x[2]))\n[['Espagne', 'Madrid', '48'], ['Italie', 'Rome', '60'],  ['France', 'Paris', '68']]\n</code></pre> <p>De la m\u00eame fa\u00e7on, une fonction lambda va permettre de trier le tableau de dictionnaires en ordre croissant de population :  </p> <pre><code>&gt;&gt;&gt; pays = [{'Capitale': 'Paris', 'Pays': 'France', 'Population (ml)': '68'}, \\\n            {'Capitale': 'MAdrid', 'Pays': 'Espage', 'Population (ml)': '48'}, \\\n            {'Capitale': 'Rome', 'Pays': 'Italie', 'Population (ml)': '60'}]\n\n&gt;&gt;&gt; sorted(pays, key=lambda x:int(x['Population (ml)']))\n[{'Capitale': 'Madrid', 'Pays': 'Espagne', 'Population (ml)': '48'}, {'Capitale': 'Rome', 'Pays': 'Italie', 'Population (ml)': '60'}, {'Capitale': 'Paris', 'Pays': 'France', 'Population (ml)': '68'}]\n</code></pre>"},{"location":"donnees-en-tables/4-trier-une-table/#parametre-reverse","title":"Param\u00e8tre reverse","text":"<p><code>.sort()</code> et <code>sorted()</code> acceptent aussi un param\u00e8tre nomm\u00e9 <code>reverse</code> avec une valeur bool\u00e9enne. Par d\u00e9faut, <code>reverse</code> est <code>False</code>, c'est-\u00e0-dire qu'on tri en ordre croissant, mais on peut le changer pour indiquer un ordre d\u00e9croissant des tris.  Par exemple, pour avoir les pays dans par population d\u00e9croissante :</p> <pre><code>&gt;&gt;&gt; sorted(pays, key=lambda x:int(x[2]), reverse=True)\n[['France', 'Paris', '68'], ['Italie', 'Rome', '60'], ['Espagne', 'Madrid', '48']]\n</code></pre> <p>Exercice corrig\u00e9</p> <p>On a import\u00e9 un tableau de dictionnaires des codes postaux avec : <pre><code>with open('laposte_hexasmal.csv', 'r', encoding='utf-8-sig') as f:\n    codes = list(csv.DictReader(f, delimiter=';'))\n</code></pre></p> <ol> <li> <p>Ecrire les fonctions <code>plus_petit_code</code> et <code>plus_grand_code</code> qui renvoient la commune qui a le plus petit code postal et celle qui a le plus grand code postal.</p> </li> <li> <p>Ecrire les fonctions <code>plus_grande_latitude</code> qui renvoie la commune qui a la plus grande latitude.</p> </li> </ol> R\u00e9ponse <pre><code>def plus_petit_code():\n    return sorted(codes, key = lambda x:x['code_postal'])[0]\n\ndef plus_grand_code():\n    return sorted(codes, key = lambda x:x['code_postal'])[-1]\n\ndef gps(gps_str):\n    \"\"\" str -&gt; float, float\n    Renvoie la longitude et latitude d'une chaine de caract\u00e8re de coordonn\u00e9es gps\n    \"\"\"\n    long, lat = gps_str.split(',')\n    return float(long), float(lat)\n\n\ndef plus_grande_latitude():\n    # filtre les communes dont les coordonn\u00e9es gps sont donn\u00e9es\n    codes_avec_gps = list(filter(lambda x:x['coordonnees_gps'] !='',codes))\n    return sorted(codes_avec_gps, key = lambda x:gps(x['coordonnees_gps'])[1], reverse= True)[0]\n</code></pre> <p>Exercice corrig\u00e9 - Pour aller plus loin</p> <ol> <li>Ecrire les fonctions <code>plus_loin(longA, latA)</code> qui renvoie la commune la plus \u00e9loign\u00e9e du point GPS de coordonn\u00e9es (longA, latA).</li> </ol> <p>Exemple: <pre><code>&gt;&gt;&gt; plus_loin(0,0)\n{'code_commune_insee': '98612',\n'code_postal': '98620',\n'coordonnees_gps': '-14.270411199, -178.155263035',\n'libelle_d_acheminement': 'SIGAVE',\n'ligne_5': '',\n'nom_de_la_commune': 'SIGAVE'}\n</code></pre></p> <p>Note : La distance  en m\u00e8tres entre les points de coordonn\u00e9es (\\(Long_A\\);\\(Lat_A\\)) et (\\(Long_B\\); \\(Lat_B\\) ) est donn\u00e9e par la formule de Pythagore : </p> <ul> <li> <p>\\(x =({Long_B - Long_A )} \\times {cos\u2061{ {Lat_A + Lat_B} \\over 2}}\\)</p> </li> <li> <p>\\(y = Lat_B-Lat_A\\)</p> </li> <li> <p>\\(z = \\sqrt {x^2+y^2}\\)</p> </li> <li> <p>\\(d = 1852 \\times 60 \\times z\\)</p> </li> </ul> <p>Source : http://villemin.gerard.free.fr/aGeograp/Distance.htm</p> R\u00e9ponse <pre><code>from math import cos, sqrt\ndef distance(longA, latA, longB, latB):\n    x = (longB - longA) * cos((latA+latB)/2)\n    y = latB - latA\n    z = sqrt(x**2 + y**2)\n    d = 1852 * 60 * z\n    return d\n\n\ndef plus_loin(longA, latA):\n    # filtre les communes dont les coordonn\u00e9es gps sont donn\u00e9es\n    codes_avec_gps = list(filter(lambda x:x['coordonnees_gps'] !='',codes))\n    return sorted(codes_avec_gps, key = lambda x:distance(longA, latA, gps(x['coordonnees_gps'])[0], gps(x['coordonnees_gps'])[1]), reverse= True)[0]\n</code></pre> <ol> <li> <p>On commence par comparer les  codes Unicode du premier caract\u00e8re de chaque cha\u00eene, puis en cas d'\u00e9galit\u00e9 le second caract\u00e8re, et ainsi de suite comme dans un dictionnaire. Attention aux majuscules et aux nombres, '11' est plus petit que '2' !\u00a0\u21a9</p> </li> </ol>"},{"location":"donnees-en-tables/5-fusionner-des-tables/","title":"Fusionner des tables","text":""},{"location":"donnees-en-tables/5-fusionner-des-tables/#reunion-ou-concatenation","title":"R\u00e9union (ou Concat\u00e9nation)","text":"<p>Reprenons notre table de pays, pour y ajouter 2 pays, l'Espagne et le Portugal.</p> <pre><code>&gt;&gt;&gt; pays \n[['France', 'Paris', '68'],\n ['Espagne', 'Madrid', '48'],\n ['Italie', 'Rome', '60']]\n</code></pre> <p>Et un  tableau de nouveaux pays. </p> <pre><code>&gt;&gt;&gt; nouveau_pays = [['Allemagne', 'Berlin', '82'], ['Portugal', 'Lisbonne', None]]\n</code></pre> <p>Remarque : Pour un tableau de tableaux ou de p-uplets, il faut veiller \u00e0 ce que les donn\u00e9es sur une m\u00eame colonne correspondent \u00e0 leur descripteur. S'il manque une donn\u00e9e, on compl\u00e8te avec <code>''</code> ou <code>None</code><sup>1</sup>. </p> <p>On peut simplement utiliser l'op\u00e9rateur <code>+</code> qui cr\u00e9\u00e9 un nouveau tableau :</p> <pre><code>&gt;&gt;&gt; pays + nouveau_pays\n[['France', 'Paris', '68'], \n ['Espagne', 'Madrid', '48'], \n ['Italie', 'Rome', '60'],\n ['Allemagne', 'Berlin', '82'], \n ['Portugal', 'Lisbonne', None]]\n</code></pre> <p>Ou encore la m\u00e9thode <code>.extend()</code> qui modifie la variable <code>pays</code> : </p> <pre><code>&gt;&gt;&gt; pays.extend(nouveau_pays)\n&gt;&gt;&gt; pays\n[['France', 'Paris', '68'],  ['Espagne', 'Madrid', '48'],  ['Italie', 'Rome', '60'],  ['Allemagne', 'Berlin', '82'],  ['Portugal', 'Lisbonne', None]]\n</code></pre> <p>Si on ne veut ajouter qu'un seul \u00e9l\u00e9ment (= un seul tableau pour un pays), on peut utiliser <code>.append()</code> : </p> <pre><code>&gt;&gt;&gt; pays.append(['Belgique', 'Bruxelles', '11']) \n</code></pre> <p> Attention, la concat\u00e9nation peut mener \u00e0 des doublons dans une table ou des incoh\u00e9rences :</p> <pre><code>&gt;&gt;&gt; pays.append(['Pays-Bas','17', 'Amsterdam'])\n&gt;&gt;&gt; pays\n[['France', 'Paris', '68'], \n ['Espagne', 'Madrid', '48'], \n ['Italie', 'Rome', '60'],\n ['Allemagne', 'Berlin', '82'], \n ['Portugal', 'Lisbonne', None],\n ['Pays-Bas', '17', 'Amsterdam']]\n</code></pre> <p>Note: On peut supprimer la ligne avec <code>del(pays[6])</code> et pour \u00e9viter les doublons cr\u00e9\u00e9s par <code>pays + pays_sud</code> on pr\u00e9f\u00e8rera faire :</p> <pre><code>&gt;&gt;&gt; pays_sud = [['Espagne', 'Madrid', '47'], ['Portugal', 'Lisbonne', None], ['Italie', 'Rome', '60'], ['Grece', 'Athenes', 10]]\n&gt;&gt;&gt; pays = pays + [p for p in pays_sud if p not in pays]\n</code></pre> <p>Et \u00e9viter des incoh\u00e9rences par exemple en v\u00e9rifiant les domaines de valeur.  Pour les pays, on peut v\u00e9rifier que les donn\u00e9es de population contiennent bien des chiffres.</p> <pre><code>&gt;&gt;&gt; pays.extend([p for p in pays_sud if p[2].isdigit()])\u2003\n</code></pre>"},{"location":"donnees-en-tables/5-fusionner-des-tables/#fusion-ou-jointure","title":"Fusion (ou Jointure)","text":"<p>On peut aussi vouloir r\u00e9unir les informations concernant les m\u00eames pays \u00e0 travers plusieurs tables, par exemple :</p> <pre><code>pib = [['France', '2900'], ['Espagne', '1600']]\n</code></pre> <p>il faut alors rajouter le nouveau champs ligne par ligne (avec <code>None</code> pour les informations manquantes) : </p> <pre><code>pays = [['France', 'Paris', '68'],\n ['Espagne', 'Madrid', '48'],\n ['Italie', 'Rome', '60']]\n\npib = [('France', '2900'),\n ('Espagne', '1600')]\n\nfor ligne_pays in pays:      # pour chaque ligne de pays\n    for ligne_pib in pib:         # parcourir les lignes de pib\n        if ligne_pays[0] == ligne_pib[0]:   # si c'est le meme pays\n            ligne_pays.append(ligne_pib[1] )     # alors on ajoute le pib \u00e0 la fin\n            break            # inutile de continuer \u00e0 parcourir pib\n    if len(ligne_pays) == 3:     # si on n'a pas trouv\u00e9 de pib pour ce pays\n        ligne_pays.append(None)     # on renseigne avec None\n</code></pre> <p>A noter la derni\u00e8re ligne qui permet de conserver l'int\u00e9grit\u00e9 de la table en ajoutant un champ <code>None</code> si le PIB d'un pays n'est pas pr\u00e9sent.</p> <p>Pour un tableau de p-uplets, les p-uplets sont immuables et la m\u00e9thode <code>.append()</code> ne fonctionne pas, il faut cr\u00e9\u00e9r un nouveau p-uplet  pour chaque ligne, par exemple: </p> <pre><code>pays = [('France', 'Paris', 68),\n ('Espagne', 'Madrid', 48),\n ('Italie', 'Rome', 60)]\n\npib = [('France', 2900),  ('Allemagne', 1600)]\n\nfor ligne_pays in range(len(pays)):           # pour chaque ligne de pays\n    for ligne_pib in pib:                     # parcourir les lignes de pib\n        if pays[ligne_pays][0] == ligne_pib[0]:     # si c'est le meme pays\n            pays[ligne_pays] = pays[ligne_pays] + (ligne_pib[1], ) # on ajoute le pib \u00e0 la fin\n            break                             # inutile de continuer \u00e0 parcourir pib\n    if len(pays[ligne_pays]) == 3 :    # on n'a pas trouv\u00e9 de pib\n        pays[ligne_pays] = pays[ligne_pays] + (None, ) # on complete le puplet avec None\n</code></pre> <p>Et pour un tableau de dictionnaire, on rajoute un couple de cl\u00e9-valeur \u00e0 chaque dictionnaire du tableau :</p> <pre><code>pays = [{'Capitale': 'Paris', 'Pays': 'France', 'Population (ml)': '68'}, \\\n        {'Capitale': 'Madrid', 'Pays': 'Espagne', 'Population (ml)': '48'}, \\\n        {'Capitale': 'Rome', 'Pays': 'Italie', 'Population (ml)': '60'}]\n\npib = [('France', 2900),  ('Espagne', 1600)]\n\nfor ligne_pays in pays:                       # pour chaque ligne de pays\n    for ligne_pib in pib:                     # parcourir les lignes de pib\n        if ligne_pays['Pays'] == ligne_pib[0]:     # si c'est le meme pays\n            ligne_pays['PIB'] = ligne_pib[1] # alors on ajoute le pib \u00e0 lacl\u00e9 PIB\n            break                             # inutile de continuer \u00e0 parcourir pib\n    if len(ligne_pays) == 3 : ligne_pays['PIB'] = None   # on n'a pas trouv\u00e9 de pib\n</code></pre> <ol> <li> <p>Ce n'est pas necessaire pour un tableau de dictionnaires.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/","title":"Langages et programmation","text":"<p>La programmation, appel\u00e9e aussi codage, est l'\u00e9criture de programmes informatiques, c\u2019est-\u00e0-dire la description d\u2019un algorithme dans un langage de programmation compr\u00e9hensible par une machine et par un humain.</p> <p>Un langage de programmation est un moyen de communication avec l'ordinateur mais aussi entre programmeurs ; les programmes \u00e9tant d'ordinaire \u00e9crits, lus et modifi\u00e9s par des \u00e9quipes de programmeurs.</p> <p>Il existe des centaines de langages de programmation<sup>1</sup>, par exemple C, C++, JavaScript, Java, PHP, etc. Le langage utilis\u00e9 dans ce chapitre est Python.</p> <p>Python<sup>2</sup> est un langage informatique invent\u00e9 par Guido Van Rossum. La premi\u00e8re version publique date de 1991. Il est multiplateforme (Linux, MacOS, Windows, android, iOS), libre et gratuit, mis \u00e0 jour r\u00e9guli\u00e8rement (version actuelle 3.13<sup>3</sup>).</p> <ol> <li> <p>https://fr.wikipedia.org/wiki/Liste_de_langages_de_programmation.\u00a0\u21a9</p> </li> <li> <p>Nomm\u00e9 en hommage \u00e0 la s\u00e9rie britannique Monty Python Flying Circus.\u00a0\u21a9</p> </li> <li> <p>en 2025.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/1-variables-affectation/","title":"Variables et affectation","text":""},{"location":"langages-et-programmation/1-variables-affectation/#variables","title":"Variables","text":"<p>L'informatique d\u00e9signe le traitement automatique de l'information<sup>1</sup>. Dans les programmes informatiques, l'information est repr\u00e9sent\u00e9e par des donn\u00e9es.</p> <p>Cours</p> <p>Les programmes informatiques manipulent des donn\u00e9es en utilisant des variables. Une variable permet d'associer un nom \u00e0 une valeur.</p> <p> </p> <p>Une variable informatique peut se concevoir comme une sorte de \u201cboite\u201d \u00e9tiquet\u00e9e avec un nom, dans laquelle un programme enregistre une valeur pour la consulter ou la modifier pendant son ex\u00e9cution<sup>2</sup>.</p> <p>En Python, comme dans la plupart des langages informatiques, le nom d'une variable :</p> <ul> <li>s'\u00e9crit en lettres minuscules (\u00ab <code>a</code> \u00bb \u00e0 \u00ab <code>z</code> \u00bb) et majuscules (\u00ab <code>A</code> \u00bb \u00e0 \u00ab <code>Z</code> \u00bb) et peut contenir des chiffres (\u00ab <code>0</code> \u00bb \u00e0 \u00ab <code>9</code> \u00bb) et le caract\u00e8re blanc soulign\u00e9 (\u00ab <code>_</code> \u00bb) ;</li> <li>ne doit pas comporter d'espace, de signes d'op\u00e9ration \u00ab <code>+</code> \u00bb, \u00ab <code>-</code> \u00bb, \u00ab <code>*</code> \u00bb ou \u00ab <code>/</code> \u00bb, ni de caract\u00e8res sp\u00e9ciaux comme des signes de ponctuation \u00ab <code>'</code> \u00bb, \u00ab <code>\"</code> \u00bb, \u00ab <code>,</code> \u00bb, \u00ab <code>.</code> \u00bb, \u00ab <code>:</code> \u00bb, \u00ab <code>@</code> \u00bb, etc.  ;</li> <li>ne doit pas commencer par un chiffre ;</li> <li>ne doit pas \u00eatre un mot r\u00e9serv\u00e9 de Python, par exemple \u00ab <code>for</code> \u00bb, \u00ab <code>if</code> \u00bb, \u00ab <code>print</code> \u00bb, etc. ; et</li> <li>est sensible \u00e0 la casse, ce qui signifie que les variables \u00ab <code>TesT</code> \u00bb, \u00ab <code>test</code> \u00bb ou \u00ab <code>TEST</code> \u00bb sont diff\u00e9rentes.</li> </ul> <p>En pratique cela permet d'\u00e9viter les noms de variable r\u00e9duits \u00e0 une lettre et d'utiliser des noms qui ont un sens ! </p> <p>PEP 8</p> <p>La PEP 8 <sup>4</sup> donne un grand nombre de recommandations de style pour \u00e9crire du code Python agr\u00e9able \u00e0 lire et recommande en particulier de nommer les variables par des mots en minuscule s\u00e9par\u00e9s par des blancs soulign\u00e9s  (<code>_</code>) <sup>5</sup>, par exemple d'appeler une variable <code>somme_des_nombres</code> plut\u00f4t que <code>s</code> dans un programme qui additionne des nombres.</p>"},{"location":"langages-et-programmation/1-variables-affectation/#types-de-variable","title":"Types de variable","text":"<p>Cours</p> <p>Les variables peuvent \u00eatre de types diff\u00e9rents en fonction des donn\u00e9es qu'elles repr\u00e9sentent.</p> <p>Les principaux types de variable sont :</p> <ul> <li>les nombres entiers (type <code>int</code>) ;</li> <li> <p>les nombres d\u00e9cimaux, appel\u00e9s \u00ab flottants \u00bb (type <code>float</code>) qui s'\u00e9crivent toujours avec un point ( le s\u00e9parateur d\u00e9cimal est un point, pas une virgule), par exemple <code>5.0</code>.</p> <p>Noter que <code>.5</code> et <code>5.</code> permettent d'\u00e9crire rapidement les flottants <code>0.5</code> et <code>5.0</code> et que <code>2e5</code> ou <code>2E5</code> (pour \\(2 \\times 10^5\\)) permettent d'\u00e9crire le nombre flottant <code>200000.0</code> ;</p> </li> <li> <p>les bool\u00e9ens prenant seulement les valeurs <code>True</code> ou <code>False</code> (type <code>bool</code>) ;</p> </li> <li>les textes ou chaines des caract\u00e8res (type <code>str</code>) \u00e9crits entre une paire de guillemets (<code>\"</code>) ou d'apostrophes (<code>'</code>) ;</li> <li>d'autres types dits \"construits\" comme les p_uplets, tableaux, dictionnaires<sup>6</sup>, etc.</li> </ul>"},{"location":"langages-et-programmation/1-variables-affectation/#affectation","title":"Affectation","text":"<p>Cours</p> <p>L'affectation consiste \u00e0 donner une valeur \u00e0 une variable. En Python, comme dans la plupart des langages informatiques, l'affectation d'une valeur \u00e0 une variable est repr\u00e9sent\u00e9e par le signe \u00ab <code>=</code> \u00bb.<sup>7</sup></p> <p>Par exemple, saisir les commandes suivantes dans la console Python permet d'affecter les valeurs 3 (type <code>int</code>), 3.0 (type <code>float</code>) et \"3\" (type <code>str</code>) \u00e0 des variables nomm\u00e9es respectivement <code>a</code>, <code>b</code> et <code>c</code>  :</p> <p>La console Python, ou interpr\u00e9teur Python, est un moyen rapide d'ex\u00e9cuter des commandes. Il suffit de taper une instruction en r\u00e9ponse \u00e0 l'invite <code>&gt;&gt;&gt;</code> puis d'appuyer sur la touche \u00ab Entr\u00e9e \u00bb pour lancer son ex\u00e9cution.</p> <p>PEP 8</p> <p>Mettre des espaces autour d'un \u00e9gal (<code>=</code>).</p> <pre><code>&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; b = 3.0\n&gt;&gt;&gt; c = \"3\"\n</code></pre> <p>En Python, c'est l'affectation qui d\u00e9finit le type d'une variable<sup>3</sup>.</p> <p>  C'est bien la valeur qui se trouve \u00e0 droite du signe \u00ab <code>=</code> \u00bb qui est affect\u00e9e \u00e0 la variable \u00e0 gauche, et pas dans l'autre sens. <pre><code>&gt;&gt;&gt; 3 = a\n  File \"&lt;interactive input&gt;\", line 1\nSyntaxError: can't assign to literal\n</code></pre></p> <p>PEP 8</p> <p>Mettre un espace apr\u00e8s une virgule (<code>,</code>) , mais pas avant.</p> <p>Il est aussi possible d'affecter des valeurs \u00e0 plusieurs variables en m\u00eame temps : <pre><code>&gt;&gt;&gt; a, b = 3, 4\n&gt;&gt;&gt; a\n3\n&gt;&gt;&gt; b\n4\n</code></pre></p> <p>et d'affecter la valeur d'une variable \u00e0 une autre variable, par exemple :</p> <p>Quand on tape le nom d'une variable dans la console, elle affiche sa valeur.</p> <pre><code>&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b\n3\n</code></pre> <p> Il n'est pas possible d'utiliser une variable avant de lui avoir affect\u00e9 une valeur. <pre><code>&gt;&gt;&gt; d\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nNameError: name 'd' is not defined\n</code></pre></p> <p>Exercice corrig\u00e9</p> <p>On affecte les valeurs 5 et 6 (de type <code>int</code>)  \u00e0 deux variables nomm\u00e9es respectivement <code>a</code> et <code>b</code> : <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; b = 6\n</code></pre> Compl\u00e9ter ces instructions pour \u00e9changer les valeurs de <code>a</code> et de <code>b</code> (sans utiliser les chiffres 5, 6 ou tout autre chiffre).</p> R\u00e9ponse <ol> <li> <p>Voyons d'abord la solution qui ne fonctionne pas : <pre><code>&gt;&gt;&gt; a = b\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a \n6\n&gt;&gt;&gt; b\n6\n</code></pre> Cette solution ne fonctionne pas car la valeur intiale de <code>a</code>, c'est-\u00e0-dire 5, est perdue quand on \u00e9crit <code>a = b</code>, on dit qu'elle est \"\u00e9cras\u00e9e\" par la valeur de <code>b</code>. Ensuite quand on \u00e9crit <code>b = a</code> on affecte la nouvelle valeur de <code>a</code>, c'est-\u00e0-dire 6 au lieu de 5, \u00e0 <code>b</code>.</p> </li> <li> <p>Une premi\u00e8re solution consiste donc \u00e0 utiliser une autre variable pour conserver la valeur intiale de <code>a</code> temporairement, appelons la <code>temp</code> : <pre><code>&gt;&gt;&gt; temp = a\n</code></pre> Et ensuite de faire l'\u00e9change :  <pre><code>&gt;&gt;&gt; a = b\n&gt;&gt;&gt; b = temp\n&gt;&gt;&gt; a\n6\n&gt;&gt;&gt; b\n5\n</code></pre> Notons que la derni\u00e8re instruction affecte la valeur de <code>temp</code>, c'est-\u00e0-dire 5, \u00e0 <code>b</code>, et pas la valeur de <code>a</code> puisqu'elle vaut 6 \u00e0 ce moment l\u00e0.</p> </li> <li> <p>Une deuxi\u00e8me solution plus \u00e9l\u00e9gante consiste \u00e0 utiliser l'affectation de plusieurs variables sur une seule ligne : <pre><code>&gt;&gt;&gt; a, b = b, a\n&gt;&gt;&gt; a\n6\n&gt;&gt;&gt; b\n5\n</code></pre></p> </li> <li> <p>Il existe aussi une troisi\u00e8me solution un peu plus compliqu\u00e9e, qui n'utilise ni variable temporaire, ni affectation de plusieurs variables en une seule ligne : <pre><code>&gt;&gt;&gt; a = a + b\n&gt;&gt;&gt; b = a - b\n&gt;&gt;&gt; a = a - b\n&gt;&gt;&gt; a\n6\n&gt;&gt;&gt; b\n5\n</code></pre></p> </li> </ol> <ol> <li> <p>Le terme \u00ab informatique \u00bb r\u00e9sulte de l'association du terme \u00ab information \u00bb au suffixe \u00ab -ique \u00bb signifiant \u00ab qui est propre \u00e0 \u00bb.\u00a0\u21a9</p> </li> <li> <p>La notion de variable en informatique diff\u00e8re des math\u00e9matiques. En math\u00e9matique une variable apparait dans l'expression symbolique d'une fonction \\(f(x)=2x+3\\), ou dans une \u00e9quation \\(2x+3=5x-3\\) pour d\u00e9signer une inconnue qu'il faut trouver, ou encore dans  une formule comme \\((a+b)\u00b2 =a\u00b2+2ab+b\u00b2\\) pour indiquer que l'\u00e9galit\u00e9 est vraie pour toutes les valeurs de \\(a\\) et \\(b\\).\u00a0\u21a9</p> </li> <li> <p>Python est un langage de typage dynamique, ce n'est pas le cas de nombreux langages comme le C  ou le C++ qui forcent \u00e0 d\u00e9finir le type d'une variable et \u00e0 le conserver au cours de la vie de la variable, ils sont de typage statique.  Exemple d'affectation en C : <pre><code>int a;\na = 3; \n</code></pre> \u21a9</p> </li> <li> <p>Une PEP (pour Python Enhancement Proposal) est un document fournissant des informations \u00e0 la communaut\u00e9 Python, ou d\u00e9crivant une nouvelle fonctionnalit\u00e9. En particulier la PEP 8 d\u00e9crit les conventions de style de code agr\u00e9able \u00e0 lire.\u00a0\u21a9</p> </li> <li> <p>Le style qui consiste \u00e0 nommer les variables par des mots \u00e9critsen minuscule s\u00e9par\u00e9s par des blancs soulign\u00e9s, par exemple <code>somme_des_nombres</code>, est appel\u00e9  \u00ab snake case \u00bb en opposition au style qui consiste \u00e0 \u00e9crire les mots attach\u00e9s en commen\u00e7ant par des majuscules, par exemple <code>SommeDesNombres</code>, appel\u00e9 \u00ab camel case \u00bb.\u00a0\u21a9</p> </li> <li> <p>Les p_uplet, tableaux, dictionnaires sont \u00e9tudi\u00e9s dans un autre chapitre du programme de 1\u00e8re.\u00a0\u21a9</p> </li> <li> <p>En algorithmique, l'affectation est symbolis\u00e9e par une fl\u00e8che allant de la valeur (\u00e0 droite) vers le nom de la variable (\u00e0 gauche), par exemple \\(a\u21903\\) pour affecter  la valeur \\(3\\) \u00e0 la variable \\(a\\).\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/2-operations-comparaisons-expressions/","title":"Op\u00e9rations, comparaisons, expression","text":""},{"location":"langages-et-programmation/2-operations-comparaisons-expressions/#operateurs-arithmetiques-sur-les-nombres","title":"Op\u00e9rateurs arithm\u00e9tiques sur les nombres","text":"<p>Les op\u00e9rations arithm\u00e9tiques usuelles sont effectu\u00e9es sur des nombres de types <code>int</code> ou <code>float</code> :</p> op\u00e9rateur notation addition <code>a + b</code> soustraction <code>a - b</code> multiplication <code>a * b</code> puissance <code>a**b</code> divisions d\u00e9cimale <code>a / b</code> <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; b = 2\n</code></pre> <p>PEP 8</p> <p>Entourer les op\u00e9rateurs math\u00e9matiques (<code>+</code>,  <code>-</code>, <code>/</code>, <code>*</code>) d'un espace avant et d'un espace apr\u00e8s.</p> <pre><code>&gt;&gt;&gt; a + b\n7\n&gt;&gt;&gt; a / b\n2.5\n&gt;&gt;&gt; a**b\n25\n</code></pre> <p>\u00c0 noter : </p> <p>Si <code>a</code> et <code>b</code> sont deux variables toutes les deux de type <code>int</code> alors le r\u00e9sultat d'une op\u00e9ration entre les deux est de type <code>int</code>, sauf pour la division qui est toujours de type <code>float</code> m\u00eame si le r\u00e9sultat est un entier :      <pre><code>&gt;&gt;&gt; 10 / 5\n2.0\n</code></pre>     et si l'un de <code>a</code> ou de <code>b</code> est de type <code>float</code> alors le r\u00e9sultat est toujours de type <code>float</code>.</p> <p>La racine carr\u00e9e d\u2019un nombre peut s'obtenir avec :  <code>a**0.5</code> <sup>10</sup>.</p> <p>L\u2019ordre des priorit\u00e9s math\u00e9matiques est respect\u00e9.</p> <p>Il est possible d'affecter une valeur \u00e0 une variable qui d\u00e9pend de son ancienne valeur, par exemple l\u2019augmenter d\u2019une quantit\u00e9 donn\u00e9e (on dit incr\u00e9menter)<sup>1</sup>. <pre><code>&gt;&gt;&gt; a = 3               \n&gt;&gt;&gt; a = a + 1               \n&gt;&gt;&gt; a                   \n4\n</code></pre></p> <p>PEP 8</p> <p>Dans ce cas particuliers, on peut omettre les espaces autour de la multiplication (<code>*</code>) pour montrer la priorit\u00e9 sur l'addition et am\u00e9liorer la lisibilit\u00e9 de la formule.</p> <p><pre><code>&gt;&gt;&gt; a = 2*a + 1     \n&gt;&gt;&gt; a\n9\n</code></pre> <sup>1</sup></p> <p>Des raccourcis d\u2019\u00e9criture existent pour aller plus vite (mais attention aux erreurs en les utilisant !).</p> <ul> <li><code>a += 1</code> signifie <code>a = a + 1</code>;</li> <li><code>a += b</code> signifie <code>a = a + b</code> ; et</li> <li><code>a *= 2</code> signifie <code>a = a * 2</code>.</li> </ul>"},{"location":"langages-et-programmation/2-operations-comparaisons-expressions/#division-entiere-ou-division-euclidienne","title":"Division enti\u00e8re (ou division euclidienne)","text":"<p>L'op\u00e9rateur de division enti\u00e8re <code>//</code> et l\u2019op\u00e9ration modulo <code>%</code> utilis\u00e9s avec des entiers (de type <code>int</code>) donnent respectivement le quotient et le reste d'une division euclidienne : si <code>a</code> et <code>b</code> sont des entiers tels que \\(a = b \\times q + r\\),  alors <code>a // b</code> donne \\(q\\) et <code>a % b</code> donne \\(r\\)<sup>2</sup>.</p> op\u00e9rateur notation quotient <code>a // b</code> reste <code>a % b</code> <p> </p> <p>Par exemple, le quotient et le reste de la division enti\u00e8re de \\(17\\) par \\(5\\) sont \\(3\\) et \\(2\\) respectivement (car \\(17 = 3  \\times 5 + 2\\)) :</p> <pre><code>&gt;&gt;&gt; a = 17\n&gt;&gt;&gt; b = 5\n&gt;&gt;&gt; a // b              \n3\n&gt;&gt;&gt; a % b\n2\n</code></pre> <p>L'op\u00e9rateur modulo, <code>%</code>, qui donne le reste d'une division enti\u00e8re, est tr\u00e8s utile pour d\u00e9terminer si un nombre est divisible par un autre nombre, dans ce cas le reste est \u00e9gal \u00e0 z\u00e9ro : <pre><code>&gt;&gt;&gt; 10 % 5\n0\n&gt;&gt;&gt; 10 % 3              \n1\n</code></pre> \\(10\\) est divisible par \\(5\\) mais pas par \\(3\\). </p>"},{"location":"langages-et-programmation/2-operations-comparaisons-expressions/#operateurs-sur-les-chaines-de-caracteres","title":"Op\u00e9rateurs sur les chaines de caract\u00e8res","text":"<p>Les textes ou chaines des caract\u00e8res, de type <code>str</code> (abr\u00e9viation de string), sont d\u00e9finis  entre une paire de guillemets (<code>\"</code>) ou d\u2019apostrophes (<code>'</code>)<sup>3</sup>. </p> <p><pre><code>&gt;&gt;&gt; chaine1 = 'Hello '\n&gt;&gt;&gt; chaine2 = \"world\"\n</code></pre> Pour les cha\u00eenes de caract\u00e8res, deux op\u00e9rations sont possibles, l'addition et la multiplication<sup>4</sup> :</p> <ul> <li> <p>L'op\u00e9rateur d'addition \u00ab <code>+</code> \u00bb concat\u00e8ne (assemble) deux cha\u00eenes de caract\u00e8res. <pre><code>&gt;&gt;&gt; chaine1 + chaine2\n'Hello world'\n</code></pre> <sup>11</sup></p> </li> <li> <p>L'op\u00e9rateur de multiplication \u00ab <code>*</code>\u00bb entre un nombre entier et une cha\u00eene de caract\u00e8res duplique (r\u00e9p\u00e8te) plusieurs fois une cha\u00eene de caract\u00e8res.  <pre><code>&gt;&gt;&gt; chaine1 * 3\n'Hello Hello Hello '\n</code></pre></p> </li> </ul> <p>La fonction <code>len()</code> donne le nombre de caract\u00e8re d\u2019une chaine (y compris les espaces et les signes de ponctuation).</p> <pre><code>&gt;&gt;&gt; ch = 'Hello world'\n&gt;&gt;&gt; len(ch)\n11\n</code></pre> <p>Chaque caract\u00e8re d\u2019une chaine de caract\u00e8res <code>ch</code> a une position qui va de <code>0</code> \u00e0 <code>len(ch) - 1</code>. </p> <ul> <li><code>ch[0]</code> permet d'acc\u00e9der au premier caract\u00e8re en position <code>0</code> de la chaine <code>ch</code>, </li> <li><code>ch[1]</code> au second caract\u00e8re en position <code>1</code>,</li> <li>... </li> <li><code>ch[i]</code> au caract\u00e8re en <code>i</code><sup>i\u00e8me</sup> position,</li> <li>... </li> <li><code>ch[len(ch) - 1]</code> au dernier caract\u00e8re. </li> </ul> <p> Les positions sont compt\u00e9es en commen\u00e7ant \u00e0 la position <code>0</code>, le premier caract\u00e8re est <code>ch[0]</code> et non pas <code>ch[1]</code> !</p> <pre><code>&gt;&gt;&gt; ch[6]   \n'w'\n</code></pre> <ul> <li>De m\u00eame, en partant de la fin, <code>ch[-1]</code> permet d'acc\u00e9der au dernier caract\u00e8re, <code>ch[-2]</code> \u00e0 l\u2019avant dernier, etc.  <pre><code>&gt;&gt;&gt; ch[-1]\n'd'\n</code></pre></li> </ul> <p>PEP 8</p> <p>Pas d'espace autour d'un deux-points (<code>:</code>).</p> <ul> <li>Enfin <code>ch[i:j]</code> permet d'obtenir la sous-cha\u00eene de tous les caract\u00e8res entre les positions <code>i</code> (inclus) et <code>j</code> (exclus), appel\u00e9e une tranche. <pre><code>&gt;&gt;&gt; ch[2:5]\n'llo'\n</code></pre></li> </ul> <p>Les mots-cl\u00e9s <code>in</code> et <code>not in</code> permettent de v\u00e9rifier l\u2019appartenance, ou pas, d\u2019une sous-chaine dans une chaine : <pre><code>&gt;&gt;&gt; \"py\" in \"python\"\nTrue\n&gt;&gt;&gt; \"Py\" not in \"python\"\nTrue\n</code></pre> Il existe de nombreuses m\u00e9thodes<sup>5</sup> pour traiter les chaines de caract\u00e8res, quelques exemples :</p> fonction description exemple <code>.index('c')</code> trouve l'index du premier caract\u00e8re <code>\"c\"</code> dans une cha\u00eene. <code>&gt;&gt;&gt; chaine = 'aaabbbccc'</code><code>&gt;&gt;&gt; chaine.index('b')</code><code>3</code> <code>.find('sc')</code> cherche la position d'une sous-cha\u00eene <code>sc</code> dans la cha\u00eene. <code>&gt;&gt;&gt; chaine.find('bc')</code><code>5</code> <code>.count('sc')</code> compte le nombre de sous-cha\u00eenes <code>sc</code> dans la cha\u00eene. <code>&gt;&gt;&gt; chaine.count('bc')</code><code>1</code> <code>.lower('sc')</code> onvertit une cha\u00eene en minuscules. <code>&gt;&gt;&gt; 'ABCdef'.lower()</code><code>'abcdef'</code> <code>.upper('sc')</code> onvertit une cha\u00eene en majuscules. <code>&gt;&gt;&gt; 'ABCdef'.upper()</code><code>'ABCDEF'</code> <code>.replace('old', 'new')</code> remplace tous les caract\u00e8res <code>old</code> par <code>new</code>  dans la cha\u00eene. <code>&gt;&gt;&gt; 'aaabbbccc'.replace('c', 'e')</code><code>'aaabbbeee'</code>"},{"location":"langages-et-programmation/2-operations-comparaisons-expressions/#operateurs-de-comparaison","title":"Op\u00e9rateurs de comparaison","text":"<p>Les op\u00e9rations de comparaison usuelless permettent de comparer des valeurs de m\u00eame type entre elles. Le r\u00e9sultat est toujours un bool\u00e9en (de type <code>bool</code>) \u00e9gal \u00e0 <code>True</code> ou <code>False</code><sup>6</sup> .</p> <p>PEP 8</p> <p>Entourer les op\u00e9rateurs de comparaison (<code>==</code>, <code>!=</code>, <code>&gt;=</code>, etc.) d'un espace avant et d'un espace apr\u00e8s.</p> op\u00e9rateur notation = <code>a == b</code> \u2260 <code>a != b</code> &lt; <code>a &lt; b</code> \u2264 <code>a &lt;= b</code> &gt; <code>a &gt; b</code> \u2265 <code>a &gt;= b</code> <p><sup>7</sup></p> <p> Une erreur courante consiste \u00e0 confondre l'op\u00e9rateur de comparaison <code>==</code> pour v\u00e9rifier si deux valeurs sont \u00e9gales avec l'affectation qui utilise le signe <code>=</code> !</p> <pre><code>&gt;&gt;&gt; a, b, c = 5, 5, 6\n&gt;&gt;&gt; a == b\nTrue\n&gt;&gt;&gt; a == c\nFalse\n</code></pre> <p>Il est possible de combiner les comparaisons, par exemple pour v\u00e9rifier si <code>a</code> est compris entre 2 et 6 : </p> <pre><code>&gt;&gt;&gt; 2 &lt;= a &lt; 6\nTrue\n</code></pre> <p>entre 7 et 8 : <pre><code>&gt;&gt;&gt; 7 &lt; a &lt; 8\nFalse\n</code></pre></p> <p>mais ce n'est pas recommand\u00e9 car c'est en fait une combinaison de plusieurs comparaisons, ce qui peut donner des h\u00e9r\u00e9sies math\u00e9matiques : </p> <pre><code>&gt;&gt;&gt; 4 &lt; a &gt; 2\nTrue\n</code></pre> <p>Les chaines de caract\u00e8res, quant \u00e0 elles, sont compar\u00e9es en ordre lexicographique, c\u2019est-\u00e0-dire caract\u00e8re par caract\u00e8re comme l'ordre des mots dans un dictionnaire :  on commence par comparer le premier caract\u00e8re de chaque cha\u00eene, puis en cas d\u2019\u00e9galit\u00e9 le deuxi\u00e8me de chaque, et ainsi de suite jusqu'\u00e0 trouver un caract\u00e8re qui est diff\u00e9rent de l'autre<sup>8</sup>. </p> <pre><code>&gt;&gt;&gt; 'aa'&gt;'ab'\nFalse\n&gt;&gt;&gt; \"python\" == \"python\"    \nTrue\n&gt;&gt;&gt; \"python\" != \"PYTHON\"\nTrue\n</code></pre> <p> Attention aux majuscules (elles sont \"avant\" toutes les minuscules) : <pre><code>&gt;&gt;&gt; \"java\" &lt; \"python\"   \nTrue\n&gt;&gt;&gt; \"java\" &gt; \"Python\"\nTrue\n</code></pre></p> <p>et aux nombres \u00e9crits dans des cha\u00eenes de caract\u00e8res : <pre><code>&gt;&gt;&gt; \"10\" &lt; \"2\"\nTrue\n</code></pre></p> <p>Les nombres de type <code>int</code> ou <code>float</code> peuvent \u00eatre compar\u00e9s entre eux m\u00eame s'ils sont de  types diff\u00e9rents : <pre><code>&gt;&gt;&gt; 7 == 7.0\nTrue\n&gt;&gt;&gt; 0.0 &lt; 1\nTrue\n</code></pre></p> <p>Mais pas les nombres avec les chaines de caract\u00e8res :  <pre><code>&gt;&gt;&gt; 7 == \"7\"\nFalse\n&gt;&gt;&gt; 7 &lt; '8'\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: '&lt;' not supported between instances of 'int' and 'str'\n</code></pre></p> <p> Attention aux \u00e9galit\u00e9s entre nombres de type <code>float</code> qui ne sont pas toujours encod\u00e9s de fa\u00e7on exacte<sup>9</sup> :</p> <pre><code>&gt;&gt;&gt; 0.1 + 0.1 + 0.1 == 0.3\nFalse\n</code></pre>"},{"location":"langages-et-programmation/2-operations-comparaisons-expressions/#operateurs-logiques-ou-booleens","title":"Op\u00e9rateurs logiques (ou bool\u00e9ens)","text":"<p>Les op\u00e9rations logiques peuvent \u00eatre effectu\u00e9es sur des bool\u00e9ens (type <code>bool</code>). Le r\u00e9sultat est un bool\u00e9en \u00e9gal \u00e0 <code>True</code> ou <code>False</code>.</p> op\u00e9rateur notation description priorit\u00e9 N\u00e9gation de <code>a</code> <code>not a</code> <code>True</code> si <code>a</code> est <code>False</code>, <code>False</code> sinon 1 <code>a</code> et <code>b</code> (conjonction) <code>a and b</code> <code>True</code> si <code>a</code> et <code>b</code> sont <code>True</code> tous les deux, <code>False</code> sinon 2 <code>a</code> ou <code>b</code> (disjonction) <code>a or b</code> <code>True</code> si <code>a</code> ou <code>b</code> (ou les deux) est <code>True</code>, <code>False</code> sinon 3 <p>(<code>a</code> et <code>b</code> sont des bool\u00e9ens).</p> <p>Comme pour les op\u00e9rations math\u00e9matiques, les op\u00e9rations logiques suivent des r\u00e8gles de priorit\u00e9 : </p> <ol> <li>N\u00e9gation (<code>not</code>), </li> <li>Conjonction (<code>and</code>), </li> <li>Disjonction (<code>or</code>).</li> </ol> <p><code>a or not b and c</code> est \u00e9quivalent \u00e0 <code>a or ((not b) and c)</code> mais en pratique les parenth\u00e8ses sont plus lisibles.</p>"},{"location":"langages-et-programmation/2-operations-comparaisons-expressions/#expressions","title":"Expressions","text":"<p>Cours</p> <p>Une expression est un calcul d\u2019op\u00e9rations et de comparaisons dont l'\u00e9valuation donne une valeur.</p> <p> Attention \u00e0 ne pas confondre une expression avec une instruction dont l'ex\u00e9cution fait quelque chose.  </p> <p>Exemples :</p> <ul> <li><code>2*a + 5</code> est une expression, elle a une valeur (qui d\u00e9pend de la valeur de <code>a</code>).  </li> <li><code>a == 5</code>  est une expression bool\u00e9ene, elle vaut <code>True</code>ou <code>False</code>.</li> <li><code>a = 5</code>   n\u2019est pas une expression, c\u2019est une instruction qui affecte de la valeur 5 \u00e0 la variable <code>a</code>.</li> </ul> <p></p> <p>\u00c0 noter: </p> <p>Quand une affectation est saisie dans la console Python, par exemple <code>&gt;&gt;&gt; a = 5</code>, rien n\u2019est affich\u00e9 par l'interpr\u00e9teur car ce n'est pas une expression.</p> <p>Quand une expression est saisie dans la console Python, par exemple <code>&gt;&gt;&gt; a == 5</code>, elle est \u00e9valu\u00e9e par l\u2019interpr\u00e9teur et le r\u00e9sultat est affich\u00e9 en dessous. </p> <p>Puisqu'elle a une valeur, une expression peut \u00eatre affect\u00e9e \u00e0 une variable :  <code>b = a**2</code> est une affectation de la valeur de l\u2019expression <code>a**2</code> (le carr\u00e9 de <code>a</code>) \u00e0 la variable <code>b</code>.</p> <p>Exercice corrig\u00e9</p> <p>La valeur d'une variable <code>annee</code> de type <code>int</code> est donn\u00e9e, par exemple <code>&gt;&gt;&gt; annee = 2023</code>.</p> <p>Ecrire dans l'interpr\u00e9teur une expression bool\u00e9enne, qui vaut <code>True</code> si <code>annee</code> est une ann\u00e9e bissextile ou <code>False</code> sinon.</p> <p>\u00ab Depuis l'ajustement du calendrier gr\u00e9gorien, l'ann\u00e9e sera bissextile (elle aura 366 jours) seulement si elle respecte l'un des deux crit\u00e8res suivants :</p> <ol> <li>C1 : l'ann\u00e9e est divisible par 4 sans \u00eatre divisible par 100 (cas des ann\u00e9es qui ne sont pas des multiples de 100) ;</li> <li>C2 : l'ann\u00e9e est divisible par 400 (cas des ann\u00e9es multiples de 100).</li> </ol> <p>Si une ann\u00e9e ne respecte ni le crit\u00e8re C1 ni le crit\u00e8re C2, l'ann\u00e9e n'est pas bissextile \u00bb. Source: https://fr.wikipedia.org/wiki/Ann\u00e9e_bissextile.</p> R\u00e9ponse <p>Avant d'\u00e9crire cette expression on peut se poser quelques questions :</p> <ul> <li>Comment savoir si un nombre est divisible par un autre ? Il suffit de v\u00e9rifier si le reste de la division enti\u00e8re est \u00e9gal \u00e0 z\u00e9ro ou pas. Par exemple 2023 n'est pas divisible par 4 car le reste de la division enti\u00e8re de 2023 par 4 est 3 :  <pre><code>&gt;&gt;&gt; annee = 2023\n&gt;&gt;&gt; annee % 4\n3\n</code></pre> Par contre 2024 est divisible par 4 car le reste de la division enti\u00e8re de 2024 par 4 est bien 0 :  <pre><code>&gt;&gt;&gt; annee = 2024\n&gt;&gt;&gt; annee % 4\n0\n</code></pre></li> <li> <p>On peut traduire directement en Python chaque condition C1 et C2 :</p> <p>C1 : l'ann\u00e9e est divisible par 4 sans \u00eatre divisible par 100 (cas des ann\u00e9es qui ne sont pas des multiples de 100) ;</p> <p><code>&gt;&gt;&gt; annee % 4 == 0 and annee % 100 != 0</code></p> <p>C2 : l'ann\u00e9e est divisible par 400 (cas des ann\u00e9es multiples de 100).</p> <p><code>&gt;&gt;&gt; annee % 400 == 0</code></p> </li> <li> <p> la derni\u00e8re clause indique qu'une ann\u00e9e n'est pas bissextile si les conditions C1 et C2 sont toutes les deux fausses. Il faut donc comprendre qu'une ann\u00e9e est bissextile si l'une des conditions C1 ou C2 est vraie (ou les deux en m\u00eame temps).</p> </li> </ul> <p>Traduit en Python, on obtient l'expression suivante que l'on peut tester dans la console.</p> <p>On pourrait se passer des parenth\u00e8ses et utiliser les r\u00e8gles de priorit\u00e9s des op\u00e9rateurs bool\u00e9ens : <code>annee % 4 == 0 and annee % 100 != 0 or annee % 400 == 0</code>, mais en pratique ce n'est pas recommand\u00e9.</p> <pre><code>&gt;&gt;&gt; annee = 2023\n&gt;&gt;&gt; (annee % 4 == 0 and annee % 100 != 0) or annee % 400 == 0\nFalse\n</code></pre> <ol> <li> <p>Noter dans cet exemple la diff\u00e9rence entre variable informatique et math\u00e9matique, et la signification du signe \u00ab = \u00bb. En math\u00e9matique \\(a = 2*a + 1\\) est une \u00e9quation dont l\u2019inconnue est \\(a\\) (elle peut \u00eatre facilement r\u00e9solue pour trouver la solution \\(a = -1\\)). En informatique, c\u2019est l'affection du r\u00e9sultat de <code>2*a + 1</code> \u00e0 la variable  <code>a</code> qui prend une nouvelle valeur (m\u00eame si \\(a \\neq -1\\)).\u00a0\u21a9\u21a9</p> </li> <li> <p>Vrai pour des entiers positifs. Attention aux surprises avec des nombres relatifs ! Les r\u00e9sultats sont diff\u00e9rents entre langages/syst\u00e8mes informatiques. En Python on peut tester <code>7 // -5</code> et <code>-17 // 5</code> qui donnent tous les deux <code>-4</code> mais <code>17 % -5</code> donne <code>-3</code> alors que <code>-17 % 5</code>  donne <code>3</code>.\u00a0\u21a9</p> </li> <li> <p>Pouvoir utiliser les apostrophes ou les guillemets offre un \u00e9norme avantage\u00a0: les guillemets permettent d'\u00e9crire  une cha\u00eene qui contient des apostrophes et vis-versa, par exemple <code>\"J'aime Python\"</code> ou <code>'Il dit \"hello\".'</code>.\u00a0\u21a9</p> </li> <li> <p>Attention : les op\u00e9rateurs <code>+</code> et <code>*</code> se comportent diff\u00e9remment s'il s'agit d'entiers ou de cha\u00eenes de caract\u00e8res : <code>2 + 2</code> est une addition alors que <code>'2' + '2'</code> est une concat\u00e9nation, <code>2 * 3</code> est une multiplication alors que  <code>'2' * 3</code> est une duplication.\u00a0\u21a9</p> </li> <li> <p>Une m\u00e9thode est un type de fonction particulier propre aux langages orient\u00e9s objet. Remarquer la construction <code>nom_variable.nom_methode()</code> dans ces cas diff\u00e9rente de <code>nom_fonction(nom_variable)</code> par exemple <code>len('abc')</code>.\u00a0\u21a9</p> </li> <li> <p><code>True</code> et <code>False</code> (et <code>None</code>) sont les rares mots en Python qui s\u2019\u00e9crivent avec une majuscule. <code>TRUE</code> ou <code>true</code> ne sont pas accept\u00e9s.\u00a0\u21a9</p> </li> <li> <p>Pr\u00e9f\u00e9rer <code>is</code> et <code>is not</code> \u00e0 <code>==</code> et <code>!=</code> pour comparer \u00e0 <code>None</code>, par exemple <code>a is not None</code> plut\u00f4t que <code>a != None</code>.\u00a0\u21a9</p> </li> <li> <p>Les comparaisons entre cha\u00eenes de caract\u00e8re se font en comparant le point de code Unicode de chaque caract\u00e8re. Il est donn\u00e9 par la fonction <code>ord()</code> (la fonction <code>chr()</code> fait \u2018inverse ). Par exemple, <code>ord('A')</code> vaut <code>65</code> et <code>ord('a')</code> vaut <code>97</code> donc <code>'A' &lt; 'a'</code> est vrai.\u00a0\u21a9</p> </li> <li> <p>Les nombres de type <code>float</code> sont encod\u00e9s par des fractions binaires qui \"approchent\" leur valeur le plus pr\u00e9cis\u00e9ment possible sans \u00eatre toujours parfaitement exactes. Par exemple le nombre \\(0,1\\) est repr\u00e9sent\u00e9 par la valeur <code>0.1000000000000000055511151231257827021181583404541015625</code> en Python (<code>format(0.1,'.55f')</code> permet d'afficher toutes les d\u00e9cimales).  Une particularit\u00e9 de Python est de ne pas limiter l\u2019encodage des <code>int</code>, par exemple comparer <code>&gt;&gt;&gt; 2*1000</code> avec <code>&gt;&gt;&gt; 2.**1000</code> dans la console.\u00a0\u21a9</p> </li> <li> <p>En math\u00e9matique \\(\\sqrt {a} = a ^ {1 \\over 2}\\).\u00a0\u21a9</p> </li> <li> <p>\u00ab Hello world \u00bb (traduit litt\u00e9ralement en fran\u00e7ais par \u00ab Bonjour le monde \u00bb) sont les mots traditionnellement \u00e9crits par un programme informatique simple dont le but est de faire la d\u00e9monstration rapide de son ex\u00e9cution sans erreur. Source : https://fr.wikipedia.org/wiki/Hello_world \u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/3-instructions/","title":"Instructions","text":"<p>Cours</p> <p>Une instruction est une commande dont l'ex\u00e9cution fait quelque chose.  </p> <p>Une s\u00e9quence est une suite d\u2019instructions.</p> <p> Attention \u00e0 ne pas confondre une instruction avec une expression dont l'\u00e9valuation donne une valeur.</p> <p>Par exemple :</p> <ul> <li><code>a = 2</code> est une instruction qui affecte la valeur <code>2</code> \u00e0 la variable <code>a</code>.</li> <li><code>print('Hello world')</code> est une instruction qui affiche la chaine  <code>'Hello world'</code> dans la console.</li> <li><code>a == 2</code> n'est pas une instruction, c'est une expression qui compare la valeur de <code>a</code> \u00e0 <code>2</code>, la valeur de cette expression est <code>True</code> ou <code>False</code>.</li> </ul>"},{"location":"langages-et-programmation/3-instructions/#type","title":"<code>type()</code>","text":"<p>La fonction <code>type()</code> permet de connaitre le type d\u2019une variable.<sup>1</sup></p> <p>PEP 8</p> <p>Pas d\u2019espace avant et \u00e0 l\u2019int\u00e9rieur des parenth\u00e8ses d\u2019une fonction.</p> <pre><code>&gt;&gt;&gt; x = 2\n&gt;&gt;&gt; type(x)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; y = 2.0\n&gt;&gt;&gt; type(y)\n&lt;class 'float'&gt;\n&gt;&gt;&gt; z = '2'\n&gt;&gt;&gt; type(z)\n&lt;class 'str'&gt;\n</code></pre>"},{"location":"langages-et-programmation/3-instructions/#conversion-de-type","title":"Conversion de type","text":"<p>Les fonctions suivantes permettent de convertir une variable d\u2019un type \u00e0 un autre :</p> fonction description exemple <code>int()</code> Convertit une chaine de caract\u00e8res ou un flottant en entier. <code>&gt;&gt;&gt; int(2.8)</code><code>2</code><code>&gt;&gt;&gt; int('2')</code><code>2</code> <code>float()</code> Convertit une chaine de caract\u00e8res ou un entier en flottant. <code>&gt;&gt; float(5)</code><code>5.0</code><code>&gt;&gt;&gt; float('5.5')</code><code>5.5</code> <code>str()</code> Convertit un entier ou un flottant en une chaine de caract\u00e8res. <code>&gt;&gt;&gt; str(5.5)</code><code>'5.5'</code> <p>Observons dans la console comment une variable de type <code>float</code> qui a une valeur enti\u00e8re est affich\u00e9 avec un point :</p> <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n&gt;&gt;&gt; float(a)\n5.0\n</code></pre>"},{"location":"langages-et-programmation/3-instructions/#instructions-dentree-et-sortie","title":"Instructions d\u2019entr\u00e9e et sortie","text":"<p>Cours</p> <p>Une instruction d\u2019entr\u00e9e permet \u00e0 un programme de lire une valeur saisie au clavier par l\u2019utilisateur. Une instruction de sortie affiche un message sur l\u2019\u00e9cran de l'utilisateur.</p> <p>En Python, la fonction <code>input()</code> permet d\u2019\u00e9crire une instruction d\u2019entr\u00e9e qui affecte la valeur saisie par l\u2019utilisateur \u00e0 une variable.  <pre><code>&gt;&gt;&gt; saisie = input('Saisir un message')\n&gt;&gt;&gt; saisie\n'abc'\n</code></pre> La valeur renvoy\u00e9e par <code>input()</code> est toujours du type <code>str</code> : <pre><code>&gt;&gt;&gt; nombre_entier = input('Entrez un nombre entier')\n&gt;&gt;&gt; nombre_entier\n'25'\n</code></pre> Ici la valeur affect\u00e9e \u00e0 <code>nombre_entier</code> est une chaine de caract\u00e8res : <code>'25'</code>. Pour obtenir un nombre, de type <code>int</code> ou <code>float</code>, afin de faire des calculs par la suite par exemple, il faut la convertir :</p> <pre><code>&gt;&gt;&gt; nombre_entier = int(input('Entrez un nombre entier'))\n&gt;&gt;&gt; nombre_entier\n25\n</code></pre> <p>Si l\u2019utilisateur ne saisit pas un nombre entier, cette instruction g\u00e9n\u00e8re un message d\u2019erreur.</p> <p>Une instruction de sortie s\u2019\u00e9crit en utilisant <code>print()</code> pour afficher \u00e0 l\u2019\u00e9cran des chaines de caract\u00e8re et/ou des variables, s\u00e9par\u00e9s par des virgules. </p> <p>PEP 8</p> <p>Un espace apr\u00e8s une virgule (<code>,</code>), mais pas avant.</p> <pre><code>&gt;&gt;&gt; print('Hello')\nHello\n&gt;&gt;&gt; message='world'\n&gt;&gt;&gt; print('Hello', message)\nHello world\n&gt;&gt;&gt; nombre = 5\n&gt;&gt;&gt; print(nombre)\n5\n&gt;&gt;&gt; print('le nombre est', nombre)\nle nombre est 5\n&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; b = 6\n&gt;&gt;&gt; print('la somme de', a, 'et de', b, 'est', a + b)\nla somme de 5 et de 6 est 11\n</code></pre> <p>Par d\u00e9faut, <code>print()</code> provoque un retour \u00e0 la ligne apr\u00e8s chaque affichage. Pour changer ce comportement il faut pr\u00e9ciser la fin de l\u2019affichage en ajoutant un param\u00e8tre <code>end=</code> suivi d'une chaine de caract\u00e8res, par exemple un espace <code>end=' '</code> ou m\u00eame une chaine vide <code>end=''</code>. </p> <pre><code>&gt;&gt;&gt; print('Hello', end=' ')\nHello &gt;&gt;&gt;\n</code></pre> <p>Python 3.6 a introduit les chaine de caract\u00e8res f-strings (formatted string) qui s\u2019\u00e9crivent avec <code>f</code> devant et permettent d\u2019y ins\u00e9rer des variables, ou m\u00eame des expressions, entre accolades.  <pre><code>&gt;&gt;&gt; prenom = 'Paul'\n&gt;&gt;&gt; annee_naissance = 2010\n&gt;&gt;&gt; print(f'Bonjour {prenom}, vous avez {2023 - annee_naissance} ans')\nVotre nom est un Paul et vous avez 13 ans\n</code></pre></p>"},{"location":"langages-et-programmation/3-instructions/#premier-programme","title":"Premier programme","text":"<p>Pour permettre \u00e0 l'utilisateur d'entrer son pr\u00e9nom et sa date de naissance et d'affecter ses r\u00e9ponses aux variables <code>prenom</code> et <code>annee_naissance</code>, il faut \u00e0 chaque fois \u00e9crire dans la console les instructions suivantes : <pre><code>&gt;&gt;&gt; prenom = input('Entrez votre pr\u00e9nom : ')\nEntrez votre pr\u00e9nom : Paul\n&gt;&gt;&gt; annee_naissance = int(input('Entrez votre date de naissance : '))\nEntrez votre date de naissance : 2010\n&gt;&gt;&gt; print(f'Bonjour {prenom}, vous avez {2023 - annee_naissance} ans')\nBonjour Paul, vous avez 13 ans\n&gt;&gt;&gt; \n</code></pre> Cette s\u00e9quence montre les limites de la console, qui r\u00e9pond \u00e0 des commandes de fa\u00e7on interactive, mais ne permet pas d'\u00e9crire un programme \u00e9labor\u00e9 !</p> <p>Ouvrons IDLE (/python/Lib/idlelib/idle.bat) pour \u00e9crire un premier programme, l'interpr\u00e9teur de commande avec l'invite Python <code>&gt;&gt;&gt;</code> appara\u00eet :</p> <p>Python propose par d\u00e9faut un IDE (pour Integrated Development Environment) appel\u00e9 IDLE. Il existe de nombreux IDE, certains d\u00e9di\u00e9s \u00e0 Python comme PyScripter, Thonny, etc. et d'autres g\u00e9n\u00e9ralistes comme VS Codium, VS Code, etc. acceptant plusieurs langages informatiques.</p> <p></p> <p>Ouvrons un nouveau fichier avec le menu <code>File/New</code> pour entrer le programme Python suivant :  <pre><code>prenom = input('Entrez votre pr\u00e9nom : ')\nannee_naissance = int(input('Entrez votre date de naissance : '))\nprint(f'Bonjour {prenom}, vous avez {2023 - annee_naissance} ans')\n</code></pre></p> <p></p> <p>Enregistrons le programme dans nos fichiers avec le menu <code>File/Save As</code> puis <code>Run/Run Module</code> pour ex\u00e9cuter le programme. Le r\u00e9sultat est affich\u00e9 dans la console :</p> <p></p> <p>Nous avons \u00e9crit notre premier programme informatique !</p> <p>Notons au passage une diff\u00e9rence importante entre l'affichage d'une variable depuis la console et depuis un programme :</p> Depuis la consoleDepuis un programmeDepuis un programme avec print() <p>Il suffit de saisir le nom de la variable \u00e0 l'invite de commande pour afficher sa valeur : <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; a\n5\n</code></pre> </p> <p>Le programme suivant n'affiche rien dans la console : <pre><code>a = 5\na\n</code></pre> </p> <p>Il faut utiliser l'instruction <code>print()</code> dans un programme pour afficher la valeur d'une variable dans la console. <pre><code>a = 5\nprint(a)\n</code></pre> </p> <p>Exercice corrig\u00e9</p> <p>Pour passer d\u2019un pixel couleur cod\u00e9 RGB (m\u00e9lange des trois couleurs rouge, vert, bleu) \u00e0 un pixel en nuance de gris, on utilise la formule suivante qui donne le niveau de gris : \\(G = 0,11 \\times R + 0,83 \\times V + 0,06 \\times B\\) o\u00f9 \\(R\\), \\(V\\) et \\(B\\) sont les niveaux de rouge, vert et bleu.</p> <p>Ecrire le programme qui demande en entr\u00e9e les 3 couleurs d\u2019un pixel et affiche en sortie la nuance de gris.</p> R\u00e9ponse <p>Quelques questions \u00e0 se poser avant d'\u00e9crire le programme demand\u00e9 :</p> <ul> <li>Quelles sont les informations \u00e0 saisir par l'utilisateur ? Les trois niveaux de couleurs \\(R\\), \\(V\\) et \\(B\\).</li> <li>O\u00f9 stocker ces informations ? Dans trois variables de type <code>int</code> nomm\u00e9es par exemple <code>R</code>, <code>V</code> et <code>B</code> comme dans la formule.</li> <li>Que doit calculer le programme ? Le niveau de gris calcul\u00e9 en utilisant la formule et stock\u00e9 dans une variable, nomm\u00e9e par exemple <code>G</code>, de type <code>int</code>.</li> <li>Que doit faire ensuite le programme ? Le programme doit afficher le niveau de gris.</li> </ul> <p>Traduit en Python, le programme s'\u00e9crit simplement :</p> <p>Noter la pr\u00e9sence de commentaires dans le code, commen\u00e7ant par le signe <code>#</code>, ils sont ignor\u00e9s par l'interpr\u00e9teur Python.</p> <p>Essayer le programme sans faire la conversion des variables <code>R</code>, <code>V</code> et <code>B</code> en <code>int</code> et constater l\u2019erreur produite.</p> <pre><code># Demande les 3 couleurs R, V et B de type int\nR = int(input('Rouge:'))\nV = int(input('Vert:'))\nB = int(input('Bleu:'))\n# Calcule le niveau de gris G, de type int\nG = int(0.11 * R + 0.83 * V + 0.06 * B)\n# Affiche le niveau de gris\nprint(f'Le niveau de Gris est {G}')\n</code></pre> <ol> <li> <p>Nous n\u2019abordons pas la notion de classe ici.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/4-constructions-elementaires/","title":"Constructions \u00e9l\u00e9mentaires","text":"<p>Cours</p> <p>En Python, l'indentation, ou d\u00e9calage vers la droite du d\u00e9but de ligne, d\u00e9limite les s\u00e9quences d'instructions et facilite la lisibilit\u00e9 en permettant d'identifier des blocs. La ligne pr\u00e9c\u00e9dant une indentation se termine toujours par le signe deux-points.</p> <p>PEP 8</p> <p>Pr\u00e9f\u00e9rer les espaces aux tabulations.</p> <p>L'indentation est normalement r\u00e9alis\u00e9e par quatre caract\u00e8res \u00ab espace \u00bb. Python acc\u00e8pte aussi une tabulation, voire un seul ou un autre nombre d'espaces, mais dans tous les cas il faut \u00eatre consistant \u00e0 travers tout un programme.</p>"},{"location":"langages-et-programmation/4-constructions-elementaires/#instructions-conditionnelles","title":"Instructions conditionnelles","text":"<p>Cours</p> <p>Une instruction conditionnelle ex\u00e9cute, ou pas, une s\u00e9quence d'instructions suivant la valeur d'une condition (une expression bool\u00e9enne qui prend la valeur <code>True</code> ou <code>False</code>).</p> <pre><code>if condition:\n    instructions\n</code></pre> <p>Par exemple, ce programme d\u00e9termine le stade de la vie d'une personne selon son age.</p> <p>PEP 8</p> <p>Pas d'espace avant le deux-points (<code>:</code>).</p> <p><pre><code>age = int(input(\"Quel age avez-vous ?\"))\nif age &gt;= 18:\n    stade = \"adulte\"\n    print(f\"Vous \u00eates un {stade}\")\n    print(f\"Vous avez {age} ans\")\n</code></pre>  Ne pas oublier les deux-points \u00ab <code>:</code> \u00bb apr\u00e8s la condition et l'indentation sur les lignes suivantes.</p> <p>L'indentation d\u00e9termine la s\u00e9quence \u00e0 ex\u00e9cuter (ou pas), dans ce cas les instructions qui suivent aux lignes 3, 4 et 5. Quand la condition (l'expression bool\u00e9enne) <code>age &gt;= 18</code> n'est pas v\u00e9rifi\u00e9e, aucune des trois instructions n'est ex\u00e9cut\u00e9e. </p> <p>Il est possible de ne pas indenter l'instruction en ligne 5 <code>print(f\"Vous avez {age} ans\")</code>, dans ce cas elle ne ferait plus partie de l'instruction conditionnelle et serait alors ex\u00e9cut\u00e9e dans tous les cas. </p> <p><pre><code>age = int(input(\"Quel age avez-vous ?\"))\nif age &gt;= 18:\n    stade = \"adulte\"\n    print(f\"Vous \u00eates {stade}\")\nprint(f\"Vous avez {age} ans\")\n</code></pre> Par contre, si l'instruction en ligne 4 <code>print(f\"Vous \u00eates {stade}\")</code> n'\u00e9tait pas indent\u00e9e, la variable <code>stade</code> ne serait pas d\u00e9finie quand la condition n'est pas v\u00e9rifi\u00e9e et dans ce cas il y aura un message erreur \u00e0 la ligne 4.</p> <p>La structure <code>if-else</code> permet de g\u00e9rer le cas o\u00f9 la condition est fausse :</p> <p>Cours</p> <pre><code>if condition:\n    instructions\nelse :\n    instructions_sinon\n</code></pre> <p>L\u2019instruction <code>else</code> n'a pas de condition, elle est toujours suivie des deux-points \u00ab <code>:</code> \u00bb .</p> <p><pre><code>age = int(input(\"Quel age avez-vous ?\"))\nif age &gt;= 18:\n    stade = \"adulte\"\nelse:\n    stade = \"enfant\"\nprint(f\"Vous \u00eates {stade}\")\nprint(f\"Vous avez {age} ans\")\n</code></pre> Dans ce cas, la variable <code>stade</code> est toujours d\u00e9finie, et l'instruction en ligne 6 <code>print(f\"Vous \u00eates {stade}\")</code> peut ne pas \u00eatre indent\u00e9e.\u2003</p> <p>La structure <code>if-elif-else</code> permet de remplacer des instructions conditionnelles imbriqu\u00e9es pour g\u00e9rer plusieurs cas distincts :</p> <p>Cours</p> <pre><code>if condition_1:\n    instructions_si_1\nelif condition_2:\n    instructions_si_2\nelif condition_3:\n    instructions_si_3\n\u2026\nelse :\n    instructions_sinon\n</code></pre> <p>Ces deux programmes font exactement la m\u00eame chose, mais le second est plsu lisible :</p> Instructions conditionnelles imbriqu\u00e9esInstructions conditionnelles en utilisant la structure <code>if-elif-else</code> <pre><code>if age &gt;= 18:\n    stade = \"adulte\"    # au dessus de 18\nelse:\n    if age &gt;= 12:\n        stade = \"ado\"    # entre 12 et 18\n    else:\n        if age &gt;= 2:       \n            stade = \"enfant\"    # entre 2 et 12 \n        else :\n            stade = \"b\u00e9b\u00e9\"    # moins de 2\n\nprint(f\"Vous \u00eates {stade}, vous avez {age} ans\")\n</code></pre> <p>Chaque fois qu'une condition <code>if</code> n'est pas v\u00e9rifi\u00e9e, le programme ex\u00e9cute toute la s\u00e9quence <code>else</code> correspondante. Il \"descend\" ainsi de suite dans les conditions imbriqu\u00e9es jusqu'\u00e0 ce qu'une condition soit v\u00e9rifi\u00e9e, et \u00e0 ce stade il sort de tous les blocs conditionnels et reprend \u00e0 l'instruction qui suit tous les blocs conditionnels imbriqu\u00e9s, ici \u00e0 ligne 12 <code>print(f\"Vous \u00eates {stade}, vous avez {age} ans\")</code>. </p> <p>Par exemple, si on affecte la valeur <code>10</code> \u00e0 la variable <code>age</code>, la premi\u00e8re condition en ligne 1 <code>if age &gt;= 18:</code> est fausse, le programme ex\u00e9cute donc toute la partie indent\u00e9e apr\u00e8s le premier <code>else:</code> correspondant en ligne 3. Il passe \u00e0 la seconde condition en ligne 4 <code>if age &gt;= 12:</code> qui est encore fausse, il \"passe\" donc \u00e0 la s\u00e9quence indent\u00e9e apr\u00e8s le <code>else:</code> correspondant en ligne 6. La troisi\u00e8me condition en ligne 7 <code>if age &gt;= 2:</code> est cette fois vraie, il ex\u00e9cute la ligne 8  <code>stade = \"enfant\"</code> et sort de toutes les instructions conditionnelles pour reprendre \u00e0 la ligne 12 et afficher le message <code>Vous \u00eates enfant, vous avez 10 ans</code>. </p> <p>Noter qu'il faut bien prendre soin \u00e0 l'indentation et que ce programme n'est pas tr\u00e8s lisible !</p> <pre><code>if age &gt;= 18:\n    stade = \"adulte\"    # au dessus de 18\nelif age &gt;= 12:\n    stade = \"ado\"    # entre 12 et 18\nelif age &gt;= 2:\n    stade = \"enfant\"    # entre 2 et 12\nelse :\n    stade = \"b\u00e9b\u00e9\"    # moins de 2\n\nprint(f\"Vous \u00eates {stade}, vous avez {age} ans\")\n</code></pre> <p>D\u00e8s que la premi\u00e8re conditions <code>if</code> ou une condition <code>elif</code> est v\u00e9rifi\u00e9e, le programme ne teste plus les conditions <code>elif</code> suivantes ni le <code>else</code> final, mais reprend directement \u00e0 l'instruction qui suit le bloc conditionnel, ici <code>print(f\"Vous \u00eates {stade}, vous avez {age} ans\")</code>. </p> <p>Par exemple, si on affecte la valeur <code>15</code> \u00e0 la variable <code>age</code>,  la premi\u00e8re condition en ligne 1 <code>if age &gt;= 18:</code> est fausse, le programme passe donc \u00e0 la conditions suivante <code>elif age &gt;= 12:\u2026</code>, celle-ci est v\u00e9rifi\u00e9e, il ex\u00e9cute donc la ligne 4  <code>stade = \"ado\"</code> et n'a pas besoin de v\u00e9rifier la condition suivante en ligne 5 <code>elif age &gt;=2 :\u2026</code> ni d'ex\u00e9cuter le <code>else:\u2026</code>. D\u00e8s que la condition <code>elif age &gt;= 12:\u2026</code> a \u00e9t\u00e9 v\u00e9rifi\u00e9e, il sort de toute l'instruction conditionnelle pour reprendre \u00e0 la ligne 10 et afficher le message <code>Vous \u00eates ado, vous avez 15 ans</code>. </p> <p>Rappel</p> <p>\u00c9viter les conditions d'\u00e9galit\u00e9 avec les nombres de type float. Par exemple :  <pre><code>if 2.3 - 0.3  == 2:\n    print('Python sait bien calculer avec les float')\nelse:\n    print('Python ne sait pas bien calculer avec les float')\n</code></pre></p> <p>PEP 8</p> <p>\u00c9viter de comparer des variables bool\u00e9ennes \u00e0 <code>True</code> ou <code>False</code> avec <code>==</code> ou avec <code>is</code>. </p> <p>On \u00e9crit : <pre><code>cond = True\nif cond:\n    print(\"la condition est vraie\"\n</code></pre> mais pas  <code>if cond == True:</code>  ni  <code>if cond is True:</code></p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire un programme qui demande une ann\u00e9e et affiche si elle est bissextile ou pas :</p> <ol> <li>en utilisant des conditions imbriqu\u00e9es.</li> <li>en utilisant une structure <code>if-elif-else</code>. </li> </ol> <p>\u00ab Depuis l'ajustement du calendrier gr\u00e9gorien, l'ann\u00e9e sera bissextile (elle aura 366 jours) seulement si elle respecte l'un des deux crit\u00e8res suivants :</p> <ol> <li>C1 : l'ann\u00e9e est divisible par 4 sans \u00eatre divisible par 100 (cas des ann\u00e9es qui ne sont pas des multiples de 100) ;</li> <li>C2 : l'ann\u00e9e est divisible par 400 (cas des ann\u00e9es multiples de 100).</li> </ol> <p>Si une ann\u00e9e ne respecte ni le crit\u00e8re C1 ni le crit\u00e8re C2, l'ann\u00e9e n'est pas bissextile \u00bb.</p> <p>Source: https://fr.wikipedia.org/wiki/Ann\u00e9e_bissextile.</p> R\u00e9ponse 1.en utilisant des conditions imbriqu\u00e9es <p>Analysons la d\u00e9finition donn\u00e9e par Wikipedia sous la forme d'un arbre : <pre><code>graph LR\nA[annee%4 == 0] --&gt; |True| B;\nA --&gt;|False| C{pas bissextile};\nB[annee%100 != 0] --&gt; |True| D{bissextile};\nB --&gt; |False| E;\nE[annee%400 == 0] --&gt; |True| F{bissextile};\nE --&gt; |False| G{pas bissextile};</code></pre></p> <p>Traduit en Python, on obtient le programme suivant.</p> <p><pre><code>annee = int(input('annee: ') )\nif annee % 4 == 0:                     # si annee est divisible par 4 ...\n    if annee % 100 != 0:                   # ... mais pas par 100,\n        print(annee, \"est bissextile\")         # alors elle est bissextile\n    else:                                   # ... et par 100, alors \n        if annee % 400 == 0:                    # soit elle est divisible par 400 ...\n            print(annee, \"est bissextile\")          # ...donc elle est bissextile\n        else:                                   # soit elle n'est pas divisible par 400\n            print(annee, \"n'est pas bissextile\")    # ...donc elle n'est pas bissextile\nelse:                                   # sinon, elle n'est divisible par 4 ...\n    print(annee, \"n'est pas bissextile\")   # ...donc elle n'est pas bissextile\n</code></pre> Le programme n'est pas facile \u00e0 lire. On note ici l'importance de l'indentation !  </p> R\u00e9ponse 2.en utilisant une structure <code>if-elif-else</code> <p>Chaque condition <code>if</code>, <code>elif</code>, <code>else</code> v\u00e9rifi\u00e9e termine la structure conditionnelle. Il faut donc tester les divisibilit\u00e9s en partant du plus grand nombre, <code>400</code>, puis <code>100</code>, puis <code>4</code> (car une fois qu'on a test\u00e9 la divisibilit\u00e9 par <code>4</code>, on ne peut plus tester la divisibilit\u00e9 par <code>100</code> ou <code>400</code>).  Modifions l'arbre pr\u00e9c\u00e9dent: <pre><code>graph LR\nA[annee%400 == 0] --&gt; |True| C{bissextile};\nA --&gt;|False| B;\nB[annee%100 == 0] --&gt;  |True| E;\nB --&gt;|False| D{pas bissextile};\nE[annee%4 == 0] --&gt; |True| F{bissextile};\nE --&gt; |False| G{pas bissextile};</code></pre></p> <p>Traduit en Python, on obtient le programme suivant.</p> <pre><code>annee = int(input('annee: ') )\nif annee % 400 == 0:        # si annee est divisible par 400\n    print(annee, \"est bissextile\")\nelif annee % 100 == 0:        # sinon, si annee est divisible par 100 (et pas par 400 car d\u00e9j\u00e0 test\u00e9)\n    print(annee, \"n'est pas est bissextile\")\nelif annee % 4 == 0:          # sinon, si annee est divisible par 4 (et pas par 100 et 400 car d\u00e9j\u00e0 test\u00e9s)\n        print(annee, \"est bissextile\")        \nelse:                         # sinon (l'annee n'est pas divisible par 4, 100 et 400 car d\u00e9j\u00e0 test\u00e9s)\n    print(annee, \"n'est pas est bissextile\")\n</code></pre> <p>Le programme est beaucoup plus lisible.</p> <p>Note</p> <p>il est bien s\u00fbr aussi possible d'utiliser l'expression trouv\u00e9e dans l'exercice corrig\u00e9 pr\u00e9c\u00e9dent :  <pre><code>annee = int(input('annee: ') )\nif (annee % 4 == 0 and not annee % 100 == 0) or annee % 400 == 0:\n    print(annee, 'est bissextile')\nelse:\n    print(annee, \"n'est pas bissextile\")\n</code></pre> mais ce n'est pas tr\u00e8s lisible.</p>"},{"location":"langages-et-programmation/4-constructions-elementaires/#boucles-non-bornees","title":"Boucles non born\u00e9es","text":"<p>Cours</p> <p>Une boucle non born\u00e9e (ou boucle conditionnelle) permet de r\u00e9p\u00e9ter une instruction ou une s\u00e9quence d'instructions, tant qu'une condition (une expression bool\u00e9enne) est vraie.</p> <pre><code>while condition:\n    instructions\n</code></pre> <p>La structure est similaire \u00e0 l'instruction conditionnelle. La condition qui suit le mot <code>while</code> est une expression de type bool\u00e9en qui prend la valeur <code>True</code> ou <code>False</code>. Le bloc d'instructions qui suit est ex\u00e9cut\u00e9 tant que la condition est vraie. Ce bloc d'instruction doit imp\u00e9rativement modifier la valeur de la condition afin qu'elle finisse par ne plus \u00eatre v\u00e9rifi\u00e9e, sinon la boucle est sans fin et le programme ne se terminera jamais !</p> <p>Exemple :</p> <p>Rappel</p> <p><code>i += 2</code> est une abr\u00e9viation de <code>i = i + 2</code></p> <pre><code>&gt;&gt;&gt; i = 0\n&gt;&gt;&gt; while i &lt;= 10:\n...     print(i)\n...     i += 2\n...     \n0\n2\n4\n6\n8\n10\n</code></pre> <p>Il faut toujours imp\u00e9rativement v\u00e9rifier que la condition ne sera plus v\u00e9rifi\u00e9e apr\u00e8s un nombre fini de passage, sinon le programme ne s'arr\u00eate jamais, le programme boucle ou diverge. Ici, c'est bien le cas gr\u00e2ce \u00e0 l'instruction <code>i += 2</code>, <code>i</code> finira bien par \u00eatre plus grand que 10.</p> <p>Exemple de programme qui boucle (erreur d'indentation dans l'instruction <code>i += 2</code>): <pre><code>i = 0\nwhile i &lt;= 10:\n    print(i)\ni += 2\n</code></pre></p> <p> Comme pour les instructions conditionnelles, il faut faire particuli\u00e8rement attention aux boucles avec les nombres de type <code>float</code>. La boucle suivante qui semble \u00e9crite correctement ne finira jamais : <pre><code>i = 1\nwhile i != 2:\n    i += 0.1\n    print(i)\n</code></pre></p> <p>Testons la m\u00eame boucle \u00e9crite correctement : <pre><code>i = 1\nwhile i &lt; 2:\n    i += 0.1\n    print(i)\n</code></pre> Elle affiche dans la console : <pre><code>1.1\n1.2000000000000002\n1.3000000000000003\n1.4000000000000004\n1.5000000000000004\n1.6000000000000005\n1.7000000000000006\n1.8000000000000007\n1.9000000000000008\n2.000000000000001\n</code></pre> <code>i</code> ne prend donc jamais la valeur <code>2</code>. </p>"},{"location":"langages-et-programmation/4-constructions-elementaires/#boucles-bornees","title":"Boucles born\u00e9es","text":"<p>Cours</p> <p>Une boucle born\u00e9e (ou boucle non conditionnelle) permet de r\u00e9p\u00e9ter <code>n</code>fois, <code>n</code> \u00e9tant un nombre entier connu, une instruction ou une s\u00e9quence d'instructions.</p> <pre><code>for i in range(n):\n    instructions\n</code></pre> <p><code>i</code> est appel\u00e9 l'indice de boucle ou compteur de boucle, il prend les <code>n</code> valeurs enti\u00e8res comprises entre 0 et n - 1.</p> <p> <code>i</code> ne prend pas la valeur n.</p> <p>Il est aussi possible d'utiliser :</p> <ul> <li> <p><code>range(d, f)</code> qui \u00e9num\u00e8re les <code>f-d</code> nombres entiers compris entre <code>d</code> et <code>f-1</code>.<sup>1</sup></p> </li> <li> <p><code>range(d, f, p)</code> qui \u00e9num\u00e8re les nombres entiers compris entre <code>d</code> et <code>f-1</code> avec un pas de <code>p</code> : <code>d</code>, <code>d+p</code>, <code>d+2p</code>, etc. <sup>2</sup></p> </li> </ul> <p>La boucle born\u00e9e ci-dessus est tr\u00e8s similaire \u00e0 la boucle non born\u00e9e suivante : <pre><code>i = 0\nwhile i &lt; n :\n    instructions\n    i += 1\n</code></pre> mais attention, comparons ces deux programmes :</p> Programme 1Programme 2 <pre><code>for i in range(5):\n    print(i, end=\" \")\n</code></pre> <pre><code>i = 0\nwhile i &lt; 5:\n    print(i, end=\" \"))\n    i = i + 1\n</code></pre> <p>Les deux programmes semblent afficher la m\u00eame chose, tous les chiffres de 0 \u00e0 4 : <code>0 1 2 3 4</code></p> <p>Pourtant ils sont diff\u00e9rents. Ajoutons une instruction <code>print(i)</code> \u00e0 la fin les deux programmes.</p> Programme 1Programme 2 <p><pre><code>for i in range(5):\n    print(i, end=\" \")\nprint(i)\n</code></pre> affiche : <code>0 1 2 3 4 4</code></p> <p>La valeur finale de <code>i</code> est <code>4</code></p> <pre><code>i = 0\nwhile i &lt; 5:\n    print(i, end=\" \")\n    i = i + 1\nprint(i)\n</code></pre> <p>affiche :  <code>0 1 2 3 4 5</code> La valeur finale de <code>i</code> est <code>5</code> afin que la condition ne soit plus valide.</p> <p>Dans le programme 1, la valeur finale de <code>i</code> est <code>4</code>, alors que dans le programme 2 c'est <code>5</code> afin que la condition ne soit plus valide.</p> <p>Autre diff\u00e9rence, quand on modifie l'indice de boucle dans une boucle <code>for</code>, il reprend la valeur suivante \u00e0 la prochaine r\u00e9p\u00e9tition. </p> Programme 1Programme 2 <p><pre><code>for i in range(5):\n    print(i, end=\" \")\n    i = i + 2\n    print(i, end=\" \")\n</code></pre> affiche : <code>0 2 1 3 2 4 3 5 4 6</code></p> <p>La valeur de <code>i</code> est modifi\u00e9e \u00e0 l'int\u00e9rieur de la boucle mais reprend la valeur suivante \u00e0 la prochaine r\u00e9p\u00e9tition.</p> <pre><code>i = 0\nwhile i &lt; 5:\n    print(i, end=\" \")\n    i = i + 2\n    print(i, end=\" \")\n</code></pre> <p>affiche :  <code>0 2 2 4 4 6</code></p> <p>La valeur de <code>i</code> est modifi\u00e9e \u00e0 l'int\u00e9rieur de la boucle.</p> <p>A chaque passage dans une boucle <code>for</code>, l'indice de boucle repart de sa valeur au dernier passage dans la boucle, m\u00eame si cette valeur a chang\u00e9 dans la boucle. En pratique, il n'est pas recommand\u00e9 de changer sa valeur dans la boucle.</p> <p>La boucle <code>for</code> poss\u00e8de d'autres possibilit\u00e9s tr\u00e8s utiles, par exemple elle permet d'\u00e9num\u00e9rer chaque caract\u00e8re d'une chaine de caract\u00e8res. Le programme ci-dessous affiche chaque lettre d'une variable message l'une apr\u00e8s l'autre. <pre><code>message = 'Hello world'\nfor c in message:\n    print(c)\n</code></pre></p>"},{"location":"langages-et-programmation/4-constructions-elementaires/#instructions-break-et-continue","title":"Instructions break et continue","text":"<p>Il existe deux instructions qui permettent de modifier l'ex\u00e9cution des boucles <code>while</code> et <code>for</code>, il s'agit de <code>break</code> et de <code>continue</code>.</p> <p>Cours</p> <p>  L'instruction <code>break</code> permet de sortir de la boucle courante et de passer \u00e0 l'instruction suivante.</p> <p>Par exemple, voici un programme qui redemande un mot de passe jusqu'\u00e0 obtenir le bon : <pre><code>while True:\n    mdp = input('mot de passe')\n    if mdp == '123456':\n        break\nprint('trouv\u00e9')\n</code></pre></p> <p>Cours</p> <p> </p> <p>L'instruction <code>continue</code> permet de sauter les instructions qui restent jusqu'\u00e0 la fin de la boucle et de reprendre \u00e0 la prochaine it\u00e9ration de boucle.</p> <p>Imaginons par exemple un programme qui affiche la valeur de \\(1 / (n - \u00ad7)\\) pour tous les entiers \\(n\\) compris entre \\(1\\) et \\(10\\). Il est \u00e9vident que quand \\(n\\) prend la valeur \\(7\\) il y aura une erreur. Gr\u00e2ce \u00e0 l'instruction <code>continue</code>, il est possible de traiter cette valeur \u00e0 part puis de continuer la boucle.</p> <pre><code>for n in range(10):\n    if n == 7:\n        continue\n    print(1 / (7 - n))\n</code></pre>"},{"location":"langages-et-programmation/4-constructions-elementaires/#boucles-imbriquees","title":"Boucles imbriqu\u00e9es","text":"<p>Cours</p> <p>  Il est possible d'imbriquer des boucles. A chaque passage dans la premi\u00e8re boucle (la boucle externe), la seconde boucle (la boucle interne) est effectu\u00e9e enti\u00e8rement. </p> <p> Attention \u00e0 l'indentation pour d\u00e9terminer \u00e0 quelle boucle appartiennent les instructions.  </p> <p>Par exemple le programme suivant affiche toutes les heures, minutes et seconde de la journ\u00e9e (de 0h0min0s \u00e0 23h59min59s) :</p> <pre><code>for heure in range(24):\n    for minute in range(60):\n        for seconde in range(60):\n            print(f\"{heure}h{minute}min{seconde}s\")\n</code></pre> <p>Exercice corrig\u00e9</p> <p>Exercice corrig\u00e9 : \u00c9crire un programme en Python qui affiche tous les nombres premiers inf\u00e9rieurs \u00e0 100.</p> <p>Rappel : un nombre est premier s'il n'a que deux diviseurs, 1 et lui-m\u00eame.</p> R\u00e9ponse <p>On utilise deux boucles for imbriqu\u00e9es : </p> <ul> <li>La premi\u00e8re boucle parcourt tous les nombres <code>n</code> allant de 2 (0 et 1 ne sont pas premiers) \u00e0 100 pour v\u00e9rifier s'ils sont premiers ou pas. </li> </ul> <p>On peut se contenter de chercher un diviseur <code>div</code> seulement entre 2 et \\(\\sqrt{n}\\) avec une boucle <code>while div**2 &lt;= n:</code> ou <code>while div &lt;= n**0.5:</code>.</p> <ul> <li>Pour chaque nombre <code>n</code>, la deuxi\u00e8me boucle v\u00e9rifie s'il est divisible par un nombre <code>div</code> compris entre 2 et <code>n - 1</code>. Si <code>n</code> est divisible par <code>div</code>, alors il n'est pas premier et on affecte la valeur <code>False</code> \u00e0 la variable <code>est_premier</code>. Dans ce cas, inutile de chercher d'autres diviseurs, on peut sortie de la boucle avec une instruction <code>break</code>.</li> </ul> <p>Ensuite, \u00e0 la fin de la deuxi\u00e8me boucle, on v\u00e9rifie si la variable <code>est_premier</code> est <code>True</code> et dans ce cas, cela signifie que le <code>n</code> est premier et il est affich\u00e9 \u00e0 l'\u00e9cran.</p> nombres_premiers.py<pre><code>for n in range(2, 101):\n    est_premier = True   \n    for div in range(2, n):   #on cherche un diviseur compris entre 2 et n - 1\n        if n % div == 0:\n            est_premier = False  # on a trouv\u00e9 un diviseur de n, il n'est pas premier\n            break  # on peut sortir de la boucle interne ici, inutile de continuer\n    if est_premier:         # on pr\u00e9f\u00e8re \u00e0 : if premier == True\n        print(n, end=\"-\")  \n</code></pre> <ol> <li> <p>L'avantage d'exclure la borne sup\u00e9rieure apparait clairement dans l'instruction <code>range(d, f)</code> qui comprend <code>f-d</code> nombres compris entre <code>d</code> (inclus) et <code>f</code> (exclus), comme l'a expliqu\u00e9 Edsger W. Dijkstra dans une note de 1982 \u21a9</p> </li> <li> <p>L'instruction <code>range()</code> fonctionne sur le mod\u00e8le <code>range([d\u00e9but,] fin [, pas])</code>. Les arguments entre crochets sont optionnels.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/5-fonctions/","title":"Appel de fonctions","text":"<p>Nous avons d\u00e9j\u00e0 utilis\u00e9 des fonctions comme <code>print()</code> ou <code>len()</code> qui sont des fonctions pr\u00e9d\u00e9finies par Python. Un programme utilise beaucoup de ces fonctions Python, mais il est aussi souvent tr\u00e8s utile de cr\u00e9er nos propres fonctions, ce qui pr\u00e9sente de nombreux avantages :</p> <p>Noter ici la diff\u00e9rence avec une fonction math\u00e9matique.</p> <ul> <li> <p>Modularit\u00e9 : Les fonctions permettent de d\u00e9couper un programme en petites parties ind\u00e9pendantes, ce qui facilite la lisibilit\u00e9 et la r\u00e9solution de probl\u00e8mes complexes.</p> </li> <li> <p>R\u00e9utilisabilit\u00e9 : Une fois qu'une fonction est d\u00e9finie, elle peut \u00eatre appel\u00e9e plusieurs fois sans avoir \u00e0 r\u00e9\u00e9crire le m\u00eame bloc de code \u00e0 chaque fois. </p> </li> <li> <p>Testabilit\u00e9 : Les fonctions sont des s\u00e9quences isol\u00e9es de code qui peuvent \u00eatre test\u00e9es individuellement.</p> </li> </ul> <p>Cours</p> <p>Une fonction est d\u00e9finie (ou \u00ab d\u00e9clar\u00e9e \u00bb) par :</p> <ul> <li>le mot r\u00e9serv\u00e9 <code>def</code> (pour define),</li> <li>son nom,</li> <li>z\u00e9ro, un ou plusieurs param\u00e8tres \u00e9crits entre parenth\u00e8ses (les parenth\u00e8ses sont obligatoires m\u00eame quand il n'y a pas de param\u00e8tres) et s\u00e9par\u00e9s par des virgules,</li> <li>deux-points <code>:</code>,</li> <li>une s\u00e9quence d'instructions indent\u00e9es (le \u00ab corps \u00bb de la fonction).</li> </ul> <pre><code>def nom_dela_fonction(param1, param2, ...):\n    instructions\n</code></pre> <p>Comme pour les noms de variables, le nom d'une fonction :</p> <ul> <li> <p>s'\u00e9crit en lettres minuscules (\u00ab <code>a</code> \u00bb \u00e0 \u00ab <code>z</code> \u00bb) et majuscules (\u00ab <code>A</code> \u00bb \u00e0 \u00ab <code>Z</code> \u00bb) et peut contenir des chiffres (\u00ab <code>0</code> \u00bb \u00e0 \u00ab <code>9</code> \u00bb) et le caract\u00e8re blanc soulign\u00e9 (\u00ab <code>_</code> \u00bb) ;</p> </li> <li> <p>ne doit pas comporter d'espace, de signes d'op\u00e9ration \u00ab <code>+</code> \u00bb, \u00ab <code>-</code> \u00bb, \u00ab <code>*</code> \u00bb ou \u00ab <code>/</code> \u00bb, ni de caract\u00e8res sp\u00e9ciaux comme des signes de ponctuation \u00ab <code>'</code> \u00bb, \u00ab <code>\"</code> \u00bb, \u00ab <code>,</code> \u00bb, \u00ab <code>.</code> \u00bb, \u00ab <code>:</code> \u00bb, \u00ab <code>@</code> \u00bb, etc.  ;</p> </li> <li> <p>ne doit pas commencer par un chiffre ;</p> </li> <li> <p>ne doit pas \u00eatre un mot r\u00e9serv\u00e9 de Python, par exemple \u00ab <code>for</code> \u00bb, \u00ab <code>if</code> \u00bb, \u00ab <code>print</code> \u00bb, etc. ; et</p> </li> <li> <p>est sensible \u00e0 la casse, ce qui signifie que les fonctions \u00ab <code>TesT</code> \u00bb, \u00ab <code>test</code> \u00bb ou \u00ab <code>TEST</code> \u00bb sont diff\u00e9rentes.</p> </li> </ul> <p>De la m\u00eame fa\u00e7on que dans les constructions \u00e9l\u00e9mentaires vues pr\u00e9c\u00e9demment (<code>if-else</code>, <code>while</code>, <code>for</code>), c'est l'indentation qui suit les deux-points qui d\u00e9termine le bloc d'instructions qui forment la fonction.</p> <p>Lorsqu'une fonction est d\u00e9finie dans un programme, elle ne s'ex\u00e9cute pas automatiquement.  Et ceci m\u00eame si la fonction comporte une erreur, l'interpr\u00e9teur Python ne s'en aper\u00e7oit pas.</p> Programme 1Programme 2 <p>La fonction <code>bonjour</code> n'est pas appel\u00e9e, ce programme ne fait rien.</p> <pre><code>def bonjour():\n    print('hello')\n</code></pre> <p>La fonction <code>bonjour</code> n'est pas appel\u00e9e, ce programme ne fait rien, m\u00eame s'il y une erreur,  il manque des apostrophes ou des guillemets autour de <code>'hello'</code>.</p> <pre><code>def bonjour():\n    print(hello)\n</code></pre> <p>D\u00e9finir une fonction consiste simplement \u00e0 d\u00e9crire son comportement et \u00e0 lui donner un nom. Pour ex\u00e9cuter la fonction, il faut l'appeler depuis un programme ou depuis la console Python en \u00e9crivant son nom suivi des parenth\u00e8se. </p> <p> Quand la fonction n'a pas de param\u00e8tres, il faut quand m\u00eame mettre les parenth\u00e8ses pour l\u2019appeler.</p> Depuis la consoleDepuis un programme <pre><code>def bonjour():\n    print('hello')\n</code></pre> <p>Ici le programme d\u00e9finit une fonction mais ne l'appelle pas. Elle peut \u00eatre appel\u00e9e depuis la console :</p> <pre><code>&gt;&gt;&gt; bonjour()\nhello\n</code></pre> <pre><code>def bonjour():\n    print('hello')\n\nbonjour()\n</code></pre> <p>Ici le programme d\u00e9finit une fonction et l'appelle imm\u00e9diatement. Quand le programme est ex\u00e9cut\u00e9, il affiche dans la console : <pre><code>hello\n</code></pre></p> <p>Il faut d\u00e9finir une fonction avant de l'appeler. Ces deux programmes affichent un message d'erreur :</p> Programme 1Programme 2 <p><pre><code>bonjour()\n\ndef bonjour():\n    print('hello')\n</code></pre> La fonction <code>bonjour</code> est appel\u00e9e avant d'\u00eatre d\u00e9finie, le programme affiche un message d'erreur :</p> <pre><code>Traceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'bonjour' is not defined\n</code></pre> <pre><code>def main():\n    bonjour()\n\nif __name__ == '__main__':\n    main()\n\ndef bonjour():\n    print('hello')\n</code></pre> <p>La fonction <code>bonjour</code> est appel\u00e9e avant d'\u00eatre d\u00e9finie, le programme affiche un message d'erreur :</p> <pre><code>Traceback (most recent call last):\n  File \"&lt;module1&gt;\", line 5, in &lt;module&gt;\n  File \"&lt;module1&gt;\", line 2, in main\nNameError: name 'bonjour' is not defined\n</code></pre>"},{"location":"langages-et-programmation/5-fonctions/#la-fonction-main","title":"La fonction <code>main()</code>","text":"<p>PyScripter, comme d'autres IDE (Integrated Development Environment), g\u00e9n\u00e8re automatiquement une fonction appel\u00e9e <code>main</code> avec le code suivant :</p> <pre><code>def main():\n    pass\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>En Python, comme dans la plupart des langages de programmation, il y a une fonction principale, appel\u00e9e souvent <code>main()</code>. Elle sert de point de d\u00e9part de l'ex\u00e9cution d'un programme. </p> <p>L'interpr\u00e9teur Python ex\u00e9cute tout programme lin\u00e9airement de haut en bas, donc il n'est pas indispensable de d\u00e9finir cette fonction <code>main()</code> dans chaque programme, mais il est recommand\u00e9 de le faire dans un long programme d\u00e9coup\u00e9s en plusieurs fonctions afin de mieux comprendre son fonctionnement.</p>"},{"location":"langages-et-programmation/5-fonctions/#parametres-et-arguments","title":"Param\u00e8tres et arguments","text":"<p>Cours</p> <p>M\u00eame si dans la pratique les deux termes sont souvent confondus par abus de langage, il faut faire la diff\u00e9rence entre : </p> <ul> <li> <p>Les param\u00e8tres (ou param\u00e8tres formels) d'une fonction sont des noms de variables \u00e9crits entre parenth\u00e8ses apr\u00e8s le nom de la fonction qui sont utilis\u00e9es par la fonction.</p> </li> <li> <p>Les arguments (ou param\u00e8tres r\u00e9els) sont les valeurs qui sont donn\u00e9es aux param\u00e8tres lorsque la fonction est appel\u00e9e. </p> </li> </ul> <p>On appelle une fonction en \u00e9crivant son nom suivi des arguments entre parenth\u00e8ses.</p> <p>Prenons en exemple une fonction simple :</p> <pre><code>def bonjour(prenom1, prenom2):\n    print('hello', prenom1, 'and', prenom2)\n\nbonjour('Tom', 'Lea')\n</code></pre> <p>La fonction <code>bonjour</code> est d\u00e9finie en ligne 1 par \u00ab <code>def bonjour(prenom1, prenom2):</code> \u00bb avec deux  param\u00e8tres <code>prenom1</code> et <code>prenom2</code>. Elle est ensuite appel\u00e9e \u00e0 la ligne 4, <code>bonjour('Tom', 'Lea')</code>,  en lui passant les arguments <code>'Tom'</code> et <code>'Lea'</code>,  ce sont les valeurs que prennent les deux param\u00e8tres <code>prenom1</code> et <code>prenom2</code> pendant l'ex\u00e9cution de la fonction.</p> <p><code>prenom1</code> prend la valeur du premier argument quand on appelle cette fonction <code>bonjour</code> et <code>prenom2</code> la valeur du deuxi\u00e8me. <code>prenom1</code>et <code>prenom2</code> sont appel\u00e9s des param\u00e8tres positionnels (en anglais positional arguments). Il est  obligatoire de leur donner une valeur quand on appelle une fonction. Par d\u00e9faut, les param\u00e8tres prennent les valeurs des arguments dans l'ordre de leurs positions respectives, dans l'exemple ci-dessus <code>prenom1</code> prend la valeur <code>'Tom'</code>  et <code>prenom2</code> la valeur <code>'Lea'</code>, comme indiqu\u00e9 par leur position.</p> <p>N\u00e9anmoins il est possible de changer l'ordre des arguments en pr\u00e9cisant le nom du param\u00e8tre auquel chacun correspond. Par exemple, ces deux appels de fonctions sont identiques :</p> <pre><code>&gt;&gt;&gt; bonjour('Tom', 'Lea')\nhello Tom and Lea\n&gt;&gt;&gt; bonjour(prenom2 = 'Lea', prenom1 = 'Tom')\nhello Tom and Lea\n</code></pre> <p>Dans tous les cas, il faut appeler une fonction avec suffisamment d'arguments pour tous ses param\u00e8tres positionnels, sinon la fonction ne peut pas s\u2019ex\u00e9cuter et affiche un message d'erreur  :</p> <pre><code>&gt;&gt;&gt; bonjour('Tom')\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: bonjour() missing 1 required positional argument: 'prenom2'\n</code></pre> <p>En plus des param\u00e8tres positionnels qui sont obligatoires, il existe des param\u00e8tres qui sont facultatifs ayant une valeur d'argument par d\u00e9faut s'il ne sont pas renseign\u00e9s, c'est-\u00e0-dire la valeur que prendra un param\u00e8tre si la fonction est appel\u00e9e sans argument correspondant. </p> <p>PEP 8</p> <p>Pas d'espace autour du \u00e9gal (<code>=</code>) dans le cas des param\u00e8tres par mot-cl\u00e9 (\u00e0 la diff\u00e9rence de l'affectation o\u00f9 ils sont recommand\u00e9s). </p> <pre><code>def bonjour(prenom1, prenom2='Lisa'):\n    print('hello', prenom1, 'and', prenom2)\n\n--- Exemple d\u2018appel dans l\u2018interpr\u00e9teur-----------------\n&gt;&gt;&gt; bonjour('Tom')\nhello Tom and Lisa\n</code></pre> <p>Ici, lorsque la fonction est d\u00e9finie \u00e0 la ligne 1 par \u00ab <code>def bonjour(prenom1, prenom2='Lisa'):</code> \u00bb, la valeur de <code>prenom2</code> est <code>'Lisa'</code> par d\u00e9faut, c'est la valeur qui est utilis\u00e9e par la fonction quand elle est appel\u00e9e sans argument correspondant.  <code>prenom2</code> est appel\u00e9 un param\u00e8tre par mot-cl\u00e9 (en anglais keyword argument). Le passage d'un tel argument lors de l'appel de la fonction est facultatif.<sup>1</sup></p> <p>Comme les param\u00e8tres positionnels, il est possible de changer l'ordre des arguments en pr\u00e9cisant le nom du param\u00e8tre auquel chacun correspond. </p> <p>Prenons l'exemple d'une fonction avec un param\u00e8tre positionnel (obligatoire) et deux param\u00e8tres (facultatifs) :</p> <pre><code>def bonjour(prenom1, prenom2='Lisa', prenom3='Zoe'):\n    print('hello', prenom1, ',', prenom2, 'and', prenom3)\n</code></pre> <p>et comparons plusieurs appels de la fonction :</p> Appel 1Appel 2Appel 3Appel 4Appel 5Appel 6Appel 7 <p>La fonction est appel\u00e9e avec trois arguments sans mot-cl\u00e9, ils sont pris dans l'ordre.</p> <pre><code>&gt;&gt;&gt; bonjour(\"Tom\", \"Lea\", \"Jean\")\nhello Tom , Lea and Jean\n</code></pre> <p>La fonction est appel\u00e9e sans arguments alors qu'elle a un param\u00e8tre positionnel obligatoire, il y a une erreur : bug:.</p> <pre><code>&gt;&gt;&gt; bonjour()\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: bonjour() missing 1 required positional argument: 'prenom1'\n</code></pre> <p>La fonction est appel\u00e9e avec deux arguments sans mot-cl\u00e9, ils sont pris dans l'ordre. Le troisi\u00e8me param\u00e8tre utilise la valeur par d\u00e9faut.</p> <pre><code>&gt;&gt;&gt; bonjour(\"Tom\", \"Lea\")\nhello Tom , Lea and Zoe\n</code></pre> <p>La fonction est appel\u00e9e avec deux arguments, le premier est positionnel, le second correspondant au mot-cl\u00e9 du troisi\u00e8me param\u00e8tre. Le deuxi\u00e8me param\u00e8tre utilise la valeur par d\u00e9faut.</p> <pre><code>&gt;&gt;&gt; bonjour(\"Tom\", prenom3=\"Lea\")\nhello Tom , Lisa and Lea\n</code></pre> <p>La fonction est appel\u00e9e avec les deux arguments par mot-cl\u00e9, mais il manque l'argument positionnel obligatoire, il y a une erreur : bug:</p> <pre><code>&gt;&gt;&gt; bonjour(prenom2=\"Jean\", prenom3=\"Lea\")\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: bonjour() missing 1 required positional argument: 'prenom1'\n</code></pre> <p>La fonction est appel\u00e9e avec deux arguments, le premier correspondant au mot-cl\u00e9 du troisi\u00e8me param\u00e8tre et le second correspond au param\u00e8tre positionnel. Il y a une erreur car les param\u00e8tres positionnels doivent \u00eatre plac\u00e9s avant.</p> <pre><code>&gt;&gt;&gt; bonjour(prenom3=\"Lea\", \"Tom\")\nFile \"&lt;interactive input&gt;\", line 1\nbonjour(prenom3=\"Lea\", \"Tom\")\n                            ^\nSyntaxError: positional argument follows keyword argument\n</code></pre> <p>La fonction est appel\u00e9e avec deux arguments, le premier correspondant au mot-cl\u00e9 du troisi\u00e8me param\u00e8tre et le second correspond au param\u00e8tre positionnel identifi\u00e9 par son mot-cl\u00e9. Le deuxi\u00e8me param\u00e8tre utilise la valeur par d\u00e9faut.</p> <pre><code>&gt;&gt;&gt; bonjour(prenom3=\"Lea\", prenom1=\"Tom\")\nhello Tom , Lisa and Lea\n</code></pre> <p>\u00c0 noter : </p> <p>Si une fonction est d\u00e9finie avec des param\u00e8tres positionnels et des param\u00e8tres par mot-cl\u00e9, les param\u00e8tres positionnels doivent toujours \u00eatre plac\u00e9s avant les param\u00e8tres par mot-cl\u00e9 : \u00c9crire \u00ab<code>def bonjour (prenom1='Tim', prenom2):</code>\u00bb  est incorrect.</p>"},{"location":"langages-et-programmation/5-fonctions/#linstruction-return","title":"L'instruction <code>return</code>","text":"<p>Prenons l'exemple d'une fonction tr\u00e8s pratique, <code>prix</code> qui permet d'afficher un prix en ajoutant la TVA. Cette fonction a deux param\u00e8tres, <code>prix_ht</code> le prix hors taxe d'un bien et <code>tva</code> le taux de TVA exprim\u00e9 en pourcent et qui vaut <code>20</code> par d\u00e9faut :</p> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    print(prix_ttc)\n</code></pre> Comment afficher le prix d'un article de 100 euros avec 5% de TVA ? C'est tr\u00e8s simple, il suffit de l'appeler :</p> <pre><code>&gt;&gt;&gt; prix(100, 5)\n105.0\n</code></pre> <p>Mais comment afficher le prix total de plusieurs articles avec des taux de tva diff\u00e9rents ? Par exemple un panier contenant un article de 100 euros \u00e0 5% de TVA et un autre article de 50 euros \u00e0 20% de TVA ? </p> <pre><code>&gt;&gt;&gt; prix(100, 5) + prix(50)\n105.0\n60.0\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'\n</code></pre> <p>Impossible de faire la somme des prix des deux articles ! Cette fonction montre tr\u00e8s rapidement ses limites. </p> <p>Plut\u00f4t que d'afficher le prix calcul\u00e9, il est plus judicieux de le renvoyer.</p> <p>Il n'y a pas de parenth\u00e8se \u00e0 l'instruction <code>return</code>.</p> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    return prix_ttc\n</code></pre> et d'afficher les prix qui nous int\u00e9ressent :</p> <pre><code>&gt;&gt;&gt; prix(100, 5)\n105.0\n&gt;&gt;&gt; prix(100, 5) + prix(50)\n165\n</code></pre> <p>Voyons plus en d\u00e9tail la diff\u00e9rence entre les deux fonctions avec <code>print()</code> et <code>return</code>. </p> Fonction avec <code>print()</code>Fonction avec <code>return</code> <pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    print(prix_ttc)\n</code></pre> <pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    return prix_ttc\n</code></pre> <p>Elles affichent toutes les deux le m\u00eame r\u00e9sultat quand elles sont appel\u00e9es dans la console :</p> <pre><code>&gt;&gt;&gt; prix(100, 5)\n105.0\n</code></pre> <p>Alors quelle est la diff\u00e9rence ? Elle appara\u00eet imm\u00e9diatement si on appelle la fonction depuis le programme avec <code>prix(100, 5)</code>:</p> Fonction avec <code>print()</code>Fonction avec <code>return</code> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    print(prix_ttc)\n\nprix(100, 5)\n</code></pre> Le programme affiche <code>105</code>.</p> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    return prix_ttc\n\nprix(100, 5)\n</code></pre> Le programme n'affiche rien.</p> <p>Et si on essaye d'appeler la fonction depuis le programme avec <code>print(prix(100, 5))</code>:</p> Fonction avec <code>print()</code>Fonction avec <code>return</code> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    print(prix_ttc)\n\nprint(prix(100, 5))\n</code></pre> Le programme affiche <code>105</code> quand <code>print(prix_ttc)</code> s'ex\u00e9cute puis <code>None</code> quand <code>print(prix(100, 5))</code> s'ex\u00e9cute.</p> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    return prix_ttc\n\nprint(prix(100, 5))\n</code></pre> Le programme affiche <code>105</code> quand <code>print(prix(100, 5))</code> s'ex\u00e9cute.</p> <ul> <li> <p>Avec <code>print()</code> la premi\u00e8re fonction <code>prix</code> affiche le r\u00e9sultat calcul\u00e9 dans la console mais ce r\u00e9sultat n'est plus utilisable dans la suite du programme, il est perdu ;</p> </li> <li> <p>par contre, avec <code>return</code> la seconde fonction  renvoie le r\u00e9sultat calcul\u00e9 qui peut \u00eatre utilis\u00e9 par exemple pour faire d'autres op\u00e9rations, pour l'affecter \u00e0 une variable, ou encore comme argument d'une autre fonction, voire m\u00eame pour \u00eatre tout simplement affich\u00e9 comme par exemple <code>print(prix(100, 5))</code>. </p> </li> </ul> <p>Appelons <code>prix(100, 5)</code> et essayons d'affecter la valeur renvoy\u00e9e par ces deux fonctions \u00e0 une variable :</p> Fonction avec <code>print()</code>Fonction avec <code>return</code> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    print(prix_ttc)\n\np = prix(100, 5)\n</code></pre> Dans ce cas la variable <code>p</code> a la valeur <code>None</code>,  ce n'est probablement pas ce qui \u00e9tait attendu !</p> <p><pre><code>def prix(prix_ht, tva=20):\n    prix_ttc = prix_ht * (1 + tva/100)\n    return prix_ttc\n\np = prix(100, 5)\n</code></pre> Dans ce cas la variable <code>p</code> a bien la valeur <code>105</code> comme attendu.</p> <p>Dans le doute, de fa\u00e7on g\u00e9n\u00e9rale, il faut \u00e9viter d'afficher un r\u00e9sultat avec <code>print()</code> dans une fonction autre que la fonction <code>main()</code> et pr\u00e9f\u00e9rer renvoyer le r\u00e9sultat avec <code>return</code>.</p> <p>Un autre point important \u00e0 noter est qu'une fonction se termine imm\u00e9diatement d\u00e8s qu'une instruction <code>return</code> est ex\u00e9cut\u00e9e. </p> <p>Par exemple dans la fonction <code>plus_petit(a, b)</code> suivante<sup>2</sup>, qui renvoie le plus petit de deux nombres <code>a</code> et <code>b</code> :</p> <pre><code>def plus_petit(a, b): \n    if a &lt; b:\n        return a\n    else: \n        return b\n</code></pre> <p>le <code>else</code> en ligne 4 est inutile. On peut simplement \u00e9crire :  <pre><code>def plus_petit(a, b): \n    if a &lt; b:\n        return a\n    return b\n</code></pre> En effet, si <code>a</code> est plus petit que <code>b</code>, la fonction se termine \u00e0 la ligne 3 et le dernier <code>return b</code> ne sera jamais ex\u00e9cut\u00e9.</p> <p>Pour finir, Une fonction peut aussi renvoyer plusieurs valeurs en m\u00eame temps, s\u00e9par\u00e9es par des virgules, par exemple la fonction <code>carre_cube(x)</code> suivante renvoie le carr\u00e9 le cube d'un nombre <code>x</code> : </p> <pre><code>def carre_cube(x):\n   return x**2, x**3\n\nprint(carre_cube(5))\n</code></pre> <p>affiche <code>(25, 125)</code>.</p> <p>Cours</p> <p>Le verbe \"renvoyer\" est pr\u00e9f\u00e9r\u00e9 \u00e0 \"retourner\" (anglicisme pour return).</p> <p>Une fonction peut renvoyer une ou plusieurs valeurs avec l'instruction <code>return</code>.</p> <p>La fonction se termine imm\u00e9diatement d\u00e8s qu'une instruction <code>return</code> est ex\u00e9cut\u00e9e. Les instructions suivantes sont ignor\u00e9es.</p> <p>\u00c0 noter :</p> <p>S'il n'a pas d'instruction <code>return</code> dans une fonction, elle renvoie <code>None</code><sup>3</sup>. </p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire une fonction <code>est_premier(nombre)</code> qui renvoie <code>True</code> si <code>nombre</code> est un nomber premier et <code>False</code> sinon.</p> <p>Rappel : un nombre est premier s'il n'a que deux diviseurs, 1 et lui-m\u00eame.</p> Aide <p>Le fait qu'une fonction se termine imm\u00e9diatement apr\u00e8s une instruction <code>return</code> est bien utile dans ce cas. Pour v\u00e9rifier si <code>nombre</code> est premier, il suffit de tester tous les entiers entre <code>2</code> et <code>n-1</code> les uns apr\u00e8s les autres pour trouver un diviseur autre que <code>1</code> et <code>nombre</code>.  D\u00e8s qu'un diviseur est trouv\u00e9, inutile de continuer, le nombre n'est pas premier et dans ce cas l'instruction <code>return False</code> termine la fonction. Si aucun diviseur n'est trouv\u00e9 apr\u00e8s les avoir tous test\u00e9s, la fonction se termine en renvoyant <code>True</code>.</p> R\u00e9ponse Avec une boucle <code>for</code> en testant les entiers allant de 2 \u00e0 <code>nombre</code> (exclus)Avec une boucle <code>while</code> en testant les entiers allent de 2 \u00e0 la racine carr\u00e9e du nombre <pre><code>def est_premier(nombre):\n    # Cherche un diviseur entre 2 et nombre-1\n    for div in range(2, nombre):\n        if nombre % div == 0:\n            return False    # div est un diviseur, nombre n'est pas premier, la fonction se termine et renvoie False\n    return True   # si aucun diviseur n'a \u00e9t\u00e9 trouv\u00e9 alors le nombre est premier, la fonction renvoie True\n</code></pre> <pre><code>def est_premier(nombre):\n    div = 2\n    # Cherche un diviseur entre 2 et la racine carr\u00e9 de nombre\n    while div**2 &lt;= nombre:\n        if nombre % div == 0:\n            return False   # div est un diviseur, nombre n'est pas premier, la fonction se termine et renvoie False\n        div = div + 1    # essayons le suivant\n    return True   # si aucun diviseur n'a \u00e9t\u00e9 trouv\u00e9 alors le nombre est premier, la fonction renvoie True\n</code></pre> <p>Appelons la fonction <code>estpremier</code>avec les arguments 13 et 21 :</p> Appel <code>estpremier(13)</code>Appel <code>estpremier(21)</code> <p><code>div</code> prend les valeurs <code>2</code>, <code>3</code>, etc. et aucune de ces valeurs n'est un diviseur de <code>13</code>, l'instruction conditionnelle <code>nombre % div == 0</code> n'est jamais v\u00e9rifi\u00e9e, la boucle se termine et la derni\u00e8re instruction <code>return True</code> est ex\u00e9cut\u00e9e, la fonction se termine.</p> <pre><code>&gt;&gt;&gt; estpremier(13)\nTrue\n</code></pre> <p><code>div</code> prend la valeur <code>2</code>, ce n'est pas un diviseur de <code>21</code> (<code>21 % 2</code> est \u00e9gal \u00e0 1), la boucle continue. <code>div</code> prend la valeur <code>3</code>, c'est pas un diviseur de <code>21</code> (<code>21 % 3</code> est \u00e9gal \u00e0 0), l'instruction conditionnelle <code>nombre % div == 0</code> est v\u00e9rifi\u00e9e, donc l'instruction <code>return False</code> est ex\u00e9cut\u00e9e et la fonction se termine, la derni\u00e8re instruction <code>return True</code> n'est jamais ex\u00e9cut\u00e9e.</p> <pre><code>&gt;&gt;&gt; estpremier(21)\nFalse\n</code></pre>"},{"location":"langages-et-programmation/5-fonctions/#fonction-lambda","title":"Fonction lambda","text":"<p>Cours</p> <p>En Python, les fonctions lambda sont des fonctions extr\u00eamement courtes, limit\u00e9es \u00e0 une seule expression, sans utiliser le mot-cl\u00e9 <code>def</code>. <pre><code>nom_de_fonction = lambda param1, param2,\u2026: expression\n</code></pre></p> <p>Prenons par exemple une fonction qui ajoute deux valeurs : <pre><code>&gt;&gt;&gt; somme = lambda x, y: x + y\n&gt;&gt;&gt; somme(3, 5)\n8\n</code></pre></p> <p>Ici la fonction lambda est d\u00e9finie par l'expression <code>lambda x, y: x + y</code> qui comporte :</p> <ul> <li>le mot r\u00e9serv\u00e9 <code>lambda</code>,</li> <li>suivi de deux param\u00e8tres <code>x</code> et <code>y</code> plac\u00e9s avant les deux-points,</li> <li>deux-points <code>:</code>,</li> <li>l'expression de la valeur renvoy\u00e9e <code>x + y</code>, plac\u00e9e apr\u00e8s les deux-points.</li> </ul> <p>Le signe <code>=</code> affecte cette fonction \u00e0 une variable, ici <code>somme</code>, c'est le nom de cette fonction.</p> <p>L'instruction <code>somme(3, 5)</code> permet ensuite d'appeler la fonction avec deux arguments <code>3</code> et <code>5</code>.</p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire la fonction cube qui renvoie le cube d'un nombre sous formes classique et lambda.</p> R\u00e9ponse <p><pre><code>def cube(y): \n   return y**3\n</code></pre> et </p> <pre><code>cube = lambda y: y**3 \n</code></pre> <p>R\u00e9duite \u00e0 une seule expression, les fonctions lambda permettent d'utiliser une instruction conditionnelle \u00e9crite sous une forme un peu diff\u00e9rente que vue pr\u00e9c\u00e9demment : </p> <p><pre><code>&gt;&gt;&gt; entre_10_et_20 = lambda x: True if (x &gt; 10 and x &lt; 20) else False                     \n&gt;&gt;&gt; entre_10_et_20(5)\nFalse\n</code></pre> </p>"},{"location":"langages-et-programmation/5-fonctions/#portee-de-variables","title":"Port\u00e9e de variables","text":"<p>Cours</p> <p>La port\u00e9e d'une variable d\u00e9signe les endroits du programme o\u00f9 cette variable existe et peut \u00eatre utilis\u00e9e. En Python, la port\u00e9e d'une variable commence d\u00e8s sa premi\u00e8re affectation.</p> <p>Exemple : Les programmes suivants affichent un message d'erreur</p> Programme 1Programme 2 <p><pre><code>print(a)\na = 1\n</code></pre> Ce programme essaie d'afficher la variable <code>a</code> avant qu'elle ne soit d\u00e9finie, il affiche un message d'erreur :</p> <pre><code>&gt;&gt;&gt;\nTraceback (most recent call last):\nFile \"&lt;module1&gt;\", line 1, in &lt;module&gt;\nNameError: name 'a' is not defined\n</code></pre> <p><pre><code>a = a + 1\nprint(a)\n</code></pre> Ce programme essaie d'affecter \u00e0 la variable <code>a</code> une valeur calcul\u00e9e en utilisant <code>a</code> avant qu'elle ne soit d\u00e9finie, il affiche un message d'erreur :</p> <pre><code>&gt;&gt;&gt;\nTraceback (most recent call last):\nFile \"&lt;module1&gt;\", line 1, in &lt;module&gt;\nNameError: name 'a' is not defined\n</code></pre>"},{"location":"langages-et-programmation/5-fonctions/#variables-locales","title":"Variables locales","text":"<p>Cours</p> <p>Une variable d\u00e9finie \u00e0 l'int\u00e9rieur d'une fonction est appel\u00e9e variable locale. Elle ne peut \u00eatre utilis\u00e9e que localement c'est-\u00e0-dire qu'\u00e0 l'int\u00e9rieur de la fonction qui l'a d\u00e9finie. </p> <p>Tenter d'utiliser une variable locale depuis l'ext\u00e9rieur de la fonction qui l'a d\u00e9finie provoquera une erreur. </p> <p>Exemple : </p> <p><pre><code>def affiche_a():\n    a = 1\n    print(f'valeur de a dans affiche_a : {a}')\n\naffiche_a()\nprint(f'valeur de a dans le programme : {a}')\n</code></pre> La variable <code>a</code> elle est locale \u00e0 <code>affiche_a</code>, le programme suivant affiche un message d'erreur :</p> <pre><code>&gt;&gt;&gt;\nTraceback (most recent call last):\n  File \"&lt;module1&gt;\", line 6, in &lt;module&gt;\nNameError: name 'a' is not defined\n</code></pre>"},{"location":"langages-et-programmation/5-fonctions/#parametres-passes-par-valeur","title":"Param\u00e8tres pass\u00e9s par valeur","text":"<p>Dans les exemples pr\u00e9c\u00e9dents (<code>est_premier(13</code>), etc.), les arguments utilis\u00e9s en appelant les fonctions \u00e9taient des valeurs. </p> <p>Les arguments utilis\u00e9s dans l'appel d'une fonction peuvent aussi \u00eatre des variables ou m\u00eame des expressions. Les trois appels de fonctions suivants font le m\u00eame chose :</p> <pre><code>&gt;&gt;&gt; est_premier(13)\nTrue\n&gt;&gt;&gt; a = 13\n&gt;&gt;&gt; est_premier(a)\nTrue\n&gt;&gt;&gt; nombre = 6\n&gt;&gt;&gt; est_premier(2*nombre + 1)\nTrue\n</code></pre> <p>Quand un argument de fonction est une variable (ou une expression contenant une variable), par exemple dans le cas de <code>est_premier(a)</code>, c'est la valeur de cette variable (ou de cette expression) qui est pass\u00e9e au param\u00e8tre correspondant de la fonction. On dit que le param\u00e8tre est \u00ab pass\u00e9 par valeur \u00bb. Des modifications \u00e9ventuelles de ce param\u00e8tre dans la fonction ne modifient pas la valeur de la variable qui a servit d'argument \u00e0 la fonction. Et c'est le cas m\u00eame quand le nom de la variable est identique au nom du param\u00e8tre de la fonction, c'est seulement sa valeur qui est pass\u00e9e \u00e0 la fonction. </p> <p>Cours</p> <p>Une fonction ne peut pas modifier la valeur d'une variable pass\u00e9e en param\u00e8tre en dehors de son ex\u00e9cution.  Les param\u00e8tres sont pass\u00e9s par valeur.</p> <p>Exemple : <pre><code>def ajoute_1(a):\n    a = a + 1\n    print(f'valeur de a dans ajoute_1 : {a}')\n\na = 1\najoute_1(a)\nprint(f'valeur de a dans le programme : {a}')\n</code></pre></p> <p>La valeur de a est modifi\u00e9e en <code>2</code> \u00e0 l'int\u00e9rieur de la fonction <code>ajoute_1</code> pendant son ex\u00e9cution, mais pas dans le programme o\u00f9 elle garde sa valeur initiale de  <code>1</code>.</p> <p><pre><code>&gt;&gt;&gt; \nvaleur de a dans ajoute_1 : 2\nvaleur de a dans le programme : 1\n</code></pre> </p>"},{"location":"langages-et-programmation/5-fonctions/#variables-globales","title":"Variables globales","text":"<p>Sauf exception il est pr\u00e9f\u00e9rable d'utiliser uniquement des variables locales pour faciliter la compr\u00e9hension des programmes et r\u00e9duire l'utilisation de m\u00e9moire inutile, mais dans certains cas leur port\u00e9e n'est plus suffisante.</p> <p>Cours</p> <p>Une variable d\u00e9finie en dehors de toute fonction est appel\u00e9e variable globale. Elle est utilisable \u00e0 travers l'ensemble du programme. </p> <p>Elle peut \u00eatre affich\u00e9e par une fonction :</p> <pre><code>def affiche_a():\n    print(f'valeur de a dans affiche_a : {a}')       \n\na = 1\naffiche_a()\n</code></pre> <p>Mais ne peut pas \u00eatre modifi\u00e9e. </p> <p><pre><code>def affiche_a():\n    a += 1\n    print(f'valeur de a dans affiche_a : {a}')\n\na = 1\naffiche_a()\n</code></pre> Ce programme affiche un message d'erreur  : <pre><code>&gt;&gt;&gt;\nTraceback (most recent call last):\n  File \"&lt;module1&gt;\", line 6, in &lt;module&gt;\n  File \"&lt;module1&gt;\", line 2, in affiche_a\nUnboundLocalError: local variable 'a' referenced before assignment\n</code></pre></p> <p>On peut n\u00e9anmoins essayer de lui assigner une nouvelle valeur :</p> <pre><code>def affiche_a():\n    a = 2\n    print(f'valeur de a dans affiche_a : {a}')\n\na = 1\naffiche_a()\nprint(f'valeur de a dans le programme : {a}')\n</code></pre> <p>Mais dans ce cas, Python part du principe que <code>a</code> est locale \u00e0 la fonction, et non plus une variable globale. L'instruction <code>a = 2</code> a cr\u00e9\u00e9 un nouvelle variable locale \u00e0 la fonction, la variable globale n'a pas chang\u00e9 :</p> <pre><code>&gt;&gt;&gt;\nvaleur de a dans affiche_a : 2\nvaleur de a dans le programme : 1\n</code></pre> <p>Dans certaines situations, il serait utile de pouvoir modifier la valeur d'une variable globale dans une fonction et que cette nouvelle valeur soit gard\u00e9e dans le reste du programme. Pour cela, il faut utiliser le mot clef <code>global</code> devant le nom d'une variable globale utilis\u00e9e localement afin d'indiquer qu'il faut modifier la valeur de la variable globale et non pas cr\u00e9er une variable locale de m\u00eame nom :</p> <p><pre><code>def affiche_a():\n    global a\n    a = 2\n    print(f'valeur de a dans affiche_a : {a}')\n\na = 1\naffiche_a()\nprint(f'valeur de a dans le programme : {a}')\n</code></pre> La variable <code>a</code> a \u00e9t\u00e9 modifi\u00e9e dans la fonction et que sa nouvelle valeur est gard\u00e9e dans le reste du programme : <pre><code>&gt;&gt;&gt;\nvaleur de a dans affiche_a : 2\nvaleur de a dans le programme : 2\n</code></pre></p> <p>Cours</p> <p>Une variable globale est accessible uniquement en lecture \u00e0 l'int\u00e9rieur des fonctions du programme. Pour la modifier il faut utiliser le mot-cl\u00e9 <code>global</code>.</p>"},{"location":"langages-et-programmation/5-fonctions/#fonction-recursive","title":"Fonction r\u00e9cursive","text":"<p>Une fonction peut \u00eatre appel\u00e9e n'importe o\u00f9 dans un programme (apr\u00e8s sa d\u00e9finition), y compris par elle-m\u00eame.</p> <p>Cours</p> <p>Une fonction r\u00e9cursive est une fonction qui peut s'appeler elle-m\u00eame au cours de son ex\u00e9cution.</p> <p>Prenons pour exemple une fonction qui renvoie le produit de tous les nombres entiers entre 1 et \\(n\\). Ce produit est appel\u00e9 factorielle de \\(n\\) et not\u00e9 \\(n!\\).</p> <p>\\(n!  =  1  \\times 2  \\times 3  \\times 4  \\times ...  \\times (n-1)  \\times n\\) </p> <p>Une simple boucle <code>for</code> permet de multiplier tous les entiers allant de <code>1</code> \u00e0 <code>n</code> :</p> <pre><code>def factorielle(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\n</code></pre> <p>Mais il est aussi possible de remarquer que \\(n!  =  (n - 1)!  \\times n\\) et que \\(1!  =  1\\), ce qui permet d'\u00e9crire un programme r\u00e9cursif suivant : </p> <pre><code>def factorielle_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return  factorielle_recursive(n-1) * n         # le else est facultatif\n</code></pre> <p> Il est imp\u00e9ratif de pr\u00e9voir une condition d'arr\u00eat \u00e0 la r\u00e9cursivit\u00e9, sinon le programme ne s'arr\u00eate jamais ! On doit toujours tester en premier la condition d'arr\u00eat, et ensuite, si la condition n'est pas v\u00e9rifi\u00e9e, lancer un appel r\u00e9cursif.</p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire une fonction r\u00e9cursive <code>compte_a_rebours(n)</code> qui affiche les nombres entiers \u00e0 rebours allant de <code>n</code> \u00e0 <code>0</code>.</p> R\u00e9ponse <p><pre><code>def compte_a_rebours(n):\n    if n &lt; 0:\n        pass\n    else:\n        print(n)\n        compte_a_rebours(n-1)\n</code></pre> ou plus simplement :  </p> <pre><code>def compte_a_rebours(n):\n    print(n)\n    if n &gt; 0:\n        compte_a_rebours(n-1)\n</code></pre> <ol> <li> <p>Nous avons d\u00e9j\u00e0 utilis\u00e9 une fonction avec un param\u00e8tre facultatif par mot-cl\u00e9 avec <code>end=''</code> dans <code>print('hello', end='')</code>.\u00a0\u21a9</p> </li> <li> <p>La fonction <code>min()</code> existe dans Python.\u00a0\u21a9</p> </li> <li> <p>Une fonction qui renvoie <code>None</code> (ou qui ne renvoie rien dans d'autres langages) est appel\u00e9e une proc\u00e9dure.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/6-modules-bibliotheques/","title":"Modules et biblioth\u00e8ques","text":""},{"location":"langages-et-programmation/6-modules-bibliotheques/#modules-et-bibliotheques","title":"Modules et biblioth\u00e8ques","text":"<p>Nous avons vu dans l'exercice pr\u00e9c\u00e9dent comment \u00e9crire un programme qui affiche la d\u00e9composition d\u2019un nombre en facteurs premiers en utilisant la fonction <code>est_premier</code>. </p> <pre><code>def est_premier(nombre):\n    for div in range(2, nombre):\n        if nombre % div == 0:\n            return False\n    return True\n\ndef main():\n    nombre = int(input('Entrez un nombre '))\n    premier = 2 # on commence par le plus petit nombre premier : 2\n    while nombre &gt; 1:\n        if nombre % premier == 0:      # si premier divise nombre\n            print(premier, end=\" \")                 # alors on l'affiche\n            nombre = nombre // premier     # et on recommence apr\u00e8s avoir divis\u00e9 nombre par premier\n        else:                          # sinon, premier n'est pas un diviseur\n            premier += 1                 # on cherche le nombre premier suivant\n            while not(est_premier(premier)):\n                premier += 1\n\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Rappel</p> <p>La fonction <code>est_premier</code> doit \u00eatre est \u00e9crite au d\u00e9but du programme, elle doit \u00eatre d\u00e9finie avant d'\u00eatre appel\u00e9e.</p> <p>Ici le programme est \u00e9crit dans le m\u00eame fichier Python que la fonction <code>est_premier</code>. Mais que se passerait-il si un programme \u00e9crit dans un autre fichier Python appelle cette m\u00eame fonction ? </p> <p>Ecrivons un nouveau programme Python qui appelle <code>est_premier</code> :</p> <pre><code>n = int(input('Entrez un nombre'))\nprint(est_premier(n)) \n</code></pre> <p>Il affiche une erreur  :  <pre><code>Traceback (most recent call last):\n  File \"&lt;module2&gt;\", line 2, in &lt;module&gt;\nNameError: name 'est_premier' is not defined\n</code></pre></p> <p>Alors comment faire pour appeler <code>est_premier</code> depuis ce nouveau programme sans la r\u00e9\u00e9crire ? Il faut cr\u00e9er un module.</p> <p>Enregistrons la fonction <code>est_premier</code> dans un fichier qu\u2019on appelle \u00ab mesfonctions.py \u00bb.  Le fichier \u00ab mesfonctions.py \u00bb doit \u00eatre enregistr\u00e9 dans le m\u00eame r\u00e9pertoire que le nouveau programme. Nous avons cr\u00e9\u00e9 le module <code>mesfonctions</code>.</p> <p>Testons \u00e0 nouveau le programme principal. Toujours la m\u00eame erreur. Le module <code>mesfonctions</code> doit d\u2019abord \u00eatre import\u00e9 pour utiliser les fonctions qu\u2019il contient.</p> <p>Cours</p> <p>Un module est un programme Python regroupant des fonctions et des constantes (des variables dont la valeur ne change pas<sup>4</sup>) ayant un rapport entre elles.  </p> <p>Un module doit \u00eatre import\u00e9 dans un programme avant de pouvoir utiliser ses fonctions et ses constantes.</p> <p>Une biblioth\u00e8que (ou package en anglais) regroupe des fonctions, des constantes et des modules.</p>"},{"location":"langages-et-programmation/6-modules-bibliotheques/#import","title":"<code>import</code>","text":"<p>Pour importer un module dans un programme, il faut utiliser l'instruction <code>import</code> en d\u00e9but de programme :</p> <pre><code>import mesfonctions\n</code></pre> <p>Pour appeler une fonction ou utiliser une constante d'un module il faut \u00e9crire le nom du module suivi d'un point \u00ab . \u00bb puis du nom de la fonction ou de la constante.  </p> <pre><code>import mesfonctions\n\nn = int(input('Entrez un nombre '))\nprint(mesfonctions.est_premier(n)) \n</code></pre> <p> Prendre soin d\u2019enregistrer ce programme dans le m\u00eame r\u00e9pertoire que le fichier \u00ab mesfonctions.py \u00bb.</p> <p>Il est aussi possible donner un alias \u00e0 un module pour le renommer avec un nom plus simple \u00e0 \u00e9crire, par exemple pour utiliser <code>mf</code> au lieu de <code>mesfonctions</code> :</p> <pre><code>import  mesfonctions  as mf\n\nn = int(input('Entrez un nombre '))\nprint(mf.est_premier(n)) \n</code></pre> <p>Cours</p> Sans aliasAvec alias <p>Pour importer un module <code>nom_module</code>, il faut \u00e9crire en d\u00e9but de programme l\u2019instruction : </p> <p><code>import nom_module</code> </p> <p>puis pour utiliser une fonction <code>nom_fonction()</code> de ce module  :</p> <p><code>nom_module.nom_fonction()</code></p> <p>Pour importer un module <code>nom_module</code> en lui donnant un alias <code>nom_alias</code>, il faut \u00e9crire en d\u00e9but de programme l\u2019instruction :</p> <p><code>import nom_module as nom_alias</code> </p> <p>puis pour utiliser une fonction <code>nom_fonction()</code> de ce module  :</p> <p><code>nom_alias_module.nom_fonction()</code></p> <p>La fonction <code>help()</code> permet de savoir ce que contient un module :</p> <pre><code>&gt;&gt;&gt; help(mesfonctions)\nHelp on module mesfonctions:\n\u2026\n</code></pre>"},{"location":"langages-et-programmation/6-modules-bibliotheques/#from-import","title":"<code>from \u2026 import \u2026</code>","text":"<p>Il existe une autre m\u00e9thode pour importer des fonctions ou constantes depuis un module. Admettons que le module <code>mesfonctions</code> contienne des dizaines de fonctions, mais que nous ayons uniquement besoin dans notre programme de la fonction <code>est_premier</code>, dans ce cas il est pr\u00e9f\u00e9rable d'importer uniquement cette fonction plut\u00f4t que tout le module en utilisant l'instruction <code>`from mesfonctions import est_premier</code>. </p> <pre><code>from  mesfonctions import est_premier\n\nn = int(input('Entrez un nombre '))\nprint(est_premier(n))\n</code></pre> <p>\u00c0 noter : </p> <p>Ici on ne met pas le pr\u00e9fixe \u00ab <code>mesfonctions.</code> \u00bb  devant le nom de la fonction <code>est_premier</code>. </p> <p>On peut aussi donner un alias \u00e0 une fonction : <code>from mesfonctions import est_premier as estprems</code> et utiliser ensuite la fonction <code>estprems()</code>.</p> <p>Cours</p> Sans aliasAvec alias <p>Pour importer une fonction <code>nom_fonction()</code> depuis le module <code>nom_module</code>, il faut \u00e9crire en d\u00e9but de programme l\u2019instruction :</p> <p><code>from nom_module import nom_fonction</code> </p> <p>puis pour utiliser cette fonction :</p> <p><code>nom_fonction()</code></p> <p>Pour importer une fonction <code>nom_fonction()</code> en lui donnant un alias <code>nom_alias</code> depuis le module <code>nom_module</code>, il faut \u00e9crire en d\u00e9but de programme l\u2019instruction :</p> <p><code>from nom_module import nom_fonction as nom_alias</code> </p> <p>puis pour utiliser cette fonction :</p> <p><code>nom_alias()</code></p> <p>Il est aussi possible d'importer plusieurs fonctions d\u2019un m\u00eame module s\u00e9par\u00e9es par des virgules :</p> <p><pre><code>from mesfonctions import est_premier, une_autre_fonction\n</code></pre> voire m\u00eame toutes les fonctions d'un module en tapant \u00ab <code>*</code> \u00bb \u00e0 la place du nom de la fonction \u00e0 importer.</p> <pre><code>from mesfonctions import *\n</code></pre> <p>Mais cette derni\u00e8re utilisation est vivement d\u00e9conseill\u00e9e, hormis dans des cas tr\u00e8s particuliers par exemple des programmes tr\u00e8s courts, car il peut y avoir des conflits entre des fonctions qui ont le m\u00eame nom. Pour s\u2019en convaincre, imaginons un programme \u00e9crit en utilisant l'instruction <code>pow(1, 2, 3)</code> qui fonctionnerait parfaitement jusqu'\u00e0 ce qu'une modification n\u00e9cessitant le module <code>math</code> ajoute l'instruction <code>from math import *</code> en d\u00e9but de programme et g\u00e9n\u00e8re une erreur inattendue <sup>1</sup> l\u00e0 o\u00f9 il n'y en avait pas.</p> <p>Python offre des centaines de modules avec des milliers de fonctions d\u00e9j\u00e0 programm\u00e9es. Il y a diff\u00e9rents types de modules :</p> <ul> <li>ceux que l\u2019on peut faire soi-m\u00eame (comme <code>mesfonctions</code>).</li> <li>ceux qui sont inclus dans la biblioth\u00e8que standard de Python comme <code>random</code> ou <code>math</code>,</li> <li>ceux que l\u2019on peut rajouter en les installant s\u00e9par\u00e9ment comme <code>numpy</code> ou <code>matplotlib</code>.</li> </ul>"},{"location":"langages-et-programmation/6-modules-bibliotheques/#de-lutilite-de-la-fonction-main","title":"De l'utilit\u00e9 de la fonction 'main()'","text":"<p>On a vu auparavant la d\u00e9finition de la fonction <code>main()</code> contenant le programme principal, suivi du bout de code suivant :</p> <pre><code>if __name__ == '__main__':\n    main()\n</code></pre> <p>Cette instruction conditionnelle v\u00e9rifie si une variable appel\u00e9e <code>__name__</code> est \u00e9gale \u00e0 <code>'__main__'</code> et dans ce cas ex\u00e9cute la fonction <code>main()</code>. </p> <p>L\u2019interpr\u00e9teur Python d\u00e9finit la variable <code>__name__</code> selon la mani\u00e8re dont le code est ex\u00e9cut\u00e9 :</p> <ul> <li> <p>directement en tant que script, dans ce cas Python affecte <code>'__main__'</code> \u00e0  <code>__name__</code>, l'instruction conditionnelle est v\u00e9rifi\u00e9e et la fonction <code>main()</code> est appel\u00e9e ; ou alors </p> </li> <li> <p>en important le code dans un autre script et dans ce cas la fonction <code>main()</code> n\u2019est pas appel\u00e9e.</p> </li> </ul> <p>En bref, la variable <code>__name__</code> d\u00e9termine si le fichier est ex\u00e9cut\u00e9 directement ou s'il a \u00e9t\u00e9 import\u00e9.<sup>2</sup> </p>"},{"location":"langages-et-programmation/6-modules-bibliotheques/#le-module-math","title":"Le module math","text":"<p>Le module <code>math</code> permet d\u2019avoir acc\u00e8s aux fonctions math\u00e9matiques, par exemple les fonctions cosinus (<code>cos</code>), sinus (<code>sin</code>), racine carr\u00e9e (<code>sqrt</code>), le nombre \\(\\pi\\) (<code>pi</code>), la partie enti\u00e8re (<code>floor</code>)<sup>3</sup>, etc.</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.cos(math.pi)             # cosinus d'un angle en radian\n-1.0\n&gt;&gt;&gt; math.sqrt(25)            # racine carr\u00e9e\n5.0\n</code></pre>"},{"location":"langages-et-programmation/6-modules-bibliotheques/#le-module-random","title":"Le module random","text":"<p>Le module <code>random</code> permet d\u2019utiliser des fonctions g\u00e9n\u00e9rant des nombres al\u00e9atoires. Deux fonctions tr\u00e8s utiles sont :  </p> <ul> <li><code>random()</code> qui renvoie un nombre al\u00e9atoire entre 0 et 1, et</li> <li><code>randint(a, b)</code> qui renvoie au hasard un nombre entier compris entre <code>a</code> et <code>b</code> inclus.</li> </ul> <pre><code>&gt;&gt;&gt; from random import random, randint\n&gt;&gt;&gt; random()\n0.34461947461259612\n&gt;&gt;&gt; randint(1, 2)\n2\n</code></pre>"},{"location":"langages-et-programmation/6-modules-bibliotheques/#le-module-pyplot","title":"Le module pyplot","text":"<p>La biblioth\u00e8que <code>mathplotlib</code> contient le module <code>pyplot</code> (utilis\u00e9 pour tracer des courbes). Pour importer ce module, l\u2019utilisation d\u2019un alias est particuli\u00e8rement utile dans ce cas. </p> <pre><code>import matplolib.pyplot as plt\n</code></pre> <p><code>pyplot</code> permet d'afficher des donn\u00e9es sous de multiples formes. Par exemple pour afficher un point de coordonn\u00e9es (2, 4 ) sous forme d'une croix verte dans un rep\u00e8re :</p> <pre><code>plt.plot(2, 4, 'g+')\nplt.show()  \n</code></pre>"},{"location":"langages-et-programmation/6-modules-bibliotheques/#dautres-modules","title":"D\u2019autres modules","text":"<p>Il y en a beaucoup d\u2019autres, tant dans la nature (https://github.com/search?q=python+module) que dans la biblioth\u00e8que standard (http://docs.python.org/3/py-modindex.html),</p> module Description <code>numpy</code> Permet de faire du calcul scientifique. <code>time</code> Fonctions permettant de travailler avec le temps. <code>turtle</code> Fonctions de dessin. <code>doctest</code> Execute des tests \u00e9crits dans la docstring d\u2019une fonction. <p>La fonction <code>dir</code> permet d\u2019explorer le contenu d\u2019un module :</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; dir(math)\n['__doc__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n 'acos',\n 'acosh',\n 'asin',\n\u2026\n</code></pre> <p>En plus de la documentation en ligne, la fonction <code>help</code> donne les sp\u00e9cifications d\u2019une fonction.</p> <pre><code>&gt;&gt;&gt; help(math.cos)\nHelp on built-in function cos in module math:\n\ncos(...)\n    cos(x)\n\n    Return the cosine of x (measured in radians).\n</code></pre> <p>Exercice corrig\u00e9</p> <p>R\u00e9aliser le dessins suivant (dix carr\u00e9s rouges de 50 pixels de cot\u00e9), \u00e0 l'aide du module turtle. []</p> R\u00e9ponse <pre><code>import turtle\n\ndef carre(taille, couleur):\n    turtle.pendown()\n    turtle.color(couleur)\n    for _ in range(4):\n        turtle.forward(taille)\n        turtle.right(90)\n    turtle.penup()\n\nturtle.penup()\nturtle.goto(-300,0)\nfor c in range(10):\n    carre(50,'red')\n    turtle.forward(60)\n</code></pre> <ol> <li> <p>La fonction standard Python <code>pow()</code> prend trois param\u00e8tres alors que la fonction <code>pow()</code> du module <code>math</code> n'en a que deux ! L'import de <code>from math import *</code> a import\u00e9 la seconde fonction probablement \u00e0 l'insu du programmeur.\u00a0\u21a9</p> </li> <li> <p>On peut facilement se convaincre de l\u2019utilit\u00e9 de la fonction <code>main()</code> en \u00e9crivant le programme qui affiche la d\u00e9composition d\u2019un nombre en facteurs premiers sans <code>main()</code> dans le fichier \u00ab mesfonctions.py \u00bb : <pre><code>def est_premier(nombre):\n    for div in range(2, nombre):\n        if nombre % div == 0:\n            return False\n    return True\n\nnombre = int(input('Entrez un nombre '))\npremier = 2 # on commence par le plus petit nombre premier : 2\nwhile nombre &gt; 1:\n        if nombre % premier == 0:      # si premier divise nombre\n            print(premier, end=\" \")                 # alors on l'affiche\n            nombre = nombre // premier     # et on recommence apr\u00e8s avoir divis\u00e9 nombre par premier\n        else:                          # sinon, premier n'est pas un diviseur\n            premier += 1                 # on cherche le nombre premier suivant\n            while not(est_premier(premier)):\n                premier += 1\n</code></pre> Lorsque pour utiliser la fonction <code>est_premier</code> le module est import\u00e9 dans un autre programme avec <code>import  mesfonctions</code>, toute la suite du programme de la d\u00e9composition d\u2019un nombre en facteurs premiers est ex\u00e9cut\u00e9 automatiquement.\u00a0\u21a9</p> </li> <li> <p>Nous avons d\u00e9j\u00e0 vu la fonction <code>int()</code> qui semble similaire \u00e0 <code>math.floor()</code>, mais attention aux diff\u00e9rences entre les deux.</p> Avec un <code>float</code> positif <pre><code>&gt;&gt;&gt; math.floor(12.5)\n12.0\n&gt;&gt;&gt; int(12.5)\n12\n</code></pre> Avec un <code>float</code> n\u00e9gatif <p><pre><code>&gt;&gt;&gt; math.floor(-12.5)\n-13.0\n&gt;&gt;&gt; int(-12.5)\n-12\n</code></pre> \u21a9</p> </li> <li> <p>Par exemple la valeur de \\(\\pi\\) dans le module <code>math</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/","title":"Mise au point des programmes et gestion des bugs","text":"<p>Comment s\u2019assurer qu\u2019un programme fasse ce qu\u2019il est cens\u00e9 faire ? Qu\u2019il ne contient pas de bugs ?  Ces questions que chacun se pose quand il \u00e9crit un programme peuvent devenir extr\u00eamement cruciales et compliqu\u00e9es quand certains programmes informatiques contiennent des millions de lignes de code, voire des milliards (Google)<sup>1</sup> ou avoir des d\u00e9fauts de fonctionnements aux cons\u00e9quences d\u00e9sastreuses  (avionique, nucl\u00e9aire, m\u00e9dical, etc.). Des solutions existent pour essayer de limiter ces effets n\u00e9fastes.</p> <p>L\u2019utilisation combin\u00e9e de sp\u00e9cifications, d'assertions, de documentations des programmes et de jeux de tests permettent de limiter (mais pas de garantir ! <sup>2</sup> ) la pr\u00e9sence de bugs dans les programmes.</p>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#bugs-ou-bogues-et-exceptions","title":"Bugs (ou bogues) et exceptions","text":"<p>Il existe de nombreuses causes qui peuvent \u00eatre \u00e0 l\u2019origine de bugs dans un programme : oubli d\u2019un cas<sup>3</sup>, typo, d\u00e9passement de capacit\u00e9 m\u00e9moire<sup>4</sup>, mauvaise communication avec les utilisateurs ou entre programmeurs, etc.</p> <p>Cours</p> <p>Un bug (ou bogue) est une erreur dans un programme \u00e0 l\u2019origine d\u2019un dysfonctionnement. </p> <p>Un bug peut conduire \u00e0 un r\u00e9sultat qui n\u2019est pas celui attendu, par exemple si <code>est_premier(5)</code> renvoyait False, voire m\u00eame dans certains cas \u00e0 une exception (mais ce n\u2019est pas toujours le cas). </p> <p>Cours</p> <p>Une exception est une erreur qui se produit pendant l'ex\u00e9cution du programme. Lorsqu'une exception se produit (on dit que l\u2019exception est 'lev\u00e9e'), l'ex\u00e9cution normale du programme est interrompue et l'exception est trait\u00e9e.</p> <pre><code>num1, num2 = 7, 0\nprint(num1/num2)\n&gt;&gt;&gt; \nZeroDivisionError : division by zero\n</code></pre> <p>Une bonne fa\u00e7on de g\u00e9rer les exceptions est de comprendre les diff\u00e9rents types d'erreurs qui surviennent et pourquoi elles se produisent. Soyons attentifs aux messages d\u2019erreur que nous affiche l\u2019interpr\u00e9teur, ils sont d\u2019une grande utilit\u00e9<sup>5</sup>. En voici certains parmi les plus courants :</p> <ul> <li> <p><code>SyntaxError</code> : Une ligne de code non valide emp\u00eache le programme de s\u2019ex\u00e9cuter. <pre><code>&gt;&gt;&gt; print(\"Hello World)\n  File \"&lt;interactive input&gt;\", line 1\n    print(\"Hello World)\n          ^\nSyntaxError: incomplete input\n</code></pre></p> </li> <li> <p><code>IndentationError</code> : Une mauvaise indentation ne permet pas de d\u00e9finir les blocs de code correctement<sup>8</sup>.</p> </li> </ul> <pre><code>for i in range(10):\nprint(i)\nIndentationError: expected an indented block after 'for' statement on line 1\n</code></pre> <ul> <li> <p><code>TypeError</code> : Une op\u00e9ration utilise des types de donn\u00e9es incompatibles. <pre><code>&gt;&gt;&gt; \"abc\" + 2\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre></p> </li> <li> <p><code>ValueError</code> : Une fonction est appel\u00e9e avec une valeur d'argument non autoris\u00e9e.</p> </li> </ul> <pre><code>&gt;&gt;&gt; int('abc')\nValueError: invalid literal for int() with base 10: 'abc'\n</code></pre> <p>Pour corriger les bugs et exceptions in\u00e9vitables lorsqu\u2019on \u00e9crit un programme, le d\u00e9bogueur est un outil tr\u00e8s utile.</p> <p>Cours</p> <p>Le d\u00e9bogueur permet d\u2019effectuer l\u2019ex\u00e9cution ligne par ligne en observant l\u2019\u00e9volution du programme et les valeurs des variables.</p> <p>Pour utiliser le d\u00e9bogueur de PyScripter :</p> <ol> <li>Cr\u00e9er un point d\u2019arr\u00eat sur une ligne (clic sur le num\u00e9ro de la ligne), ou plusieurs.</li> <li>Lancer le d\u00e9bogage (      )  ce qui ex\u00e9cute le script jusqu\u2019au point d\u2019arr\u00eat</li> <li>Ex\u00e9cuter le script pas \u00e0 pas tout en inspectant l\u2019\u00e9volution des variables dans les onglets Variables ou Watches (surveillances). Pour ajouter une variable \u00e0 surveiller, cliquer droit dans la fen\u00eatre Watches et ajouter un nom de la variable ou une expression.</li> </ol>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#commentaires-noms-de-variables-et-de-fonctions","title":"Commentaires, noms de variables et de fonctions","text":"<p>Il est difficile de dire ce que fait cette fonction au premier coup d'oeil :</p> <pre><code>def f(x):\n    a = 0\n    for i in range(1, x):\n        if x % i == 0:\n            a = a + i\n    return x == a\n</code></pre> <p>PEP 8</p> <p>Ecrire les noms tout en minuscule avec des mots s\u00e9par\u00e9s par des blancs soulign\u00e9s (<code>_</code>)  par exemple <code>nom_de variable</code> (snake case) plut\u00f4t que  <code>NomDeVariable</code> (camel case)</p> <p>C\u2019est plus d\u00e9j\u00e0 plus lisible avec des noms de fonction et variable qui ont un sens plut\u00f4t que r\u00e9duits \u00e0 une lettre.</p> <pre><code>def parfait(nombre):\n    somme_diviseurs = 0\n    for i in range(1, nombre):\n        if nombre % i == 0:\n            somme_diviseurs = somme_diviseurs + i\n    return nombre == somme_diviseurs \n</code></pre> <p>et encore plus lisible avec des commentaires :</p> <pre><code>def parfait(nombre):\n    somme_diviseurs = 0\n    # It\u00e9rer sur tous les entiers i compris entre 1 et nombre - 1\n    for i in range(1, nombre):\n        # Si i est un diviseur de nombre on l'ajoute \u00e0 somme_diviseur\n        if nombre % i == 0:\n            somme_diviseurs = somme_diviseurs + i\n    # Si nombre est \u00e9gal \u00e0 la somme de ses diviseurs, c'est un nombre parfait\n    return nombre == somme_diviseurs\n</code></pre> <p>Cours</p> <p>PEP 8</p> <p>Limiter la longueur des lignes \u00e0 79 ou 80 caract\u00e8res.</p> <p>\u00c9crire un beau code Python implique d'adopter certaines conventions et bonnes pratiques pour le rendre clair, lisible, maintenable et compr\u00e9hensible pour vous-m\u00eame et pour les autres d\u00e9veloppeurs<sup>6</sup> :</p> <ol> <li> <p>Choisir des noms de variables et de fonctions significatifs et \u00e9viter les noms g\u00e9n\u00e9riques comme \"a\", \"b\", \"x\", etc. qui ne donnent pas d'indication sur leur contenu. Pr\u00e9f\u00e9rer des noms descriptifs comme \"somme_diviseurs\" plut\u00f4t que \"sd\".</p> </li> <li> <p>Commenter le code pour expliquer les parties importantes, les d\u00e9cisions de conception, les algorithmes, etc. Les commentaires doivent \u00eatre clairs, concis et utiles. N'ajoutez pas de commentaires \u00e9vidents qui ne font que r\u00e9p\u00e9ter le code.</p> </li> </ol> <p><pre><code># Commentaire sur un bloc\ninstruction           # Commentaire sur une instruction particuli\u00e8re\n</code></pre> 3. \u00c9viter les r\u00e9p\u00e9tition de code et diviser les programmes en fonctions logiques, plus modulaires, plus faciles \u00e0 comprendre et \u00e0 d\u00e9boguer.</p>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#specifications-de-fonctions","title":"Sp\u00e9cifications de fonctions","text":"<p>Cours</p> <p>La sp\u00e9cification (ou prototype) d\u2019une fonction est un mode d'emploi \u00e0 l\u2019attention des utilisateurs d\u2019une fonction expliquant clairement :</p> <ul> <li> <p>ce que fait la fonction,</p> </li> <li> <p>les param\u00e8tres qu\u2019elle accepte,</p> </li> <li> <p>les valeurs qu\u2019elle renvoie.</p> </li> </ul> <p>En python, la sp\u00e9cification est r\u00e9sum\u00e9e dans la \u00ab docstring \u00bb, un commentaire au d\u00e9but du corps de la fonction entre tripe guillemets (ou triple apostrophes) :</p> <p>Par convention, les <code>\"\"\"</code> de fin sont seuls sur la derni\u00e8re ligne.    </p> <pre><code>def nom_dela_fonction (parametres):\n\"\"\" sp\u00e9cification de la fonction \u00e9crit entre triple guillemets comprenant :\n- ce que fait la fonction,\n- les param\u00e8tres qu\u2019elle accepte,\n- les valeurs qu\u2019elle renvoie. \n\"\"\"  \n</code></pre> <p>Si l\u2019id\u00e9e g\u00e9n\u00e9rale est toujours la m\u00eame, aucun format n'est impos\u00e9 m\u00eame si certaines conventions sont donn\u00e9es dans la PEP 257. En pratique, il existe diff\u00e9rentes habitudes d'\u00e9crire les docstrings de fonctions et il est important de rester consistant \u00e0 travers un m\u00eame programme pour am\u00e9liorer la lisibilit\u00e9 du code. </p> <p>Par exemple, la fonction pr\u00e9c\u00e9dente <code>parfait(nombre)</code> pourrait se pr\u00e9senter sous la forme :</p> <pre><code>def parfait(nombre):\n    \"\"\" (int) -&gt; bool\n    Renvoie True si nombre est parfait, False sinon\n    \"\"\"\n\n    somme_diviseurs = 0\n    # It\u00e9rer sur tous les entiers i compris entre 1 et nombre - 1\n    for i in range(1, nombre):\n        # Si i est un diviseur de nombre on l'ajoute \u00e0 somme_diviseur\n        if nombre % i == 0:\n            somme_diviseurs = somme_diviseurs + i\n    # Si nombre est egal \u00e0 la somme de ses diviseurs, c'est un nombre parfait\n    return nombre == somme_diviseurs\n</code></pre> <p>ou encore :</p> <pre><code>def parfait(nombre):\n    \"\"\" Renvoie True si nombre est parfait, False sinon\n    Parameters:\n        nombre (int): un nombre entier.\n    Returns:\n        bool: True si nombre est parfait, False sinon.\n    \"\"\"\n</code></pre> <p>ou plus simplement sur une seule ligne (dans ce cas les <code>\"\"\"</code>  sont \u00e9crits sur la m\u00eame ligne):</p> <pre><code>def parfait(nombre):\n    \"\"\" Renvoie True si nombre (int) est parfait, False sinon \"\"\"\n</code></pre> <p>La fonction <code>help</code> affiche la docstring d\u2019une fonction :</p> <pre><code>&gt;&gt;&gt; help(est_premier)\nHelp on function parfait in module __main__:\n\nest_premier(nombre)\n    (int) -&gt; bool\n    Renvoie True si un nombre est parfait, False sinon\n</code></pre> <p> Ne pas confondre la sp\u00e9cification encadr\u00e9e par <code>\"\"\"</code> avec les commentaires qui commencent par <code>#</code>. D\u2019ailleurs il est possible d'ajouter des commentaires commen\u00e7ant par <code>#</code>  dans une docstring qui ne seront pas affich\u00e9s par <code>help</code>. La sp\u00e9cification sera lue par le programmeur qui utilise la fonction, les commentaires par celui qui lira et modifiera le code de la fonction. </p> <p>Remarquer l'affichage dans la console ou dans la zone de programmation de l'IDE la sp\u00e9cification qui s\u2019affiche apr\u00e8s avoir saisi le nom de la fonction, par exemple <code>parfait(</code>. </p>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#preconditions-postconditions","title":"Pr\u00e9conditions, postconditions","text":"<p>Testons la fonction <code>parfait(nombre)</code> avec un exemple simple :</p> <p><pre><code>&gt;&gt;&gt; parfait(13)\nFalse\n</code></pre> Que se passe t\u2019il maintenant si un argument qui n\u2019est pas un entier est pass\u00e9 \u00e0 la fonction <code>parfait</code> ? </p> <pre><code>&gt;&gt;&gt; parfait(13.0)\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;module2&gt;\", line 8, in parfait\nTypeError: 'float' object cannot be interpreted as an integer\n</code></pre> <p><code>nombre</code> doit imp\u00e9ratif \u00eatre de type entier. C\u2019est une pr\u00e9condition de la fonction. Il est souvent recommand\u00e9 d'indiquer les pr\u00e9conditions dans la docstring de la fonction pour limiter les risques d'erreur.</p> <pre><code>def parfait(nombre):\n    \"\"\" (int) -&gt; bool\n    Precondition : nombre est de type int et positif\n    Fonction qui renvoie True si nombre est parfait, False sinon\n    \"\"\"\n</code></pre> <p>Cours</p> <p>Les pr\u00e9conditions sont des conditions qui doivent \u00eatre vraies avant l'ex\u00e9cution d'une fonction pour garantir que celle-ci fonctionne correctement. Si une pr\u00e9condition \u00e9choue, cela signifie que l'appel de la fonction n'\u00e9tait pas correct.</p> <p>Les postconditions sont des conditions qui doivent \u00eatre vraies apr\u00e8s l'ex\u00e9cution d'une fonction. Elles permettent de v\u00e9rifier si la fonction s'est ex\u00e9cut\u00e9e correctement et a donn\u00e9 les r\u00e9sultats attendus. </p> <p>Par exemple : - une pr\u00e9condition \u00e0 une fonction effectuant une division est de s\u2019assurer que le d\u00e9nominateur est non nul, </p> <ul> <li>une postcondition \u00e0 une fonction renvoyant la valeur absolue d\u2019un nombre est de v\u00e9rifier que la fonction renvoie une valeur positive.</li> </ul> <p>Les preconditions et postconditions peuvent \u00eatre indiqu\u00e9es dans la docstring ou v\u00e9rifi\u00e9es par des assertions.</p>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#variant-et-invariant-de-boucle","title":"Variant et invariant de boucle","text":"<p>Cours</p> <p>Un variant de boucle permet de s\u2019assurer qu\u2019une boucle se terminera.</p> <p>Mais il ne v\u00e9rifie pas qu\u2019un algorithme fournit la r\u00e9ponse attendue.</p> <p>Prenons un exemple. Une fonction de division euclidienne de deux entiers positifs <code>n</code> par <code>d</code> peut s\u2019\u00e9crire de la mani\u00e8re suivante :</p> <pre><code>def division(n, d) :\n    q, r = 0, n                   \n    while r &gt;= d:     \n        q = q + 1     \n        r = r \u2013 d     \n</code></pre> <p>A noter que <code>d &gt; 0</code> est une pr\u00e9condition qui doit \u00eatre v\u00e9rifi\u00e9e au d\u00e9but de la fonction. Si ce n'est pas cas et que <code>d</code> \u2264 0 alors la boucle ne se terminera jamais !</p> <p>Ici le variant de boucle est <code>r</code>. A chaque passage dans la boucle il diminue de <code>d</code> (d est positif) donc la condition <code>r &gt;= d</code> finira par ne plus \u00eatre v\u00e9rifi\u00e9e, la boucle se terminera.</p> <p>Cours</p> <p>Un invariant de boucle est une propri\u00e9t\u00e9 ou une expression : </p> <p>\u2013 qui est vraie avant d'entrer dans la boucle ; </p> <p>\u2013 qui reste vraie apr\u00e8s chaque it\u00e9ration de boucle ; </p> <p>\u2013 et qui, conjointement \u00e0 la condition d\u2019arr\u00eat, permet de montrer que le r\u00e9sultat attendu est bien le r\u00e9sultat calcul\u00e9.</p> <p>Ici l\u2019invariant de boucle est la propri\u00e9t\u00e9: <code>n == q * d + r</code>. Prenons en exemple <code>n = 13</code> et <code>d = 3</code> et observons les \u00e9tats successifs du programme au d\u00e9but de chaque instruction.  Au d\u00e9but de la ligne 2, les valeurs de <code>q</code> et <code>r</code> ne sont pas sp\u00e9cifi\u00e9es, donc la condition <code>r &gt;= d</code> ne peut \u00eatre \u00e9valu\u00e9e, la prochaine instruction \u00e0 ex\u00e9cuter est la ligne 3 :</p> <p><pre><code>(ligne)   q       r       r &gt;= d     (ligne suivante)     n == q * d + r\n=======================================================================\n  2       -        -         -             3                -      \n</code></pre> Au d\u00e9but de la ligne 3, <code>q</code> et <code>r</code> ont pris les valeurs <code>0</code> et <code>13</code>, la condition <code>r  &gt;=  d</code> est v\u00e9rifi\u00e9e, le programme entre dans la boucle et la prochaine instruction \u00e0 ex\u00e9cuter est la ligne 4. Compl\u00e9tons la table. <pre><code>(ligne)   q       r       r &gt;= d     (ligne suivante)     n == q * d + r\n=======================================================================\n  2       -        -         -             3                -      \n  3       0       13       True            4              VRAI (entr\u00e9e dans la boucle)   \n</code></pre></p> <p>Au d\u00e9but de la ligne 4, les valeurs de <code>q</code> et <code>r</code> sont inchang\u00e9es, la condition <code>r  &gt;= d</code> reste donc v\u00e9rifi\u00e9e, l\u2019instruction suivante est 5. Compl\u00e9tons ainsi la table jusqu\u2019\u00e0 la fin du programme : <pre><code>(ligne)   q       r       r &gt;= d     (ligne suivante)     n == q * d + r\n=======================================================================\n  2       -        -         -             3                -      \n  3       0       13       True            4              VRAI (entr\u00e9e dans la boucle)   \n  4       0       13       True            5              VRAI   \n  5       1       13       True            2              FAUX\n  3       1       10       True            4              VRAI (retour dans la boucle)\n  4       1       10       True            5              VRAI   \n  5       2       10       True            3              FAUX\n  3       2        7       True            4              VRAI (retour dans la boucle)\n  4       2        7       True            5              VRAI   \n  5       3        7       True            3              FAUX\n  3       3        4       True            4              VRAI (retour dans la boucle)\n  4       3        4       True            5              VRAI   \n  5       4        4       True            3              FAUX\n  3       4        1       False     sortie de boucle     VRAI \n</code></pre></p> <p>il n'y a pas unicit\u00e9 de variant ni d'invariant de boucle.</p> <p>Observons que la propri\u00e9t\u00e9 <code>n == q * d + r</code> reste vraie \u00e0 chaque retour dans la boucle, m\u00eame si elle n'est pas toujours vraie au milieu de la boucle. Elle est aussi vraie en sortie de boucle et permet de s\u2019assurer que le r\u00e9sultat calcul\u00e9 est celui attendu.</p> <p>Exercice corrig\u00e9</p> <p>On consid\u00e8re la fonction <code>palindrome</code> suivante : <pre><code>def palindrome(mot):\n    \"\"\" Renvoie True si mot est un palindrome, False sinon \"\"\"\n    i = 0\n    j = len(mot) - 1\n    while i &lt;= j:\n    if mot[i] == mot[j]:\n        i = i + 1\n        j = j - 1\n    else:\n        return False\n    return True\n</code></pre></p> <ol> <li>D\u00e9crire l\u2019\u00e9volution des valeurs des variables le fonctionnement de l\u2019algorithme pr\u00e9c\u00e9dent pour le mot <code>\"radar\"</code>.</li> <li>Montrer que <code>j \u2013 i</code> est un variant de boucle. En d\u00e9duire que la fonction <code>palindrome</code> se termine.</li> <li>Montrer que <code>i + j == len(mot) - 1</code> est un invariant de boucle.</li> </ol> R\u00e9ponse 1 <p>La table suivante montre les \u00e9tats successifs du programme avec le mot <code>\"radar\"</code>. <pre><code>(ligne)   i      j     i &lt;= j   mot[i]   mot[j]   j \u2013 i     i + j    (ligne suivante) \n=========================================================================================\n  4       0      -       -        r         -       -         -       (5)                    \n  5       0      4      True      r         r       4         4       (6) entr\u00e9e dans la boucle  \n  6       0      4      True      r         r       4         4       (7) mot[i] == mot[j]\n  7       0      4      True      r         r       4         4       (8) \n  8       1      4      True      a         r       3         5       (5) \n  5       1      3      True      a         a       2         4       (6) entr\u00e9e dans la boucle  \n  6       1      3      True      a         a       2         4       (7) mot[i] == mot[j]\n  7       1      3      True      a         a       2         4       (8) \n  8       2      3      True      d         a       1         5       (5) \n  5       2      2      True      d         d       0         4       (6) entr\u00e9e dans la boucle  \n  6       2      2      True      d         d       0         4       (7) mot[i] == mot[j]\n  7       2      2      True      d         d       0         4       (8) \n  8       3      2      False     a         d      -1         5       (5) \n  5       3      1      False     a         d      -2         4       (11) sortie de la boucle  \n</code></pre></p> R\u00e9ponse 2 <p>A chaque it\u00e9ration <code>j - i</code>  diminue de 2 , c\u2019est un variant de boucle qui finira par devenir n\u00e9gatif, autrement dit la condition <code>i &lt;= j</code> deviendra fausse et la boucle s\u2019arr\u00eatera (\u00e0 moins qu\u2019elle se termine plus t\u00f4t si mot n\u2019est pas un palindrome), donc le programme se terminera.</p> <p>Il est aussi possible de le d\u00e9montrer formellement. Supposons que l\u2019on rentre dans la boucle \u00e0 la ligne 5 avec <code>i</code> et <code>j</code> ayant des valeurs appel\u00e9es \\(x\\) et \\(y\\).  <code>j - i</code>  est \u00e9gal \u00e0 \\(y - x\\).  Apr\u00e8s les lignes 7 et 8,  <code>i</code> devient \u00e9gal \u00e0 \\(x + 1\\) et <code>j</code> \u00e0 \\(y - 1\\), donc  <code>j - i</code>  devient bien \u00e9gal \u00e0 \\((y  - 1) \u2013 (x + 1) = y \u2013 x- 2\\).  <code>j - i</code>  a bien diminu\u00e9 de \\(2\\).</p> R\u00e9ponse 3 <p>De la m\u00eame fa\u00e7on, il est possible de d\u00e9montrer que <code>i + j == len(mot) - 1</code>   est un invariant de boucle :</p> <ul> <li>Au d\u00e9but du programme, avant de rentrer dans la boucle, <code>i</code> est \u00e9gal \u00e0 0 et  j est \u00e9gal \u00e0 <code>len(mot)- 1</code> donc  <code>i + j</code> est bien \u00e9gal \u00e0 <code>len(mot) - 1</code>.   </li> <li>Lorsqu\u2019on rentre dans la boucle \u00e0 la ligne 5 avec <code>i</code> et <code>j</code> ayant des valeurs \\(x\\) et \\(y\\) telles que \\(x + y\\) est \u00e9gal \u00e0 <code>len(mot) - 1</code> , apr\u00e8s les lignes 7 et 8, <code>i</code> devient \u00e9gal \u00e0 \\(x + 1\\) et <code>j</code> \u00e0 \\(y - 1\\), donc  <code>i + j</code>  est toujours \u00e9gal \u00e0 $(x + 1) + (y - 1) = x + y $ c'est-\u00e0-dire \u00e0 <code>len(mot)  \u2013 1</code>.</li> </ul>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#assertions","title":"Assertions","text":"<p>Des assertions permettent de tester les pr\u00e9conditions, postconditions et les invariants de boucles. Leur non-respect alerte sur une erreur de programmation. </p> <p>Cours</p> <p>Une Assertion v\u00e9rifie qu\u2019une expression est *vraie et arr\u00eate le programme sinon . <pre><code>assert &lt;condition&gt; \n</code></pre></p> <p>Un message peut \u00eatre affich\u00e9 quand une assertion est fausse avant d'arr\u00eater le programme :</p> <pre><code>assert &lt;condition&gt;, 'message '\n</code></pre> <p>Reprenons la fonction <code>est_premier(nombre)</code> vue pr\u00e9c\u00e9demment. Le param\u00e8tre <code>nombre</code> doit \u00eatre de type entier et positif. Ce sont des pr\u00e9conditions. Ajoutons les assertions correspondantes au d\u00e9but de la fonction.</p> <pre><code>def est_premier(nombre):\n    \"\"\" (int) -&gt; bool\n    Precondition : nombre est de type int et positif\n    Renvoie True si nombre est premier, False sinon\n    \"\"\"\n    assert type(nombre) == int\n    assert nombre &gt;= 0, 'nombre doit \u00eatre positif' \n    # Cherche un diviseur entre 2 et nombre-1\n    for d in range(2, nombre): \n        if nombre%d == 0:   # d divise nombre donc nombre n'est pas premier\n            return False\n    # Pas diviseur entre 2 et n-1, donc nombre est premier\n    return True \n</code></pre> <p>et testons le r\u00e9sultat :</p> <pre><code>&gt;&gt;&gt; est_premier('5')\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\n  File \"\u2026.\", line 16, in est_premier\n    assert(type(nombre) == int)\nAssertionError  \n\n&gt;&gt;&gt; est_premier(-1)\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\n  File \"\u2026.\", line 7, in est_premier\n    assert nombre &gt;= 0, 'nombre doit \u00eatre positif'\nAssertionError: nombre doit \u00eatre positif\n</code></pre> <p><code>assert</code> est souvent utilis\u00e9 en phase de test seulement ou en programmation d\u00e9fensive<sup>7</sup>. </p> <p>L'instruction <code>try...\u2026except...</code> (hors programme) permet de g\u00e9rer efficacement les erreurs pr\u00e9visibles d\u2019utilisateur, lors d\u2019une saisie par exemple : </p> <pre><code>while True:\n    try:\n        n = input(\"Entrez un nombre entier \")\n        n = int(n)\n        break\n    except ValueError:\n        print(n, \"n'est pas un entier, essayer \u00e0 nouveau ...\")\nprint(n, \"est bien un nombre entier\")\n</code></pre>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#jeux-de-tests","title":"Jeux de tests","text":"<p>Les sp\u00e9cifications et les v\u00e9rifications des pr\u00e9 et postconditions d\u2019un programme ne garantissent pas l\u2019absence de bugs. Avant de pouvoir utiliser un programme, il est important d\u2019effectuer un jeu de tests pour d\u00e9celer d\u2019\u00e9ventuelles erreurs.</p> <p>Cours</p> <p>Un jeu de test permet de trouver d\u2019\u00e9ventuelles erreurs. Le succ\u00e8s d\u2019un jeu de tests ne garantit pas qu\u2019il n\u2019y ait pas d\u2019erreur.   </p> <p>La qualit\u00e9 et le nombre de tests sont importants.</p>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#la-qualite-des-tests","title":"La qualit\u00e9 des tests","text":"<p>Cours</p> <p>Les tests doivent porter sur des valeurs d\u2019arguments \"normales\" mais aussi des valeurs \"sp\u00e9ciales\" ou \"extr\u00eames\" du programme. </p> <p>Par exemple, que se passe-t-il quand les valeurs <code>0</code> ou <code>1</code> sont pass\u00e9es en argument \u00e0 la fonction <code>est_premier</code> ? <pre><code>&gt;&gt;&gt; est_premier(0)\nTrue\n&gt;&gt;&gt; est_premier(1)\nTrue\n</code></pre></p> <p>Mais <code>0</code> et <code>1</code> ne sont pas des nombres premiers ! Il faut donc corriger la fonction en ajoutant ces cas qui avaient \u00e9t\u00e9 oubli\u00e9s.</p> <pre><code>def est_premier(nombre):\n    \"\"\" (int) -&gt; bool\n    Precondition : nombre est de type int et positif\n    Renvoie True si nombre est premier, False sinon\n    \"\"\"\n    assert type(nombre) == int\n    assert nombre &gt;= 0, 'nombre doit \u00eatre positif' \n    # 0 et 1 ne sont pas premiers\n    if (nombre == 0) or (nombre == 1):\n        return False\n    # Cherche un diviseur entre 2 et nombre-1\n    for d in range(2, nombre): \n        if nombre%d == 0:   # d divise nombre donc nombre n'est pas premier\n            return False\n    # Pas diviseur entre 2 et n-1, donc nombre est premier\n    return True \n</code></pre>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#le-nombre-de-tests","title":"Le nombre de tests","text":"<p>Cours</p> <p>Un programme de test permet d\u2019effectuer un grand nombre de tests automatiquement.</p> <p>V\u00e9rifions par des assertions la fonction <code>est_premier</code> pour tous les multiples de 2 allant de 4 \u00e0 100.</p> <pre><code>def test_est_premier():\n    \"\"\"Jeu de tests de est_premier() pour tous les multiples de 2 entre 4 et 100 \"\"\"\n    for i in range(2, 51):\n        assert not est_premier(2 * i)                                      \n    return True\n</code></pre> <p>Il est aussi possible d'\u00e9crire un programme de tests en utilisant la c\u00e9l\u00e8bre formule d\u2019Euler : \\(n^2 + n + 41\\) qui produit de nombreux nombres premiers, notamment pour tous les nombres \\(n\\) allant de 0 \u00e0 39.</p> <pre><code>def test2_est_premier():\n    \"\"\"Jeu de tests de est_premier() par la formule d\u2019Euler 2**2+n+41\"\"\"\n    for i in range(40):\n        assert est_premier(i**2 + i + 41) \n    return True\n</code></pre>"},{"location":"langages-et-programmation/7-mise-au-point-gestion-bugs/#le-module-doctest","title":"Le module doctest","text":"<p>La fonction <code>tesmod()</code> du module <code>doctest</code> permet d\u2019effectuer automatiquement un jeu de tests d\u00e9fini dans la docstring d\u2019une fonction. Chaque test \u00e0 effectuer est indiqu\u00e9 dans la docstring sur une ligne commen\u00e7ant par <code>&gt;&gt;&gt;</code> pour simuler la console et le r\u00e9sultat attendu dans la ligne suivante.</p> <p>Par exemple : <pre><code>import doctest\n\ndef est_premier(nombre):\n    \"\"\" (int) -&gt; bool\n    Precondition : nombre est de type int et positif\n    Renvoie True si nombre est premier, False sinon\n    &gt;&gt;&gt; est_premier(3)\n    True\n    &gt;&gt;&gt; est_premier(4)\n    False\n    \"\"\"\n\u2026\n\ndoctest.testmod()\n</code></pre></p> <ol> <li> <p>https://www.informationisbeautiful.net/visualizations/million-lines-of-code/ \u21a9</p> </li> <li> <p>Dans la pratique il n'est pas possible de tester un logiciel dans toutes les conditions qu'il pourrait rencontrer lors de son utilisation et donc pas possible de contrer la totalit\u00e9 des bugs : un logiciel comme Microsoft Word compte 850 commandes et 1 600 fonctions, ce qui fait un total de plus de 500 millions de conditions \u00e0 tester.\u00a0\u21a9</p> </li> <li> <p>En 1996, l'USS Yorktown teste le programme Navy's Smart Ship. Un membre d'\u00e9quipage rentre un z\u00e9ro comme valeur lors de man\u0153uvres. Source : https://en.wikipedia.org/wiki/USS_Yorktown_(CG-48) \u21a9</p> </li> <li> <p>Premier vol d'Ariane 5 en 1996 :  Le code utilis\u00e9 \u00e9tait celui d'Ariane 4, mais les valeurs d'acc\u00e9l\u00e9ration de la fus\u00e9e d\u00e9passent les valeurs maximales pr\u00e9vues ! Source: https://fr.wikipedia.org/wiki/Vol_501_d%27Ariane_5 \u21a9</p> </li> <li> <p>RTFM est, en anglais, le sigle de la phrase Read the fucking manual, injonction signifiant que la r\u00e9ponse \u00e0 une question sur le fonctionnement d'un appareil est \u00e0 chercher dans son mode d'emploi.\u00a0\u21a9</p> </li> <li> <p>Comme le disait Guido van Rossum: \u201cCode is read much more often than it is written.\u201d\u00a0\u21a9</p> </li> <li> <p>La programmation d\u00e9fensive est un mode de programmation qui vise \u00e0 cr\u00e9er des programmes et des applications robustes face aux erreurs et aux entr\u00e9es de donn\u00e9es inattendues.\u00a0\u21a9</p> </li> <li> <p>Contrairement \u00e0 d'autres langages comme Java, C ou C++, qui utilisent des accolades pour s\u00e9parer les blocs de code, Python utilise l'indentation pour d\u00e9finir la hi\u00e9rarchie et la structure des blocs de code.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation-2/","title":"Langages et programmation (2)","text":"<p>M\u00eame s'il existe de nombreux langages de programmation<sup>1</sup>, diff\u00e9rents par leur syntaxe, leur style et leur popularit\u00e9, ils partagent tous le m\u00eame objectif : \u00e9crire des programmes informatique compr\u00e9hensible par un ordinateur et par un humain. </p> <p>La plupart des langages de programmation modernes, tels que Python, Java, C++, Ruby, etc., <sup>2</sup>, permettent de programmer les m\u00eames projets informatiques, il est courant que les d\u00e9veloppeurs apprennent et utilisent plusieurs langages en fonction de leurs besoins.</p> <ol> <li> <p>https://fr.wikipedia.org/wiki/Liste_de_langages_de_programmation.\u00a0\u21a9</p> </li> <li> <p>Tous ces langages sont dit \u00ab Turing complets \u00bb car ils poss\u00e8dent les caract\u00e9ristiques n\u00e9cessaires pour effectuer n'importe quel calcul qu'un mod\u00e8le math\u00e9matique d'ordinateur, appel\u00e9 \u00ab machine de Turing \u00bb, est capable de faire.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation-2/1-types-de-langages/","title":"Types de langages","text":"<p>Le microprocesseur d'un ordinateur n'effectue que des op\u00e9rations simples sur des s\u00e9quences de 0 et des 1, appel\u00e9es binaire <sup>1</sup>. Comment fait-il pour lire des donn\u00e9es que l'on souhaite traiter (les textes, les images, les sons, les nombres, etc.) ou ex\u00e9cuter des logiciels, des programmes par exemple \u00e9crits en Python, etc. ?</p>"},{"location":"langages-et-programmation-2/1-types-de-langages/#langages-de-bas-niveau","title":"Langages de bas niveau","text":"<p>Le langage natif du microprocesseur est appel\u00e9 langage machine, c'est-\u00e0-dire le seul qu'il puisse traiter. Il est compos\u00e9 d'instructions et de donn\u00e9es cod\u00e9es en binaire. </p> <p>Cours</p> <p>Langage machine : longue suite de 1 et de 0 (les \"bits\"<sup>5</sup>) souvent trait\u00e9s par groupes de 8 (les \u00ab octets \u00bb), 16, 32, ou m\u00eame 64 en fonction de l'architecture du microprocesseur.</p> <p>Le langage assembleur associe des noms aux mots binaires : placer un nombre en m\u00e9moire, faire une addition, etc\u2026 La transformation du code assembleur en langage machine est accomplie par un programme nomm\u00e9 aussi assembleur. L'op\u00e9ration inverse (retrouver l'assembleur \u00e9quivalent \u00e0 un morceau de code machine) est le d\u00e9sassemblage.</p> <p>Cours</p> <p>Assembleur<sup>6</sup> : langage qui repr\u00e9sente le langage machine sous une forme lisible par un humain. Les combinaisons de bits du langage machine sont repr\u00e9sent\u00e9es par des symboles faciles \u00e0 retenir. </p> <p>Par exemple, un processeur de la famille x86<sup>2</sup> reconna\u00eet une instruction en langage machine du type :</p> <pre><code>10110000 01100001\n</code></pre> <p>Cette m\u00eame instruction s'\u00e9crit en langage assembleur d'une fa\u00e7on plus facile \u00e0 comprendre pour le programmeur (<code>10110000</code> s'\u00e9crit <code>movb %al</code> et <code>01100001</code> s'\u00e9crit <code>$0x61</code>) : <pre><code>movb $0x61,%al\n</code></pre> ce qui signifie : \u00ab \u00e9crire le nombre 97 (la valeur est donn\u00e9e en hexad\u00e9cimal : 61<sub>16</sub> = 97<sub>10</sub>) dans le registre <code>AL</code> \u00bb. </p> <p>Cours</p> <p>Le langage machine et l'assembleur sont des langages dit de  \u00ab bas niveau \u00bb constitu\u00e9s d'instructions tr\u00e8s \u00e9l\u00e9mentaires. Chaque processeur poss\u00e8de son propre langage machine et assembleur.  Un programme en langage machine ou assembleur ne peut s'ex\u00e9cuter que sur la machine pour laquelle il a \u00e9t\u00e9 \u00e9crit.</p>"},{"location":"langages-et-programmation-2/1-types-de-langages/#langages-de-haut-niveau","title":"Langages de haut niveau","text":"<p>M\u00eame si coder en assembleur et plus rapide qu'en binaire, cela reste une \u00e9tape longue et fastidieuse. De plus que chaque processeur poss\u00e8de un jeu d'instructions diff\u00e9rent des autres, un code en assembleur qui fonctionne sur un processeur Pentium ne marchera pas forc\u00e9ment sur un AMD ou sur un processeur ARM, on dit que le programme n'est pas portable.</p> <p>Les langages de haut niveau ont permis de palier \u00e0 ces deux inconv\u00e9nients : ils permettent une programmation rapide et plus simple que l'assembleur et ils sont portables. Le m\u00eame programme \u00e9crit en Python ou en C fonctionnera sur diff\u00e9rents ordinateurs.</p> <p>Cours</p> <p>Les langages de \u00ab haut niveau \u00bb (Python, C, Java\u2026) comportent des instructions plus abstraites ou plus \u00ab puissantes qui seront traduites en un grand nombre d'instructions machine \u00e9l\u00e9mentaires.</p> <p> </p> Langage de \u00ab bas niveau \u00bb Langage de \u00ab haut niveau \u00bb Directement ex\u00e9cut\u00e9 par le processeur Doit \u00eatre \u00ab traduit \u00bb en langage machine pour \u00eatre ex\u00e9cut\u00e9 (complexe et long) Plus difficile \u00e0 \u00e9crire, maintenir (modifier), debugger Plus facile et plus rapide \u00e0 \u00e9crire, maintenir, et debugger Ne fonctionne que sur un seul type de machine (pour qu'une autre l'accepte, il faut le r\u00e9\u00e9crire enti\u00e8rement) Portable (fonctionne sans trop de modifications sur des machines ou des syst\u00e8mes d'exploitation diff\u00e9rents)"},{"location":"langages-et-programmation-2/1-types-de-langages/#langages-interpretes-ou-compiles","title":"Langages interpr\u00e9t\u00e9s ou compil\u00e9s","text":"<p>Le seul langage compris par le processeur est le langage machine il faut donc utiliser une sorte de traducteur entre le code source \u00e9crit dans un langage de programmation de haut niveau et le langage machine compris par le processeur. Il en existe de deux types : </p> <p>\u2013 un compilateur est un programme qui traduit un code \u00e9crit dans un langage de haut niveau en un fichier ex\u00e9cutable<sup>3</sup>  en assembleur compatible avec le processeur.</p> <p>\u2013 un interpr\u00e8teur est un programme qui simule une machine virtuelle dont le langage machine serait le langage de programmation lui-m\u00eame. Le code va \u00eatre lu, analys\u00e9 et ex\u00e9cut\u00e9 instruction par instruction par l'interpr\u00e8te.</p> <p> </p> <p>Cours</p> <p>Un programme \u00e9crit dans un langage de haut niveau peut \u00eatre traduit en langage machine ex\u00e9cutable par la machine de deux fa\u00e7ons : par interpr\u00e9tation ou compilation. </p> <p>En g\u00e9n\u00e9ral, un programme compil\u00e9 est nettement plus rapide qu'un programme interpr\u00e9t\u00e9 puisque toute la phase d'analyse et de v\u00e9rification du code source a d\u00e9j\u00e0 \u00e9t\u00e9 faite lors de la phase de compilation.</p> <p>Python est entre un langage interpr\u00e9t\u00e9 et un langage compil\u00e9.</p> <p>Cours</p> <p>Un script Python est d'abord compil\u00e9 en un langage interm\u00e9diaire, appel\u00e9 bytecode, qui est lui-m\u00eame ensuite interpr\u00e9t\u00e9 par une machine virtuelle.</p> <p> </p> <p>On peut observer le Bytecode d'un petit programme en utilisant le module dis de python :</p> <code>import dis</code> <code>dis.dis('x = 25; x = x + 1')</code> <code>&gt;&gt;&gt;</code> <code>Remote Interpreter Reinitialized</code> <code>1           0 LOAD_CONST               0 (25)</code> Le nombre 25 est copi\u00e9 dans un registre <code>2 STORE_NAME               0 (x)</code> Le registre est copi\u00e9 \u00e0 l'adresse m\u00e9moire de x <code>4 LOAD_NAME                0 (x)</code> La valeur de x est copi\u00e9e dans un registre <code>6 LOAD_CONST               1 (1)</code> Le nombre 1 est copi\u00e9 dans un registre <code>8 BINARY_ADD</code> Les deux sont additionn\u00e9s <code>10 STORE_NAME               0 (x)</code>&lt; Le r\u00e9sultat est copi\u00e9 \u00e0 l'adresse m\u00e9moire de x <code>12 LOAD_CONST               2 (None)</code> <code>14 RETURN_VALUE</code> <p>Le bytecode est portable, il peut s'ex\u00e9cuter sur diff\u00e9rentes machines, il suffit de disposer pour chacune d'elles d'un interpr\u00e9teur adapt\u00e9.</p> <p>L'interpr\u00e8teur Python le plus utilis\u00e9 est CPython ; il est \u00e9crit en C<sup>4</sup>.</p>"},{"location":"langages-et-programmation-2/1-types-de-langages/#comparaison-entre-interpretation-compilation-et-code-intermediaire","title":"Comparaison entre interpr\u00e9tation, compilation et code interm\u00e9diaire","text":"Interpr\u00e9tation Compilation Interm\u00e9daire Un interpr\u00e9teur analyse au fur et \u00e0 mesure chaque ligne du programme source et la traduit en langage machine qui est ensuite directement ex\u00e9cut\u00e9e. Aucun programme objet n'est g\u00e9n\u00e9r\u00e9. Un compilateur lit une seule fois toutes les lignes du programme source et produit un programme objet (ou code objet) qui peut \u00eatre ex\u00e9cut\u00e9 ind\u00e9pendamment du compilateur et \u00eatre conserv\u00e9 dans un fichier ex\u00e9cutable. Le programme source est d'abord compil\u00e9 pour produire un code interm\u00e9diaire, similaire \u00e0 un langage machine, que l'on appelle bytecode. Le bytecode est transmis \u00e0 un interpr\u00e9teur pour l'ex\u00e9cution dans une machine virtuelle. Id\u00e9al en phases de d\u00e9veloppement pour tester les modifications d'un programme sans compilation qui demande du temps Pr\u00e9f\u00e9rable lorsqu'un programme doit s'ex\u00e9cuter rapidement, un programme compil\u00e9 est plus rapide puisque l'ordinateur n'a plus \u00e0 traduire chaque instruction en binaire. L'interpr\u00e9teur permet de tester rapidement un programme tout en gardant la rapidit\u00e9 d'un code compil\u00e9, m\u00eame si l'interpr\u00e9tation du bytecode compil\u00e9 n'est pas aussi rapide que celle d'un v\u00e9ritable code binaire. Basic, PHP, Javascript C, C++, Cobol, Fortran, Pascal Python, Java, C# <ol> <li> <p>En pratique le microprocesseur utilise des signaux \u00e9lectriques qui prennent  deux \u00e9tats (un potentiel \u00e9lectrique maximum ou minimum) sur une logique logique du type \u00ab ouvert ou ferm\u00e9 \u00bb, qu'on assimile \u00e0 des nombres ne prenant que les deux valeurs 0 et 1.\u00a0\u21a9</p> </li> <li> <p>La famille de processeurs x86 d\u00e9signe les processeurs fonctionnant en 32 bits, la famille x64 ceux en 64 bits.\u00a0\u21a9</p> </li> <li> <p>En pratique le compilateur cr\u00e9\u00e9 le code assembleur qui est ensuite assembl\u00e9 en binaire pour cr\u00e9er un fichier ex\u00e9cutable.\u00a0\u21a9</p> </li> <li> <p>Mais d'autres existent (Jython, \u00e9crit en Java par exemple).\u00a0\u21a9</p> </li> <li> <p> En anglais octet se dit \u00ab byte \u00bb, ne pas confondre avec \u00ab bit \u00bb.\u00a0\u21a9</p> </li> <li> <p>Le Langage assembleur est \u00e9tudi\u00e9 dans le chapitre Architectures mat\u00e9rielles et Syst\u00e8mes d'exploitations.\u00a0\u21a9</p> </li> </ol>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/","title":"Paradigmes de programmation","text":"<p>Cours</p> <p>Un paradigme de programmation est une fa\u00e7on d'approcher la programmation et de traiter les solutions aux probl\u00e8mes et leur formulation dans un style appropri\u00e9. La plupart des langages sont multiparadigmes.</p> <p>La suite de ce chapitre pr\u00e9sente certains paragimes parmi les plus utilis\u00e9s<sup>1</sup>.</p>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/#langages-de-programmation-imperative","title":"Langages de programmation imp\u00e9rative","text":"<p>C\u2019est le paradigme le plus courant, car la quasi-totalit\u00e9 des processeurs qui \u00e9quipent les ordinateurs sont de nature imp\u00e9rative. Il s'agit historiquement des premiers langages, m\u00eame si de nombreux langages modernes utilisent toujours ce principe de fonctionnement.</p> <p>Cours</p> <p>Dans un langage imp\u00e9ratif le programme est construit sous forme d'une suite d'instructions, regroup\u00e9es par blocs et comprenant des sauts conditionnels pour revenir \u00e0 un bloc d'instructions si une condition est r\u00e9alis\u00e9e.</p> <p>Exemples : la plupart des langages courants, y compris des langages de programmation orient\u00e9s objets tels que C#, Visual Basic, C++ et Java, PHP. </p>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/#langages-de-programmation-fonctionnelle","title":"Langages de programmation fonctionnelle","text":"<p>Cours</p> <p>Dans un langage fonctionnel le programme est construit comme un embo\u00eetement de fonctions qui agissent comme des \u00ab boites noires \u00bb que l\u2019on peut imbriquer les unes dans les autres.</p> <p>Exemples : Lisp, la famille ML (Standard ML, OCaml et autres) et Haskell, mais aussi beaucoup de langages imp\u00e9ratifs (Python ou C#) incluent des extensions de langage qui prennent en charge la programmation fonctionnelle, par exemple les fonctions lambda en Python.</p> <p>Les principes de la programmation fonctionnelle sont les suivants :</p> <ul> <li> <p>Les variables ne sont pas modifi\u00e9es. </p> <p>Les variables Python de type <code>list</code> avec les m\u00e9thodes <code>.append()</code> ou <code>.pop()</code> ne respectent pas les principes de programmation fonctionnelle, voyons comment les utiliser diff\u00e9remment :</p> Exemple de programmation non fonctionnelle Exemple de programmation fonctionnelle <code>&gt;&gt;&gt; l = [1, 2, 3, 4]</code><code>&gt;&gt;&gt; l.append(5)</code><code>&gt;&gt;&gt; l</code><code>[1, 2, 3, 4, 5]</code><code>&gt;&gt;&gt; l.pop()</code><code>5</code> <code>&gt;&gt;&gt; l = [1, 2, 3, 4]</code><code>&gt;&gt;&gt; m = l + [5]</code><code>&gt;&gt;&gt; m</code><code>[1, 2, 3, 4, 5]</code><code>&gt;&gt;&gt; l</code><code>[1, 2, 3, 4]</code><code>&gt;&gt;&gt; n = m[:-1]</code> </li> <li> <p>Les tableaux par compr\u00e9hension, inspir\u00e9es du langage de programmation fonctionnel Haskell, sont adapt\u00e9s \u00e0 la programmation fonctionnelle.</p> <p>Par exemple la liste de carr\u00e9s de tous les nombres impairs de 0 \u00e0 9 :</p> </li> </ul> Exemple de programmation non fonctionnelle Exemple de programmation fonctionnelle <code>carres = []</code><code>for x in range(10):</code> <code>if x%2 != 0:</code> <code>carres.append(x**2)</code> <code>[x**2 for x in range(10) if x%2 != 0]</code> <ul> <li> <p>La r\u00e9cursivit\u00e9 est souvent utilis\u00e9e, en particulier \u00e0 la place des boucles (puisque l\u2019\u00e9tat du programme ne peut pas \u00eatre modifi\u00e9, en particulier avec un variant de boucle). </p> <p>Voyons comment calculer le produit de tous les nombres entiers entre 1 et \\(n\\), appel\u00e9 factorielle de \\(n\\) et not\u00e9 \\(n!\\) :</p> <p>\\(n!  =  1  \\times 2  \\times 3  \\times 4  \\times ...  \\times (n-1)  \\times n\\) </p> Exemple de programmation non fonctionnelle Exemple de programmation fonctionnelle <code>def fact(n):</code> <code>f = 1</code> <code>for i in range(2, n+1):</code> <code>f = f * i</code> <code>return f</code> <code>def fact(n):</code> <code>if n == 1: return 1</code> <code>return n * f(n - 1)</code><code># ou en fonction lambda</code><code>fact = lambda n:1 if n == 1  else n * f(n - 1)</code> </li> <li> <p>Une fonction est une \"fonction pure\", elle renvoie une valeur qui ne d\u00e9pend que de ses param\u00e8tres, et pas de valeur externes.</p> Exemple de programmation non fonctionnelle Exemple de programmation fonctionnelle <code>n = 2</code><code>def inc(k):</code> <code>\"\"\" incr\u00e9mentation par effet de bord \"\"\"</code> <code>global n</code> <code>n = n + k</code> <code>return n</code><code>print(inc(1) + inc(1))</code><code>&gt;&gt;&gt; 7</code> <code>def inc(k):</code> <code>\"\"\" incr\u00e9mentation sans effet de bord\"\"\"</code> <code>n = 2</code> <code>n = n + k</code> <code>return n</code><code>print(inc(1) + inc(1))</code><code>&gt;&gt;&gt; 6</code> <p>Dans l\u2019exemple de programmation non fonctionnelle, la fonction <code>inc(k)</code> ne renvoie pas la m\u00eame valeur lors des deux appels : le premier appel renvoie <code>3</code> (<code>=2 + 1</code>) et le second <code>4</code> (<code>=3 + 1</code>), il est donc impossible de remplacer <code>print(inc(1) + inc(1))</code> par <code>print(2 * inc(1))</code>. </p> </li> <li> <p>Une fonction est dite \"d'ordre sup\u00e9rieur\", elle peut \u00eatre utilis\u00e9e comme param\u00e8tre d\u2019une autre fonction ou renvoy\u00e9e comme r\u00e9sultat d\u2019une autre fonction. Une fonction est aussi dite \"de premi\u00e8re classe\", elle est manipulable comme un type de base, elle peut \u00eatre assign\u00e9e \u00e0 une variable (fonction lambda) ou m\u00eame stock\u00e9e dans une structure de donn\u00e9es. </p> <p>En Python, les fonctions lambda sont un exemple de programmation fonctionnelle.  Cr\u00e9ons une fonction qui renvoie la fonction \"\u00e0 la puissance n\" :</p> <pre><code>def puissance(n):\n    return lambda x: x**n\n</code></pre> <p>que l'on peut l'utiliser pour cr\u00e9er les fonctions <code>carre</code> et <code>cube</code> :</p> <pre><code>&gt;&gt;&gt; carre = puissance(2)\n&gt;&gt;&gt; cube = puissance(3)\n&gt;&gt;&gt; cube(10)\n1000\n</code></pre> <p><code>puissance(5)</code> est la fonction qui renvoie la puissance 5 d'un nombre, par exemple pour calculer \\(10^5\\) :</p> <pre><code>&gt;&gt;&gt; puissance(5)(10)\n10000\n</code></pre> <p>On peut aussi stocker des fonctions dans une structure de donn\u00e9es, par exemple cr\u00e9er un tableau avec toutes les fonctions <code>puissance()</code> entre de 0 et 100 :</p> <pre><code>&gt;&gt;&gt; p = [puissance(i) for i in range(101)]\n&gt;&gt;&gt; p[5](10)\n10000\n</code></pre> </li> </ul>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/#langages-de-programmation-orientee-objet","title":"Langages de programmation orient\u00e9e objet","text":"<p>Cours</p> <p>La programmation orient\u00e9e objet, ou POO consiste en la d\u00e9finition et l\u2019interaction de briques logicielles appel\u00e9es objets. Un objet repr\u00e9sente un concept, une id\u00e9e ou toute entit\u00e9 du monde physique (une voiture, une personne, etc.).</p> <p>Exemple de langages orient\u00e9s objets : Java, Javascript C++, Python, PHP</p> <p>Une classe regroupe des fonctions et des attributs qui d\u00e9finissent la structure interne et le comportement de ses objets.</p> <p>PEP 8</p> <p>Les noms de classes s\u2019\u00e9crivent en CamelCase https://www.python.org/dev/peps/pep-0008/#class-names</p> <p>Prenons un exemple, cr\u00e9ons une classe <code>Voiture</code> : </p> <pre><code>class Voiture:\n    pass\n</code></pre> <p>Notre classe <code>Voiture</code> est une sorte d'usine \u00e0 cr\u00e9er des voitures, ce n\u2019est pas une voiture. Elle permet de cr\u00e9er un ou plusieurs objets, appel\u00e9s instances de la classe.</p> <p>Cr\u00e9ons maintenant notre premier objet <code>Voiture</code> :</p> <pre><code>ma_voiture = Voiture()\n</code></pre> <p>Les attributs permettent de stocker des informations \u00e0 propos d\u2019un objet Voiture. Dans notre exemple, donnons plusieurs  attributs \u00e0 une voiture :</p> <pre><code>ma_voiture = Voiture()\nma_voiture.marque=\"Peugeot\"\nma_voiture.modele = \"308\"\nma_voiture.km = 25645\n</code></pre> <p>Et les lire ainsi. L'instruction <code>print(\"Ma voiture est une \",ma_voiture.marque, ma_voiture.modele, 'de ',  ma_voiture.km, 'km')</code> affiche dans la console : <pre><code>&gt;&gt;&gt; Ma voiture est une  Peugeot 308 de 25645 km\n</code></pre> Les m\u00e9thodes sont des fonctions qui s\u2019appliquent aux objets de cette classe. Cr\u00e9ons deux nouvelles m\u00e9thodes dans notre classe <code>Voiture</code> :</p> <pre><code>class Voiture:\n\n    def get_km(self):\n        return self.km\n\n    def roule(self, k):\n        self.km = self.km + k\n</code></pre> <p>Utilisons ces m\u00e9thode dans un programme :</p> <pre><code>def main():\n    ma_voiture = Voiture()\n    ma_voiture.marque=\"Peugeot\"\n    ma_voiture.modele = \"308\"\n    ma_voiture.km = 25645\n    ma_voiture.roule(10000)\n    print(ma_voiture.get_km() )\n</code></pre> <p>Plut\u00f4t que de rajouter les attributs les uns apr\u00e8s les autres apr\u00e8s avoir cr\u00e9\u00e9 un objet, on peut ajouter une m\u00e9thode sp\u00e9ciale appel\u00e9e <code>__init__()</code><sup>2</sup> pour les renseigner directement \u00e0 la cr\u00e9ation de l\u2019objet.</p> <pre><code>class Voiture:\n    def __init__(self, ma, mo, k=0):\n        self.marque = ma\n        self.modele  = mo\n        self.km = k\n\ndef main():\n    ma_voiture = Voiture(\"Peugeot\", \"308\", 25645)\n    ma_voiture.roule(10000)\n    print(ma_voiture.get_km() )\u2003\n</code></pre>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/#langages-de-programmation-logique","title":"Langages de programmation logique","text":"<p>Cours</p> <p>La programmation logique est un paradigme de programmation qui d\u00e9finit les applications \u00e0 l'aide d'un ensemble de faits \u00e9l\u00e9mentaires les concernant et de r\u00e8gles de logique leur associant des cons\u00e9quences plus ou moins directes. Ces faits et ces r\u00e8gles sont exploit\u00e9s par un d\u00e9monstrateur de th\u00e9or\u00e8me ou moteur d'inf\u00e9rence, en r\u00e9action \u00e0 une question ou requ\u00eate.</p> <p>Exemple : Prolog<sup>3</sup> (Prolog est aussi un langage imp\u00e9ratif).</p> <p>Prenons l'exemple du probl\u00e8me logique suivant : Alice et Luc sont mari\u00e9s. Luc est le p\u00e8re de Jean.  Qui est la m\u00e8re de Jean ?</p> <p>Syntaxe Prolog</p> <p>Le symbole  <code>:-</code>  dans une r\u00e8gle se lit \"si\" ; la virgule <code>,</code> dans une r\u00e8gle se lit \"et\", tout ce qui suit le caract\u00e8re <code>%</code> sur une ligne est un commentaire, le nom des variables commencent toujours par une lettre majuscule (exemple : <code>X</code>, <code>Voiture</code>, <code>NUMERO</code>, etc.).</p> <p>La solution peut \u00eatre trouv\u00e9e par un simple programme Prolog r\u00e9alis\u00e9 sur https://swish.swi-prolog.org/.</p> <p>Indiquons les deux faits connus dans le code sourve: 1. alice est l'\u00e9pouse de luc  2. luc est le p\u00e8re de jean</p> <p> Ne pas oublier le point \u00e0 la fin de chaque instruction.</p> <pre><code>% les faits :\nepouse(alice,luc). % alice est l'\u00e9pouse de luc\npere(luc,jean). % luc est le p\u00e8re de jean\n</code></pre> <p>Puis la r\u00e8gle que si un p\u00e8re est mari\u00e9 \u00e0 une femme, alors cette derni\u00e8re est la m\u00e8re du fils (pas de famille recompos\u00e9e ici !) :</p> <pre><code>% les r\u00e8gles :\nmere(M,E):-pere(P,E),epouse(M,P). % M est la m\u00e8re de E si P est le p\u00e8re de E et si M est l'\u00e9pouse de P\n</code></pre> <p>Avant de r\u00e9pondre \u00e0 notre probl\u00e8me, posons quelques questions :</p> <p>jutiliser le bouton Run ou CTRL+Enter pour executer.</p> <ol> <li> <p>Qui est l'\u00e9pouse de luc ?     <pre><code>?- epouse(X,luc).\nX = alice.\n</code></pre></p> </li> <li> <p>Qui est l'\u00e9poux d'alice ? (ou qui a pour \u00e9pouse alice ?)   <pre><code>?- epouse(alice,X).\nX = luc.    \n</code></pre></p> </li> <li> <p>Qui est le p\u00e8re de jean ?     <pre><code>?- pere(X,jean).    \nX = luc.    \n</code></pre></p> </li> <li> <p>Qui est le fils de luc ? (ou qui a pour p\u00e8re luc ?)    <pre><code>?- pere(luc,X). \nX = jean.   \n</code></pre></p> </li> </ol> <p>Noter que pour r\u00e9pondre \u00e0 ces 4 premi\u00e8res questions Prolog n'utilise que les faits, pas la r\u00e8gle d\u00e9finissant la m\u00e8re.</p> <p>Posons maintenant la question qui nous int\u00e9resse. Prolog utilise cette fois la r\u00e8gle d\u00e9finissant la m\u00e8re.</p> <ol> <li> <p>Qui est la mere de jean ?     <pre><code>?- mere(X,jean).\nX = alice.  \n</code></pre></p> </li> <li> <p>Qui est le fils d'alice ? (ou qui a pour m\u00e8re alice ?)     <pre><code>?- mere(alice,X).\nX = jean.   \n</code></pre></p> </li> <li> <p>Qui est le fils de jean ? (ou Qui a pour p\u00e8re jean ?)     <pre><code>?- pere(jean,X).\nfalse.  \n</code></pre></p> </li> <li> <p>Qui est le fils de lucienne ? (ou qui a pour m\u00e8re lucienne ?)       <pre><code>?- mere(lucienne,X).\nfalse.  \n</code></pre></p> </li> </ol> <p>Prolog n'a pas la r\u00e9ponse \u00e0 ces 2 derni\u00e8res questions : il r\u00e9pond alors false.</p> <ol> <li> <p>Qui est la m\u00e8re de qui ?     <pre><code>?- mere(X,Y).\nX = alice,\nY = jean..  \n</code></pre></p> </li> <li> <p>combien de liens de parent\u00e9 \"m\u00e8re/fils\" existe-t-il ?      <pre><code>?- mere(_,_).\ntrue   % 1 seul.    \n</code></pre> Le soulignement (_) signale \u00e0 Prolog que la variable en question n\u2019est pas utilis\u00e9e (\u201cplaceholder\u201d) </p> </li> <li> <p>Existe-t-il une personne qui est sa propre m\u00e8re ?      <pre><code>?- mere(X,X).\nfalse   % non.  \n</code></pre></p> </li> </ol>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/#langages-de-programmation-evenementielle","title":"Langages de programmation \u00e9v\u00e8nementielle","text":"<p>Cours</p> <p>En programmation \u00e9v\u00e9nementielle le flux du programme est d\u00e9termin\u00e9 par des \u00e9v\u00e9nements tels que les actions de l'utilisateur (clics de souris, pressions de touches), les sorties de capteur ou les messages d'autres programmes ou threads. </p> <p>Exemple : JavaScript</p> <p>La programmation \u00e9v\u00e8nementielle est le paradigme dominant utilis\u00e9 dans la programmation d\u2019Interfaces Homme Machine, ou IHM (GUI en anglais pour graphical user interface) et d'autres applications d\u2019automates.</p> <p>Apr\u00e8s une phase d\u2019initialisation, le programme  \u00ab tourne \u00bb en permanence  \u00ab en attente \u00bb de d\u00e9tecter un \u00e9v\u00e9nement :  une action de l\u2019utilisateur (d\u00e9placement de la souris, appui sur une touche, etc.,) ou un \u00e9v\u00e9nement externe (top d\u2019horloge, etc.)</p> <p> </p> <p>Le programme r\u00e9agit aux \u00e9v\u00e9nements, l\u2019ordre dans lequel il est ex\u00e9cut\u00e9 n\u2019est pas connu \u00e0 l\u2019avance, ce sont  les \u00e9v\u00e8nements qui le d\u00e9terminent.</p> <p>En pratique :</p> <ol> <li> <p>Javascipt avec <code>&lt;element onclick=\"myFunction\"&gt;</code> . </p> <p>Dans notepad, cr\u00e9ons un fichier test.html et ouvrons-le dans un navigateur</p> <p>Syntaxe Prolog</p> <p>On peut acc\u00e9der \u00e0 un \u00e9l\u00e9ment HTML en JavaScript avec <code>document.getElementById(id)</code> o\u00f9 <code>id</code> d\u00e9signe l\u2019\u00e9l\u00e9ment HTML. L\u2019attribut <code>innerHTML</code> d\u00e9finit le contenu de cet \u00e9l\u00e9ment HTML.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;p id=\"demo\" onclick=\"myFunction()\"&gt;Cliquez ici&lt;p&gt;\n\n&lt;script&gt;\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Vous avez cliqu\u00e9\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Javascript avec <code>object.onclick = function(){myScript};</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;p id=\"demo\"&gt; Cliquez ici&lt;/p&gt;\n&lt;script&gt;\ndocument.getElementById(\"demo\").onclick = function() {myFunction()};\n\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Vous avez cliqu\u00e9\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> </ol>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/#langages-de-requetes-ou-de-bases-de-donnees","title":"Langages de requ\u00eates ou de bases de donn\u00e9es","text":"<p>Cours</p> <p>Le langage SQL (Structured Query Langages) sp\u00e9cialement con\u00e7u pour faire des requ\u00eates (s\u00e9lectionner, filtrer, mettre \u00e0 jour) sur les syst\u00e8mes de bases de donn\u00e9es.</p>"},{"location":"langages-et-programmation-2/2-paradigmes-de-programmation/#langages-descriptifs-ou-de-balisage","title":"Langages descriptifs (ou de balisage)","text":"<p>Cours</p> <p>Les langages descriptifs (ou de balisage) sont sp\u00e9cialis\u00e9s dans l'enrichissement d'information textuelle. Ils utilisent des balises, permettant de transf\u00e9rer \u00e0 la fois la structure du document et son contenu. </p> <p>Cette structure est compr\u00e9hensible par un programme informatique, ce qui permet un traitement automatis\u00e9 du contenu. Si ce sont des langages informatiques, ce ne sont pas des langages de programmation \u00e0 proprement parler (on ne peut pas \u00e9crire de programme avec).</p> <p>Exemples: HTML, mais aussi Latex, XML</p> <ol> <li> <p>Une liste compl\u00e8te de paradigmes de programmation est disponible sur : https://en.wikipedia.org/wiki/programming_paradigm.\u00a0\u21a9</p> </li> <li> <p>La m\u00e9thode <code>__init__()</code> est appel\u00e9e le constructeur de la classe.\u00a0\u21a9</p> </li> <li> <p>Le nom Prolog est un acronyme de PROgrammation en LOGique. Il a \u00e9t\u00e9 cr\u00e9\u00e9 par Alain Colmerauer et Philippe Roussel vers 1972 \u00e0 Luminy, Marseille. Le but \u00e9tait de cr\u00e9er un langage de programmation o\u00f9 seraient d\u00e9finies les r\u00e8gles logiques attendues d'une solution et de laisser le compilateur la transformer en s\u00e9quence d'instructions. (Source : Wikipedia)\u00a0\u21a9</p> </li> </ol>"},{"location":"types-construits/","title":"Repr\u00e9sentation des donn\u00e9es : types constuits","text":"<p>Les types de donn\u00e9es de bases -- entier (<code>int</code>), flottant (<code>float</code>) et bool\u00e9en (<code>bool</code>) -- \u00e9tudi\u00e9s dans le chapitre langage et programmation permettent de construire de nouveaux types de donn\u00e9es regroupant plusieurs valeurs en une seule entit\u00e9. Ces types de donn\u00e9es, appel\u00e9s types construits, sont tr\u00e8s utiles en programmation pour organiser et manipuler des donn\u00e9es de mani\u00e8re plus complexe et structur\u00e9e. </p>"},{"location":"types-construits/1-p-uplets/","title":"p-uplets (type <code>tuple</code>)","text":"<p>Cours</p> <p>Un p-uplet (ou n-uplet) est une suite ordonn\u00e9e d'\u00e9l\u00e9ments qui ne peuvent pas \u00eatre modifi\u00e9s (immuables<sup>3</sup> ).</p> <p>En Python les p-uplets sont du type <code>tuple</code>.</p> <p>Deux \u00e9l\u00e9ments ensembles forment un couple, trois \u00e9l\u00e9ments un triplet, quatre \u00e9l\u00e9ments un quadruplet, etc., et par extension p \u00e9l\u00e9ments ensembles forment un p-uplet.</p>"},{"location":"types-construits/1-p-uplets/#creation","title":"Cr\u00e9ation","text":"<p>Un p-uplet est d\u00e9clar\u00e9 par une suite de valeurs, s\u00e9par\u00e9es par des virgules, et le tout encadr\u00e9 par des parenth\u00e8ses \u201c<code>( )</code>\u201d. Il peut contenir des valeurs de types diff\u00e9rents.</p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n</code></pre> <p>Il est aussi possible de cr\u00e9er un p-uplet sans parenth\u00e8se :</p> <pre><code>&gt;&gt;&gt; p = 1, 2.5, 'hello', True\n&gt;&gt;&gt; p\n(1, 2.5, 'hello', True)\n&gt;&gt;&gt; type(p)\n&lt;class 'tuple'&gt;\n</code></pre> <p> Ne pas confondre la virgule qui s\u00e9pare les diff\u00e9rents \u00e9l\u00e9ments avec le point utilis\u00e9 pour les nombres de type <code>float</code>, c'est souvent un risque d'erreur :</p> <pre><code>&gt;&gt;&gt; p_2_elem = (1.2,3) # Creation d'un tuple avec 2 \u00e9l\u00e9ments : 1.2 (type float) et 3 (type int)\n&gt;&gt;&gt; p_3_elem = (1,2,3) # Creation d'un tuple avec trois \u00e9l\u00e9ments : 1 2 et 3 (type int)\n</code></pre> <p>Un p-uplet peut contenir des \u00e9l\u00e9ments de types diff\u00e9rents, y compris d'autres p-uplets :</p> <p>Le second p-uplet <code>(3, 4.0, 'bye', False)</code> doit obligatoirement \u00eatre \u00e9crit entre parenth\u00e8se dans ce cas.</p> <pre><code>&gt;&gt;&gt; p_de_p = p, (3, 4.0, 'bye', False)\n&gt;&gt;&gt; p_de_p\n((1, 2.5, 'hello', True), (3, 4.0, 'bye', False))\n</code></pre> <p>D'autres exemples de p-uplets :</p> <ul> <li> <p>p-uplet vide, les parenth\u00e8ses sont obligatoires ici : <pre><code>&gt;&gt;&gt; p_vide = ()  \n</code></pre></p> </li> <li> <p>p-uplet avec un seul \u00e9l\u00e9ment \u00e9crit avec une virgule \u00e0 la fin : <pre><code>&gt;&gt;&gt; p_1_elem = 1,\n&gt;&gt;&gt; p_1_elem\n(1,)\n</code></pre> ou  \u00e9crit avec des parenth\u00e8ses :  <pre><code>&gt;&gt;&gt; autre_p_1_elem = (1,)\n&gt;&gt;&gt; autre_p_1_elem\n(1,)\n</code></pre></p> </li> <li> <p>mais attention, c'est finalement la virgule plus que les parenth\u00e8ses qui cr\u00e9e le p-uplet, ici <code>pas_p</code> n'est pas un p-uplet, c'est un entier !  <pre><code>&gt;&gt;&gt; pas_p = (1)\n&gt;&gt;&gt; pas_p\n1\n&gt;&gt;&gt; type(pas_p)\n&lt;class 'int'&gt;\n</code></pre></p> </li> </ul>"},{"location":"types-construits/1-p-uplets/#fonction-len","title":"Fonction <code>len()</code>","text":"<p>La fonction <code>len()</code> renvoie la longueur d'un p-uplet, c'est-\u00e0-dire le nombre d'\u00e9l\u00e9ments qu'il contient.</p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; len(p)\n4\n</code></pre>"},{"location":"types-construits/1-p-uplets/#acces-aux-elements","title":"Acc\u00e8s aux \u00e9l\u00e9ments","text":"<p>Comme pour les chaines de caract\u00e8res, la position de chaque \u00e9l\u00e9ment d'un p-uplet <code>p</code> est index\u00e9e \u00e0 partir de <code>0</code> jusqu'\u00e0 <code>len(p)</code> exclu, c'est-\u00e0-dire le dernier \u00e9l\u00e9ment est en position <code>len(p) - 1</code>. Il y a donc bien <code>len(p)</code> \u00e9lements dans le p-uplet.</p> <p>Il est possible d\u2019acc\u00e9der aux \u00e9l\u00e9ments par leur indice entre crochets. </p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; p[1]\n2.5\n</code></pre> <p> Le premier \u00e9l\u00e9ment est \u00e0 l'indice 0.</p> <p>Les positions des \u00e9l\u00e9ments d'un p-uplet peuvent \u00e9galement \u00eatre index\u00e9es avec des nombres n\u00e9gatifs selon le mod\u00e8le suivant :</p> <code>&gt;&gt;&gt; p =</code> <code>(</code> <code>1,</code> <code>2.5,</code> <code>'hello,'</code> <code>True</code> <code>)</code> indice positif 0 1 2 3 indice n\u00e9gatif -4 -3 -2 -1 <p>Les indices n\u00e9gatifs reviennent \u00e0 compter \u00e0 partir de la fin, <code>-1</code> est du raccourci syntaxique<sup>1</sup> pour <code>len(p) - 1</code>. Leur principal avantage est d'acc\u00e9der au dernier \u00e9l\u00e9ment d'un p-uplet \u00e0 l'aide de l'indice <code>-1</code> sans pour autant conna\u00eetre sa longueur. L'avant-dernier \u00e9l\u00e9ment a lui l'indice <code>-2</code>, l'avant-avant dernier l'indice <code>-3</code>, etc.</p> <pre><code>&gt;&gt;&gt; p[-1]\nTrue\n&gt;&gt;&gt; p[-2]\n'hello'\n</code></pre> <p>L'acc\u00e8s \u00e0 une partie d'un p-uplet (une \u00ab tranche \u00bb) se fait sur le mod\u00e8le <code>p[d\u00e9but:fin]</code><sup>2</sup> pour r\u00e9cup\u00e9rer tous les \u00e9l\u00e9ments, entre les positions <code>debut</code> (inclus) et <code>fin</code> (exclu). </p> <pre><code>&gt;&gt;&gt; p[1:2]\n(2.5,)\n&gt;&gt;&gt; p[1:3]\n(2.5, 'hello') \n&gt;&gt;&gt; p[1:-1]\n(2.5, 'hello') \n</code></pre> <p>Lorsqu'aucun indice n'est indiqu\u00e9 \u00e0 gauche ou \u00e0 droite du symbole deux-points, Python prend par d\u00e9faut tous les \u00e9l\u00e9ments depuis le d\u00e9but ou tous les \u00e9l\u00e9ments jusqu'\u00e0 la fin respectivement.</p> <pre><code>&gt;&gt;&gt; p[2:]\n('hello', True)\n&gt;&gt;&gt; p[:2]\n(1, 2.5)\n&gt;&gt;&gt; p[:]\n(1, 2.5, 'hello', True)\n</code></pre> <p>Il est aussi possible de disperser, ou \u00ab d\u00e9baller \u00bb,  un p-uplet en affectant tous ses \u00e9l\u00e9ments dans plusieurs variables :</p> <pre><code>&gt;&gt;&gt; a, b, c, d = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; b\n2.5\n</code></pre> <p>Ce qui pouvait aussi s'\u00e9crire sans parenth\u00e8se : </p> <pre><code>&gt;&gt;&gt; a, b, c, d = 1, 2.5, 'hello', True\n</code></pre> <p>Le mot cl\u00e9 <code>in</code> permet de v\u00e9rifier si un \u00e9l\u00e9ment <code>elem</code> est pr\u00e9sent dans un p-uplet <code>p</code>,  <code>elem in p</code> renvoie un bool\u00e9en :</p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; 'hello' in p\nTrue\n&gt;&gt;&gt; 4 in p\nFalse\n</code></pre> <p>Le mot cl\u00e9 <code>in</code> permet aussi d'\u00e9crire une boucle pour parcourir (ou \u00abit\u00e9rer sur\u00bb) toutes les valeurs d'un p-uplet. </p> <p>Comparons diff\u00e9rentes fa\u00e7ons pour parcourir un p-uplet <code>p</code> :</p> Avec une boucle non born\u00e9e <code>while</code>Avec une boucle born\u00e9e <code>for</code>Avec une boucle born\u00e9e <code>for</code> et le mot cl\u00e9 <code>in</code> <p>Il faut g\u00e9rer l'indice de boucle <code>i</code> pour qu'il parcourt toutes les positions des valeurs de <code>p</code>, c'est-\u00e0-dire l\u2019initialiser \u00e0 <code>0</code> puis l'incr\u00e9menter \u00e0 chaque passage dans la boucle (<code>i = i + 1</code>) jusqu'\u00e0 ce qu'il d\u00e9passe <code>len(p) - 1</code>.  <code>p[i]</code> permet d'acc\u00e9der \u00e0 la valeur du p-uplet qui se trouve \u00e0 la position <code>i</code>.</p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; i = 0\n&gt;&gt;&gt; while i &lt; len(p):\n...     print(p[i])\n...     i = i + 1\n...     \n1\n2.5\n'hello'\nTrue\n</code></pre> <p>Avec <code>for i in range(len(p)):</code>, l'indice de boucle <code>i</code> prend automatiquement les valeurs allant de  <code>0</code> \u00e0 <code>len(p) - 1</code>. <code>p[i]</code> permet d'acc\u00e9der \u00e0 la valeur du p-uplet qui se trouve \u00e0 la position <code>i</code>.</p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; for i in range(len(p)):\n...     print(p[i])\n...     \n1\n2.5\n'hello'\nTrue\n</code></pre> <p><code>for elem in t</code> permet d'acc\u00e9der directement \u00e0 toutes les valeurs du p-uplet les unes apr\u00e8s les autres, sans conna\u00eetre leurs positions.</p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; for elem in p:\n...     print(elem)\n...     \n 1\n2.5\n'hello'\nTrue\n</code></pre> <p>La boucle <code>for elem in p</code> est plus simple pour parcourir les valeurs d'un p-uplet, par exemple pour rechercher la plus petite ou la plus grande valeur dans ce p-uplet, mais elle ne permet pas d'acc\u00e9der \u00e0 sa position. Pour acc\u00e9der \u00e0 la position d'une valeur que l'on recherche, il faut utiliser les boucles sur indices de position <code>while i &lt; len(p):</code> ou <code>for i in range(len(p)):</code>.</p> <p> Un p-uplet est immuable, il est possible d'acc\u00e9der \u00e0 ses \u00e9l\u00e9ments, mais pas de les modifier.</p> <pre><code>&gt;&gt;&gt; p = (1, 2.5, 'hello', True)\n&gt;&gt;&gt; p[1] = 3\nTraceback (innermost last):\nFile \"&lt;stdin&gt;\", line 1, in ?\nTypeError: object doesn't support item assignment\n</code></pre>"},{"location":"types-construits/1-p-uplets/#operations-sur-p-uplets","title":"Op\u00e9rations sur p-uplets","text":"<p>Deux op\u00e9rations sont possibles, l'addition et la multiplication :</p> <ul> <li> <p>L'op\u00e9rateur d'addition \u00ab <code>+</code> \u00bb concat\u00e8ne (assemble) deux p-uplets.</p> </li> <li> <p>L'op\u00e9rateur de multiplication \u00ab <code>*</code>\u00bb entre un nombre entier et un p-uplet duplique (r\u00e9p\u00e8te) plusieurs fois les \u00e9l\u00e9ments dans un nouveau p-uplet. </p> </li> </ul> <pre><code>&gt;&gt;&gt; (1, 2) + (3, 4)\n(1, 2, 3, 4)\n&gt;&gt;&gt; 3 * (1, 2)\n(1, 2, 1, 2, 1, 2)\n</code></pre>"},{"location":"types-construits/1-p-uplets/#fonctions-renvoyant-un-p-uplet","title":"Fonctions renvoyant un p-uplet","text":"<p>Les p-uplets sont tr\u00e8s utiles pour \u00e9crire des fonctions renvoyant plusieurs valeurs en m\u00eame temps :</p> <p><pre><code>from math import pi\n\ndef cercle_info(r):\n    \"\"\" (float) -&gt; (float, float)\n    Renvoie le p-uplet (circonference, aire) d'un cercle de rayon r\n    \"\"\"\n    c = 2 * pi * r\n    a = pi * r**2\n    return c, a\n</code></pre> La derni\u00e8re ligne <code>return c, a</code> peut tout aussi bien s'\u00e9crire <code>return (c, a)</code>, dans les deux cas la fonction renvoie exactement le m\u00eame p-uplet.</p> <p>Appelons maintenant la fonction <code>cercle_info()</code>, par exemple pour avoir la circonf\u00e9rence et l'aire d'un cercle de rayon 10 : <pre><code>&gt;&gt;&gt; cercle_info(10)\n(62.83185307179586, 314.1592653589793)\n</code></pre> La fonction renvoie un p-uplet de deux valeurs, la circonf\u00e9rence et l'aire du cercle, pour n'avoir que l'un des deux il faut acc\u00e9der au premier et au deuxi\u00e8me \u00e9l\u00e9ment du p-uplet :</p> <pre><code>&gt;&gt;&gt; cercle_info(10)[0]            # circonf\u00e9rence d'un cercle de rayon 10\n62.83185307179586\n&gt;&gt;&gt; cercle_info(10)[1]            # aire d'un cercle de rayon 10\n314.1592653589793\n</code></pre> <p>Compl\u00e9tons le programme pr\u00e9c\u00e9dent pour demander \u00e0 l'utilisateur de saisir le rayon du cercle :</p> <pre><code>rayon = float(input('Rayon du cercle ?'))\nprint('La circonf\u00e9rence du cercle est', cercle_info(rayon)[0])\nprint(\"L'aire du cercle est\", cercle_info(rayon)[1])\n</code></pre> <p>Ici <code>cercle_info(rayon)[0])</code> et <code>cercle_info(rayon)[1])</code> permettent de r\u00e9cup\u00e9rer la premi\u00e8re et la seconde valeur du p-uplet renvoy\u00e9 par l'appel de la fonction <code>cercle_info(rayon)</code>.  Ce p-uplet peut aussi \u00eatre dispers\u00e9 dans deux variables, ce qui rend le code plus lisible : </p> <pre><code>rayon = float(input('Rayon du cercle ?'))\nperimetre, aire = cercle_info(rayon)         # disperser le tuple renvoy\u00e9 par cercle_info\nprint('La circonf\u00e9rence du cercle est', perimetre)\nprint(\"L'aire du cercle est\", aire)\n</code></pre>"},{"location":"types-construits/1-p-uplets/#conversion-de-type-cast","title":"Conversion de type (cast)","text":"<p>La fonction <code>tuple()</code>, prend en argument un objet s\u00e9quentiel (une chaine de caract\u00e8re par exemple) et renvoie le p-uplet correspondant :</p> <pre><code>&gt;&gt;&gt; tuple(\"ABCDEF\")\n('A', 'B', 'C', 'D', 'E', 'F')\n&gt;&gt;&gt; tuple(range(10))\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n</code></pre> <ol> <li> <p>appel\u00e9 \u00ab sucre syntaxique \u00bb pour d\u00e9signer un raccourci de syntaxe d'un langage de programmation facilitant sa lecture.\u00a0\u21a9</p> </li> <li> <p>Il est aussi possible de pr\u00e9ciser un <code>pas</code> sur le mod\u00e8le <code>p[d\u00e9but:fin:pas]</code>.\u00a0\u21a9</p> </li> <li> <p>ou immutable en anglais.\u00a0\u21a9</p> </li> </ol>"},{"location":"types-construits/2-tableaux/","title":"Tableaux (type <code>list</code>)","text":"<p>Cours</p> <p>Un tableau est une suite ordonn\u00e9e d'\u00e9l\u00e9ments qui peuvent \u00eatre modifi\u00e9s (muables<sup>8</sup>).</p> <p>En Python les tableaux sont du type <code>list</code><sup>9</sup>.</p>"},{"location":"types-construits/2-tableaux/#creation","title":"Cr\u00e9ation","text":"<p>Un tableau est d\u00e9clar\u00e9 par une s\u00e9rie de valeurs s\u00e9par\u00e9es par des virgules, et le tout encadr\u00e9 par des crochets \u201c<code>[ ]</code>\u201d. Il contient des \u00e9l\u00e9ments du m\u00eame type (selon le programme de 1ere<sup>1</sup>)  .</p> <pre><code>&gt;&gt;&gt; t = [1, 2, 3, 4]\n&gt;&gt;&gt; t\n[1, 2, 3, 4]\n&gt;&gt;&gt; type(t)\n&lt;class 'list'&gt;\n</code></pre> <p> Comme pour les p-uplets, ne pas confondre la virgule de s\u00e9parateur d'\u00e9l\u00e9ments avec le point de s\u00e9parateur d\u00e9cimal.</p> <p>Il est possible de cr\u00e9er un tableau vide :</p> <pre><code>t_vide = []      # Creation d'un tableau vide\n</code></pre> <p>ou un tableau contenant un seul \u00e9l\u00e9ment :</p> <pre><code>t_1_elem = [5] # Creation d'un tableau avec un seul element\n</code></pre>"},{"location":"types-construits/2-tableaux/#fonction-len","title":"Fonction <code>len()</code>","text":"<p>La fonction <code>len()</code> renvoie la longueur d'un tableau, c'est-\u00e0-dire le nombre d'\u00e9l\u00e9ments qu'il contient.</p> <pre><code>&gt;&gt;&gt; animaux = ['girafe', 'tigre', 'singe', 'souris']\n&gt;&gt;&gt; len(animaux)\n4\n&gt;&gt;&gt; len([1, 2, 3, 4, 5, 6, 7, 8])\n8\n</code></pre>"},{"location":"types-construits/2-tableaux/#acces-aux-elements","title":"Acc\u00e8s aux \u00e9l\u00e9ments","text":"<p>Comme pour les chaines de caract\u00e8res et les p-uplets, les \u00e9l\u00e9ments d'un tableau <code>t</code> sont index\u00e9s \u00e0 partir de <code>0</code> jusqu'\u00e0 <code>len(t)</code> exclus, c'est-\u00e0-dire le dernier \u00e9l\u00e9ment est en position <code>len(t) - 1</code>. Il est possible d\u2019acc\u00e9der aux \u00e9l\u00e9ments par leur index entre crochets. </p> <pre><code>&gt;&gt;&gt; t = ['a', 'b', 'c', 'd', 'e', 'f']\n&gt;&gt;&gt; t[1]\n'b'\n</code></pre> <p> Le premier \u00e9l\u00e9ment est \u00e0 l'index 0.</p> <p>Comme pour les p-uplets, on peut utiliser des indices n\u00e9gatifs, le dernier \u00e9l\u00e9ment \u00e0 l'indice <code>-1</code>, l'avant-dernier <code>-2</code>, etc.</p> <pre><code>&gt;&gt;&gt; t = ['a', 'b', 'c', 'd', 'e', 'f']\n&gt;&gt;&gt; t[-1]\n'f'\n&gt;&gt;&gt; t[-3]\n'd'\n</code></pre> <p>L'acc\u00e8s \u00e0 une partie d'un tableau (une \u00ab tranche \u00bb) se fait sur le mod\u00e8le <code>t[d\u00e9but:fin]</code> <sup>2</sup> pour r\u00e9cup\u00e9rer tous les \u00e9l\u00e9ments, entre les positions <code>debut</code> (inclus) et <code>fin</code> (exclu). </p> <pre><code>&gt;&gt;&gt; t = ['a', 'b', 'c', 'd', 'e', 'f']\n&gt;&gt;&gt; t[1:3]\n['b', 'c']\n&gt;&gt;&gt; t[1:-2]\n['b', 'c', 'd']\n</code></pre> <p>Lorsqu'aucun indice n'est indiqu\u00e9 \u00e0 gauche ou \u00e0 droite du symbole deux-points, Python prend par d\u00e9faut tous les \u00e9l\u00e9ments depuis le d\u00e9but ou tous les \u00e9l\u00e9ments jusqu'\u00e0 la fin respectivement.</p> <pre><code>&gt;&gt;&gt; t = ['a', 'b', 'c', 'd', 'e', 'f']\n&gt;&gt;&gt; t[1:]\n['b', 'c', 'd', 'e', 'f']\n&gt;&gt;&gt; t[:2]\n['a', 'b']\n&gt;&gt;&gt; t[:]\n['a', 'b', 'c', 'd', 'e', 'f']\n</code></pre> <p>Il est aussi possible de disperser, ou \u00ab d\u00e9baller \u00bb, un tableau en affectant tous ses \u00e9l\u00e9ments dans plusieurs variables :</p> <p><pre><code>&gt;&gt;&gt; a, b, c, d = [1, 2, 3, 4]\n&gt;&gt;&gt; a\n1\n</code></pre> Le mot cl\u00e9 <code>in</code> permet de v\u00e9rifier si un \u00e9l\u00e9ment <code>elem</code> est pr\u00e9sent dans un tableau <code>t</code>,  <code>elem in t</code> renvoie un bool\u00e9en :</p> <pre><code>&gt;&gt;&gt; t = [1, 3 ,8]\n&gt;&gt;&gt; 3 in t\nTrue\n&gt;&gt;&gt; 4 in t\nFalse\n</code></pre> <p>De fa\u00e7on tr\u00e8s similaire aux p-uplets, le mot cl\u00e9 <code>in</code> permet aussi d'\u00e9crire une boucle pour parcourir (ou \u00abit\u00e9rer\u00bb) toutes les valeurs d'un tableau. Comparons \u00e0 nouveau diff\u00e9rentes m\u00e9thodes pour parcourir un tableau <code>t</code> :</p> Avec une boucle non born\u00e9e <code>while</code>Avec une boucle born\u00e9e <code>for</code>Avec une boucle born\u00e9e <code>for</code> et le mot cl\u00e9 <code>in</code> <p>Il faut g\u00e9rer l'indice de boucle <code>i</code> pour qu'il parcourt toutes les positions des valeurs de <code>t</code>, c'est-\u00e0-dire l'initialiser \u00e0 <code>0</code> puis l'incr\u00e9menter \u00e0 chaque passage dans la boucle (<code>i = i + 1</code>) jusqu'\u00e0 ce qu'il d\u00e9passe <code>len(t) - 1</code>.  <code>t[i]</code> permet d'acc\u00e9der \u00e0 la valeur du tableau qui se trouve \u00e0 la position <code>i</code>.</p> <pre><code>&gt;&gt;&gt; t = [1, 3, 8]\n&gt;&gt;&gt; i = 0\n&gt;&gt;&gt; while i &lt; len(t):\n...     print(t[i])\n...     i = i + 1\n...     \n1\n3\n8\n</code></pre> <p>Avec <code>for i in range(len(t)):</code>, l'indice de boucle <code>i</code> prend automatiquement les valeurs allant de  <code>0</code> \u00e0 <code>len(t) - 1</code>. <code>t[i]</code> permet d'acc\u00e9der \u00e0 la valeur du p-uplet qui se trouve \u00e0 la position <code>i</code>.</p> <pre><code>&gt;&gt;&gt; t = [1, 3, 8]\n&gt;&gt;&gt; for i in range(len(t)):\n...     print(t[i])\n...     \n1\n3\n8\n</code></pre> <p><code>for elem in t</code> permet d'acc\u00e9der directement \u00e0 toutes les du tableau les unes apr\u00e8s les autres, sans conna\u00eetre leurs positions.</p> <pre><code>&gt;&gt;&gt; t = [1, 3, 8]\n&gt;&gt;&gt; for elem in t:\n...     print(elem)\n...     \n1\n3\n8\n</code></pre> <p>La boucle <code>for elem in t</code> est plus simple pour parcourir les valeurs d'un tableau, par exemple pour rechercher la plus petite ou la plus grande valeur dans ce tableau, mais elle ne permet pas d'acc\u00e9der \u00e0 sa position. Pour acc\u00e9der \u00e0 la position d'une valeur que l'on recherche, il faut utiliser les deux autres m\u00e9thodes.</p>"},{"location":"types-construits/2-tableaux/#modifier-un-tableau","title":"Modifier un tableau","text":""},{"location":"types-construits/2-tableaux/#modifier-un-element","title":"Modifier un \u00e9l\u00e9ment","text":"<p>\u00c0 la diff\u00e9rence des chaines de caract\u00e8res et p-uplets, il est possible de modifier la valeur d'un \u00e9l\u00e9ment dans un tableau :</p> <pre><code>&gt;&gt;&gt; animaux = ['girafe', 'tigre', 'singe', 'souris']\n&gt;&gt;&gt; animaux[2]= \"lion\"\n&gt;&gt;&gt; animaux\n['girafe', 'tigre', 'lion', 'souris']\n</code></pre>"},{"location":"types-construits/2-tableaux/#operations-sur-tableaux","title":"Op\u00e9rations sur tableaux","text":"<p>Deux op\u00e9rations sont possibles, l'addition et la multiplication :</p> <ul> <li> <p>L'op\u00e9rateur d'addition \u00ab <code>+</code> \u00bb concat\u00e8ne (assemble) deux tableaux.</p> </li> <li> <p>L'op\u00e9rateur de multiplication \u00ab <code>*</code>\u00bb entre un nombre entier et une tableau duplique (r\u00e9p\u00e8te) plusieurs fois les \u00e9l\u00e9ments dans un nouveau tableau. </p> </li> </ul> <pre><code>&gt;&gt;&gt; [1, 2] + [3, 4]\n[1, 2, 3, 4]\n&gt;&gt;&gt; 3 * [1, 2]\n[1, 2, 1, 2, 1, 2]\n</code></pre>"},{"location":"types-construits/2-tableaux/#ajouter-de-nouveaux-elements","title":"Ajouter de nouveaux \u00e9l\u00e9ments","text":"<p>Il existe plusieurs m\u00e9thodes pour ajouter des \u00e9l\u00e9ments \u00e0 un tableau <code>t</code>:</p> <ul> <li> <p><code>t.append(x)</code> ajoute un \u00e9l\u00e9ment <code>x</code> \u00e0 la fin d'un tableau <code>t</code>.   <pre><code>&gt;&gt;&gt; t = [1, 2, 3]\n&gt;&gt;&gt; t.append(4)\n&gt;&gt;&gt; t\n[1, 2, 3, 4]\n</code></pre></p> </li> <li> <p><code>t.insert(i, x)</code> ins\u00e8re un \u00e9l\u00e9ment <code>x</code> \u00e0 la position donn\u00e9e par l'indice <code>i</code>. <code>i</code> est la position de l'\u00e9l\u00e9ment courant avant lequel l'insertion doit s'effectuer.    <pre><code>&gt;&gt;&gt; t = ['a', 'b', 'd']\n&gt;&gt;&gt; t.insert(2, 'c')\n&gt;&gt;&gt; t\n['a', 'b', 'c', 'd']\n</code></pre></p> </li> <li> <p><code>t.extend(autretableau)</code> \u00e9tend un tableau <code>t</code> en lui ajoutant tous les \u00e9l\u00e9ments de <code>autretableau</code>.    <pre><code>&gt;&gt;&gt; t = [1, 2, 3]\n&gt;&gt;&gt; t.extend([4, 5, 6])\n&gt;&gt;&gt; t\n[1, 2, 3, 4, 5, 6]\n</code></pre></p> </li> </ul> <p> Ne pas confondre <code>append</code> (ajouter un \u00e9l\u00e9ment) et <code>extend</code> (\u00e9tendre un tableau). Si on utilise <code>append</code> avec un tableau on obtient un tableau de tableaux !    <pre><code>&gt;&gt;&gt; t.append([4, 5, 6])\n&gt;&gt;&gt; t\n[1, 2, 3, [4, 5, 6]]\n</code></pre></p>"},{"location":"types-construits/2-tableaux/#supprimer-des-elements","title":"Supprimer des \u00e9l\u00e9ments","text":"<p>Il existe plusieurs m\u00e9thodes pour supprimer des \u00e9l\u00e9ments \u00e0 un tableau <code>t</code>:</p> <ul> <li> <p><code>t.remove(x)</code> supprime le premier \u00e9l\u00e9ment dont la valeur est \u00e9gale \u00e0 <code>x</code>. Si le tableau  contient plusieurs fois la valeur <code>x</code>, seule la premi\u00e8re occurrence trouv\u00e9e est supprim\u00e9e :</p> <pre><code>&gt;&gt;&gt; t = [12, 13, 14, 15]\n&gt;&gt;&gt; t.remove(13)\n&gt;&gt;&gt; t\n[12, 14, 15]\n</code></pre> </li> <li> <p><code>t.pop(i)</code> supprime l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la position <code>i</code> et le renvoie en valeur de retour. Si aucune position n'est sp\u00e9cifi\u00e9e, <code>t.pop()</code> supprime et renvoie le dernier \u00e9l\u00e9ment du tableau :</p> <pre><code>&gt;&gt;&gt; t = ['a', 'b', 'c', 'd', 'e']\n&gt;&gt;&gt; t.pop()\n'e'\n&gt;&gt;&gt; t\n['a', 'b', 'c', 'd']\n</code></pre> </li> <li> <p>L'instruction <code>del</code><sup>10</sup>  permet aussi de supprimer un \u00e9l\u00e9ment du tableau :     <pre><code>&gt;&gt;&gt; t = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; del t[3]\n&gt;&gt;&gt; t\n[1, 2, 3, 5]    \n</code></pre>     Ou encore le tableau entier avec l'instruction <code>del t</code>, alors la variable <code>t</code> n'existe plus.</p> <pre><code>&gt;&gt;&gt; del t\n&gt;&gt;&gt; t\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  NameError: name ' tu ' is not defined\n</code></pre> </li> </ul>"},{"location":"types-construits/2-tableaux/#dautres-methodes-bien-utiles","title":"D'autres m\u00e9thodes bien utiles","text":"<p>Deux m\u00e9thodes pour trier un tableau :</p> <ul> <li> <p><code>t.sort()</code> ordonne les \u00e9l\u00e9ments dans le tableau.     <pre><code>&gt;&gt;&gt; t = [5, 8, 2, 1]\n&gt;&gt;&gt; t.sort()\n&gt;&gt;&gt; t\n[1, 2, 5, 8]\n</code></pre></p> </li> <li> <p><code>t.reverse()</code> inverse l'ordre des \u00e9l\u00e9ments du tableau.     <pre><code>&gt;&gt;&gt; t.reverse()\n&gt;&gt;&gt; t\n[8, 5, 2, 1]\n</code></pre></p> </li> </ul> <p>Pour trouver un \u00e9l\u00e9ment dans un tableau :</p> <ul> <li> <p><code>t.index(x)</code> renvoie la position du premier \u00e9l\u00e9ment du tableau dont la valeur \u00e9gale <code>x</code>.     <pre><code>&gt;&gt;&gt; t = [5, 0, 3, 2, 8, 6]\n&gt;&gt;&gt; t.index(2)\n3\n&gt;&gt;&gt; ['a', 'c', 'd', 'e'].index('c')\n1\n</code></pre></p> </li> <li> <p><code>t.count(x)</code>  renvoie le nombre d'\u00e9l\u00e9ments ayant la valeur <code>x</code> dans le tableau.     <pre><code>&gt;&gt;&gt; [1, 1, 2, 2, 2, 3, 4, 4, 3].count(3)\n2\n</code></pre></p> </li> </ul> <p>Enfin, <code>dir(list)</code> permet d'obtenir la liste exhaustive des m\u00e9thodes disponibles pour les tableaux.</p> <p>Les m\u00e9thodes telles que <code>insert()</code>, <code>remove()</code> ou <code>sort()</code>, qui ne font que modifier le tableau, ne renvoient pas de valeur (ou plut\u00f4t elles renvoient <code>None</code>).</p>"},{"location":"types-construits/2-tableaux/#conversion-de-type-cast","title":"Conversion de type (cast)","text":"<p>Comme la fonction <code>tuple()</code>, la fonction <code>list()</code> prend en argument un objet s\u00e9quentiel (une chaine de caract\u00e8re par exemple) et renvoie le tableau correspondant :</p> <pre><code>&gt;&gt;&gt; list('abc')\n['a', 'b', 'c']\n&gt;&gt;&gt; list((1, 2, 3))\n[1, 2, 3]\n</code></pre> <p>On peut cr\u00e9er un tableau vide avec la fonction list() sans argument. <pre><code>t_vide = list()  \n</code></pre></p> <p>Nous avons d\u00e9j\u00e0 vu l'utilisation de la fonction <code>range()</code> . Lorsqu'elle est utilis\u00e9e en combinaison avec la fonction list(), on obtient une tableau d'entiers. Par exemple :</p> <pre><code>&gt;&gt;&gt; list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>La m\u00e9thode <code>.split()</code> permet de d\u00e9couper une cha\u00eene en tableau avec un s\u00e9parateur  : <code>chaine.split(separateur)</code>.</p> <pre><code>&gt;&gt;&gt; chaine = 'Bonjour tout le monde !'\n&gt;&gt;&gt; chaine.split(' ')\n['Bonjour', 'tout', 'le', 'monde', '!']\n</code></pre> <p>R\u00e9ciproquement la m\u00e9thode <code>.join()</code> permet de convertir un tableau en cha\u00eene de caract\u00e8res en ins\u00e9rant le param\u00e8tre entre les \u00e9l\u00e9ments du tableau: `elementSeparateur.join(t)```.</p> <pre><code>&gt;&gt;&gt; t = ['Bonjour', 'tout', 'le', 'monde', '!']\n&gt;&gt;&gt; ' '.join(t)\n'Bonjour tout le monde !'\n</code></pre>"},{"location":"types-construits/2-tableaux/#creation-par-comprehension","title":"Cr\u00e9ation par compr\u00e9hension","text":"<p>Il est possible de cr\u00e9er un tableau par compr\u00e9hension en utilisant l'une de ces syntaxes :</p> <ul> <li> <p>avec une expression sur les valeurs dans un <code>ancien_tableau</code> ou d'une fonction <code>range</code> :      <pre><code>nouveau_tableau = [expression(i) for i in ancien_tableau]\nnouveau_tableau = [expression(i) for i in range(...)]\n</code></pre></p> <p>Exemple : <pre><code>&gt;&gt;&gt; carres = []\n&gt;&gt;&gt; for x in range(10):\n...     carres.append(x**2)\n&gt;&gt;&gt; carres\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81\n</code></pre> est equivalent \u00e0 : <pre><code>&gt;&gt;&gt; carres = [x**2 for x in range(10)]\n&gt;&gt;&gt; carres\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre> ou avec un autre tableau :  <pre><code>&gt;&gt;&gt; mult_3 = [3 * i for i in [1, 2, 3]]\n&gt;&gt;&gt; mult_3\n[3, 6, 9]\n&gt;&gt;&gt; mult_ = [3 * i for i in [1, 2, 3]]\n&gt;&gt;&gt; mult_3\n[3, 6, 9]\n</code></pre></p> </li> <li> <p>avec une fonction : <code>nouveau_tableau = [f(x) for x in ... ]</code></p> <p>Exemple : </p> <pre><code>&gt;&gt;&gt; def f(x):\n...     return 2*x + 3\n&gt;&gt;&gt; absisses = [1, 2, 3, 5, 10]\n&gt;&gt;&gt; ordonnees = [f(x) for x in absisses]\n&gt;&gt;&gt; ordonnees\n[5, 7, 9, 13, 23]\n</code></pre> </li> <li> <p>avec une condition <code>if</code> : <code>nouveau_tableau = [expression(i) for i in ... if condition]</code></p> <p>Exemple :  <pre><code>&gt;&gt;&gt; carre_mult_3 = [x**2 for x in range(10) if x%3 == 0]\n&gt;&gt;&gt; carre_mult_3\n[0, 9, 36, 81]\n</code></pre></p> </li> <li> <p>avec une condition <code>if...else</code> : <code>nouveau_tableau = [expression(i) if condition else autre_expression(i) for i in ...]</code>     (attention l'ordre est diff\u00e9rent)</p> <p>Exemple :</p> <pre><code>&gt;&gt;&gt; carre_mult_3_or_0 = [x**2 if x%3 == 0 else 0 for x in range(10)] \n&gt;&gt;&gt; carre_mult_3_or_0\n[0, 0, 0, 9, 0, 0, 36, 0, 0, 81]\n</code></pre> </li> <li> <p>avec plusieurs param\u00e8tres  : <code>nouveau_tableau = [expression(i, j) for i in ... for j in ... if condition]</code></p> <p>Exemples:  <pre><code>&gt;&gt;&gt; [x + y for x in [10, 30, 50] for y in [20, 40, 60]]\n[30, 50, 70, 50, 70, 90, 70, 90, 110]\n</code></pre> </p> </li> </ul> <p>Pour finir, il est tout \u00e0 fait possible de construire des tableaux de p-uplets ou des tableaux de tableaux. Cette fonctionnalit\u00e9 peut parfois \u00eatre tr\u00e8s pratique.</p>"},{"location":"types-construits/2-tableaux/#tableaux-de-tableaux","title":"Tableaux de tableaux","text":""},{"location":"types-construits/2-tableaux/#creation-dun-tableau-de-tableaux","title":"Cr\u00e9ation d'un tableau de tableaux","text":"<p>On peut cr\u00e9er un tableau qui contient des tableaux : <pre><code>&gt;&gt;&gt; t0 = [0, 0, 0]\n&gt;&gt;&gt; t1 = [1, 1, 1]\n&gt;&gt;&gt; t2 = [2, 2, 2]\n&gt;&gt;&gt; t = [t0, t1, t2]\n&gt;&gt;&gt; t\n[[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n</code></pre></p> <p>Il \u00e9tait possible d'\u00e9crire directement : <pre><code>&gt;&gt;&gt; t = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n&gt;&gt;&gt; t\n[[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n</code></pre></p> <p>Il est aussi possible de construire le tableau de tableaux ligne par ligne.</p> <pre><code>&gt;&gt;&gt; t = []\n&gt;&gt;&gt; for i in range(3):\n...     t_i = [i for j in range (3)]\n...     t.append(t_i)\n...     \n&gt;&gt;&gt; t\n[[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n</code></pre> <p>Ou par compr\u00e9hension. <pre><code>&gt;&gt;&gt; t = [[i for j in range (3)] for i in range(3)]\n&gt;&gt;&gt; t\n[[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n</code></pre></p> <p>par exemple, cette compr\u00e9hension de tableaux combine les \u00e9l\u00e9ments de deux tableaux  s'ils ne sont pas \u00e9gaux : <pre><code>&gt;&gt;&gt; table = [[x, y] for x in [1, 2, 3] for y in [3, 1, 4] if x != y]\n&gt;&gt;&gt; table\n[[1, 3], [1, 4], [2, 3], [2, 1], [2, 4], [3, 1], [3, 4]]\n</code></pre></p> <p>Exercice corrig\u00e9</p> <p>Construire le tableau de tableaux suivant par compr\u00e9hension :</p> <pre><code>[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],\n [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],\n [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]] \n</code></pre> R\u00e9ponse <p><pre><code>T = []\nfor i in range(10):\n    T.append([j + 10*i for j in range(10)])\n</code></pre> ou alors <pre><code>T = [[j + 10*i for j in range (10)] for i in range(10)]\n</code></pre></p>"},{"location":"types-construits/2-tableaux/#acces-aux-elements_1","title":"Acc\u00e8s aux \u00e9l\u00e9ments","text":"<p>Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment du tableau de tableaux, on utilise l'indi\u00e7age habituel :</p> <pre><code>&gt;&gt;&gt; t = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n&gt;&gt;&gt; t[1]\n[4, 5, 6]\n</code></pre> <p>Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment d'un sous-tableau, on utilise un double indi\u00e7age : <pre><code>&gt;&gt;&gt; t[1][2]\n6\n&gt;&gt;&gt; t[2][1]\n8\n</code></pre></p> <p>Dans le cas d'un tableau de tableaux avec des sous-tableaux de m\u00eame taille, on parle parfois de matrice. </p> <p>On dit que cette matrice a 2 dimensions et est de taille 3 x 3. Les \u00e9l\u00e9ments sont donc identifi\u00e9s par <code>t[no de ligne][no de colonne]</code>.</p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire une fonction <code>lucas(a, b, c)</code> prenant en param\u00e8tres 3 entiers relatifs <code>a</code>, <code>b</code> et <code>c</code> , v\u00e9rifie par asserts que  <code>0 &lt; a &lt; b &lt; c \u2013 a</code> et <code>b \u2260 2a</code> puis renvoie le carr\u00e9 magique 3x3 en utilisant la m\u00e9thode d\u2019\u00c9douard Lucas sous forme d'un tableau de tableaux :</p> c + a c \u2013 a \u2013 b c + b c \u2013 a + b c c + a \u2013 b c \u2013 b c + a + b c \u2013 a <p>\u00ab  En math\u00e9matiques, un carr\u00e9 magique d'ordre n est compos\u00e9 de \\(n^2\\) entiers strictement positifs, \u00e9crits sous la forme d'un tableau carr\u00e9. Ces nombres sont dispos\u00e9s de sorte que leurs sommes sur chaque rang\u00e9e, sur chaque colonne et sur chaque diagonale principale soient \u00e9gales. \u00bb source : https://fr.wikipedia.org/wiki/Carr\u00e9_magique_(math\u00e9matiques) </p> R\u00e9ponse <pre><code>def lucas(a, b, c):\n    '''(int, int, int) -&gt; [[int]]\n    Renvoie un carr\u00e9 magique 3 x 3 en utilisant la formule de lucas\n    '''\n    assert 0 &lt; a &lt; b &lt; c - a and b!= 2*a, 'a, b et c ne sont pas valides'\n    return [[c + a, c - a - b, c + b],\n            [c - a + b, c, c + a - b],\n            [c - b, c + a + b, c - a]]\n</code></pre> <p>Exercice corrig\u00e9</p> <p>\u00c9crire une fonction qui v\u00e9rifie qu'un carr\u00e9 est magique (ou pas). \u00ab  En math\u00e9matiques, un carr\u00e9 magique d'ordre \\(n\\) est compos\u00e9 de \\(n^2\\) entiers strictement positifs, \u00e9crits sous la forme d'un tableau carr\u00e9. Ces nombres sont dispos\u00e9s de sorte que leurs sommes sur chaque rang\u00e9e, sur chaque colonne et sur chaque diagonale principale soient \u00e9gales. \u00bb source : https://fr.wikipedia.org/wiki/Carr\u00e9_magique_(math\u00e9matiques) </p> R\u00e9ponse <pre><code>def est_magique(m):\n    '''[[int]] -&gt; bool\n    Renvoie True si m est un carr\u00e9 magique, False sinon\n    '''\n\n    taille=len(m)\n\n    # calcule la somme sur la diagonale\n    diag = 0\n    for line in range(taille):\n        diag = diag + m[line][line]\n\n    # v\u00e9rifie les lignes\n    for line in range(taille):\n        somme = 0\n        for col in range(taille):\n            somme = somme + m[line][col]\n        if somme != diag:\n            return False\n\n    #v\u00e9rifie les colonnes\n    for col in range(taille):\n        somme = 0\n        for line in range(taille):\n            somme = somme + m[line][col]\n        if somme !=diag:\n            return False\n\n    # si on arrive ici, c'est que m est un carre est magique\n    return True\n\n\nc1 = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\nassert est_magique(c1)\n\nc2 = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert est_magique(c2)\n\nc3 = [[2, 7, 6], [9, 5, 1], [4, 3, 7]]\nassert not est_magique(c3)\n</code></pre>"},{"location":"types-construits/2-tableaux/#tableaux-muables","title":"Tableaux muables","text":"<p>Les tableaux sont muables c'est-\u00e0-dire qu'on peut modifier chaque \u00e9l\u00e9ment d'un tableau individuellement, supprimer ou ajouter des \u00e9l\u00e9ments. Mais on peut aussi modifier les variables de type <code>int</code>, <code>float</code>, <code>tuple</code>, <code>str</code> ou <code>bool</code> pourtant dit \u00ab  immuables \u00bb, alors qu'elle est la diff\u00e9rence ? </p> <p>Observons la diff\u00e9rence quand on modifie la valeur d'une variable en utilisant la fonction <code>id()</code> qui renvoie l'identifiant de la variable en m\u00e9moire.</p> avec une variable de type \"immuable\"avec une variable de type \"muable\" <p><pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; id(a)\n2366593132848\n&gt;&gt;&gt; a = a + 1\n&gt;&gt;&gt; id(a)\n2366593132880\n</code></pre> Une nouvelle variable <code>a</code> est cr\u00e9\u00e9e en m\u00e9moire quand on change sa valeur.   </p> <pre><code>&gt;&gt;&gt; t = [1]\n&gt;&gt;&gt; id(t)\n2366637916800\n&gt;&gt;&gt; t.append(2)\n&gt;&gt;&gt; id(t)\n2366637916800\n</code></pre> <p>C'est la m\u00eame variable <code>t</code> qui reste en m\u00e9moire avec une valeur diff\u00e9rente.</p>"},{"location":"types-construits/2-tableaux/#copie-de-tableau","title":"Copie de tableau","text":"<p>Comparons ce qu'il se passe quand on copie une variable immuable, par exemple de type <code>int</code>, et une variable de type <code>list</code> muable.</p> avec une variable de type \"immuable\"avec une variable de type \"muable\" <p><pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; b = a\n</code></pre> Modifions <code>b</code>. <pre><code>&gt;&gt;&gt; b = 2\n&gt;&gt;&gt; b\n2\n</code></pre></p> <p>Qu'est-il arriv\u00e9 \u00e0 <code>a</code> ? <pre><code>&gt;&gt;&gt; a\n1\n</code></pre> <code>a</code> n'a pas chang\u00e9.</p> <pre><code>&gt;&gt;&gt; t = [1, 2, 3]\n&gt;&gt;&gt; u = t\n</code></pre> <p>Modifions <code>u</code>.</p> <pre><code>&gt;&gt;&gt; u[2] = 4\n&gt;&gt;&gt; u\n[1, 2, 4]\n</code></pre> <p>Qu'est-il arriv\u00e9 \u00e0 <code>t</code> ?</p> <pre><code>&gt;&gt;&gt; t\n[1, 2, 4]\n</code></pre> <p><code>t</code> a aussi \u00e9t\u00e9 modifi\u00e9 quand on a modifi\u00e9 <code>u</code> !</p> <p>Les deux variables <code>t</code> et <code>u</code> ne sont pas deux objets diff\u00e9rents mais deux noms qui font r\u00e9f\u00e9rence au m\u00eame objet en m\u00e9moire.  Pour s'en convaincre on peut v\u00e9rifier les adresses des variables</p> avec une variable de type \"immuable\"avec une variable de type \"muable\" <pre><code>&gt;&gt;&gt; id(a)\n2366593132848\n&gt;&gt;&gt; id(b)\n2366593132880\n</code></pre> <p><code>a</code> et <code>b</code> sont bien deux variables diff\u00e9rentes.    </p> <p><pre><code>&gt;&gt;&gt; id(t)\n2366638078720\n&gt;&gt;&gt; id(u)\n2366638078720\n</code></pre> <code>t</code> et <code>u</code>  sont deux noms pour la m\u00eame variable.</p> <p>Pour copier un tableau , il faut cr\u00e9er une copie explicite du tableau initial.  Cela peut se faire de plusieurs mani\u00e8res<sup>3</sup> :</p> <ul> <li> <p>Avec <code>t[:]</code> qui cr\u00e9\u00e9 une copie des donn\u00e9es du tableau <code>t</code> (en opposition \u00e0 une copie du tableau <code>t</code>) : <pre><code>&gt;&gt;&gt; t = [1, 2, 3]\n&gt;&gt;&gt; u = t[:]\n</code></pre></p> </li> <li> <p>Avec  la fonction <code>list(t)</code> qui renvoie un tableau form\u00e9 des \u00e9l\u00e9ments de la variable <code>t</code>: <pre><code>&gt;&gt;&gt; u = list(t)\n</code></pre></p> </li> <li> <p>Ou encore utiliser la m\u00e9thode <code>.copy()</code> : <pre><code>&gt;&gt;&gt; u = t.copy()\n</code></pre> </p> </li> </ul>"},{"location":"types-construits/2-tableaux/#tableau-passe-en-parametre-de-fonction","title":"Tableau pass\u00e9 en param\u00e8tre de fonction","text":"<p>Passer des arguments \u00e0 une fonction d'un type muable comme <code>list</code><sup>4</sup> g\u00e9n\u00e8re des effets de bord<sup>5</sup> . </p> <p>Nous avons vu pr\u00e9c\u00e9demment qu'une fonction ne modifie pas la valeur d'une variable pass\u00e9e en param\u00e8tre en dehors de son ex\u00e9cution, les param\u00e8tres sont pass\u00e9s par valeur.  C'est en effet le cas avec des variables de type immuable mais ce n'est pas le cas pour les variables de type muable comme le type <code>lis</code>t. Dans ce cas, la fonction re\u00e7oit l'adresse en m\u00e9moire de la variable pass\u00e9e en argument et peut donc en modifier le contenu.</p> <p>Illustrons cela des fonctions <code>f(x)</code> et <code>g(x)</code> qui modifient simplement la valeur d'un param\u00e8tre <code>x</code>. </p> avec une variable de type \"immuable\"avec une variable de type \"muable\" <pre><code>def f(x):\n    x = 2   \n</code></pre> <pre><code>def g(x):\n    x.append(2)\n</code></pre> <p>Appelons ces fonctions en passant des variables <code>a</code> et <code>t</code> en param\u00e8tre <sup>6</sup>: </p> avec une variable de type \"immuable\"avec une variable de type \"muable\" <p><pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; f(a)\n&gt;&gt;&gt; a\n1 \n</code></pre> La valeur de <code>a</code> n'a pas \u00e9t\u00e9 modifi\u00e9e par la fonction <code>f</code>.</p> <pre><code>&gt;&gt;&gt; t = [1]\n&gt;&gt;&gt; g(t)\n&gt;&gt;&gt; t\n[1 ,2]\n</code></pre> <p>La valeur de <code>t</code> a \u00e9t\u00e9 modifi\u00e9e par la fonction <code>g</code> !</p>"},{"location":"types-construits/2-tableaux/#autres-effets","title":"Autres effets","text":"<p>On peut initialiser un tableau avec une valeur par d\u00e9faut pour tous les \u00e9l\u00e9ments, par exemple des z\u00e9ros, avec </p> <pre><code>&gt;&gt;&gt; t = [0] * 3\n&gt;&gt;&gt; t\n[0, 0, 0]\n</code></pre> <p>Mais attention \u00e0 ne pas utiliser cette m\u00e9thode pour des tableaux de tableaux : <pre><code>&gt;&gt;&gt; t = [[0] * 3] * 3\n&gt;&gt;&gt; t\n[[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n&gt;&gt;&gt; t[0][0] = 1\n&gt;&gt;&gt; t\n[[1, 0, 0], [1, 0, 0], [1, 0, 0]]\n</code></pre></p> <p>On pr\u00e9f\u00e8rera donc :  <code>t = [0 for i in range(3)]</code>  et    <code>t = [[0 for i in range(3)] for i in range(3)]</code></p> <p>De la m\u00eame fa\u00e7on, on ne doit pas d\u00e9finir une valeur par d\u00e9faut de param\u00e8tre de fonction avec un tableau de type <code>list</code><sup>7</sup>, par exemple dans la fonction suivante :  </p> <pre><code>def ajouter(a, L = []):\n    L.append(a)\n    return L\n</code></pre> <p>La valeur par d\u00e9faut n'est \u00e9valu\u00e9e qu'une seule fois puis la fonction accumule les arguments au fil des appels : <pre><code>&gt;&gt;&gt; M = ajouter(1)\n&gt;&gt;&gt; M\n[1]\n&gt;&gt;&gt; N = ajouter(2)\n&gt;&gt;&gt; N\n[1, 2]\n</code></pre></p> <p>Pour finir, il revient au m\u00eame de faire par exemple <code>n += 1</code> et <code>n = n + 1</code> pour des entiers mais par pour des tableaux. Comparons :  <pre><code>def f(L, n) :\n    for k in range(n) :\n        L += [k]  # equivalent \u00e0 L.append(), modifie la valeur de l'argument L  \n\ndef g(L, n) :\n    for k in range(n) :\n        L = L + [k]   # cr\u00e9e une nouvelle variable 'locale' L et ne modifie par l'argument L\n</code></pre></p> <ol> <li> <p>Le type <code>list</code> de Python offre plus de possibilit\u00e9 qu'un tableau et notamment peut contenir des \u00e9l\u00e9ments de types diff\u00e9rents (y compris d'autres tableaux).\u00a0\u21a9</p> </li> <li> <p>Il est aussi possible de pr\u00e9ciser un <code>pas</code> sur le mod\u00e8le <code>t[d\u00e9but:fin:pas]</code>.\u00a0\u21a9</p> </li> <li> <p>Aucune de ces approches ne fonctionne pour un tableau de tableaux, il faut par exemple utiliser la m\u00e9thode <code>.deepcopy()</code> du module <code>copy</code>.\u00a0\u21a9</p> </li> <li> <p>Ou de type <code>dict</code> ou <code>set</code> qui sont aussi des types muables.\u00a0\u21a9</p> </li> <li> <p>Un effet de bord se produit quand une fonction modifie le contenu d'une variable qui appartient au contexte appelant.\u00a0\u21a9</p> </li> <li> <p>Les variables <code>a</code> et <code>t</code> pourraient s'appeler aussi <code>x</code> ce qui donnerait le m\u00eame r\u00e9sultat.\u00a0\u21a9</p> </li> <li> <p>Voir https://docs.python.org/fr/3/tutorial/controlflow.html#default-argument-values.\u00a0\u21a9</p> </li> <li> <p>ou mutable en anglais.\u00a0\u21a9</p> </li> <li> <p>Par abus de langage on francise parfois le terme en \u00ab liste \u00bb pour d\u00e9signer un tableau.\u00a0\u21a9</p> </li> <li> <p><code>del</code> est une instruction Python, pas une fonction, elle s'\u00e9crit donc sans parenth\u00e8se.\u00a0\u21a9</p> </li> </ol>"},{"location":"types-construits/3-dictionnaires/","title":"Dictionnaires (type <code>dict</code>)","text":"<p>Cours</p> <p>Un dictionnaire est un ensemble non-ordonn\u00e9 d'\u00e9l\u00e9ments sous la forme cl\u00e9-valeur, qui peuvent \u00eatre modifi\u00e9s (muables<sup>5</sup>).</p> <p>En Python les dictionnaires sont du type <code>dict</code>.</p> <p>Les dictionnaires se r\u00e9v\u00e8lent tr\u00e8s pratiques pour manipuler des structures complexes \u00e0 d\u00e9crire et quand les tableaux pr\u00e9sentent leurs limites.</p>"},{"location":"types-construits/3-dictionnaires/#creation","title":"Cr\u00e9ation","text":"<p>Un dictionnaire est d\u00e9clar\u00e9 par une s\u00e9rie d'\u00e9l\u00e9ments sous la forme couples cl\u00e9s - valeurs (key-value) s\u00e9par\u00e9s par des virgules, et le tout encadr\u00e9 par des accolades \u201c{ }\u201d.</p> <pre><code>&gt;&gt;&gt; capitales = {\"France\": \"Paris\", \"Italie\": \"Rome\", \"Espagne\": \"Madrid\"}\n&gt;&gt;&gt; capitales\n{'France': 'Paris', 'Italie': 'Rome', 'Espagne': 'Madrid'}\n&gt;&gt;&gt; type(capitales)\n&lt;class 'dict'&gt;\n</code></pre> <p>Ici les cl\u00e9s de <code>capitales</code> sont <code>'France'</code>, <code>'Italie'</code> et <code>'Espagne'</code> ; les valeurs <code>'Paris'</code>, <code>'Rome'</code> et <code>'Madrid'</code>.</p> <p>Il est aussi possible de cr\u00e9er un dictionnaire vide avec les accolades <code>{}</code> : <pre><code>&gt;&gt;&gt; capitales = {}\n</code></pre> ou avec la fonction <code>dict()</code> :</p> <pre><code>&gt;&gt;&gt; capitales = dict()\n</code></pre> <p>puis de remplir le dictionnaire avec diff\u00e9rentes cl\u00e9s (<code>'France'</code>, <code>'Italie'</code> et <code>'Espagne'</code>) et leur valeurs (<code>'Paris'</code>, <code>'Rome'</code> et <code>'Madrid'</code>) :</p> <pre><code>&gt;&gt;&gt; capitales[\"France\"] = \"Paris\"\n&gt;&gt;&gt; capitales[\"Italie\"] = \"Rome\"\n&gt;&gt;&gt; capitales[\"Espagne\"] = \"Madrid\"\n&gt;&gt;&gt; capitales\n{'France': 'Paris', 'Italie': 'Rome', 'Espagne': 'Madrid'}\n</code></pre> <p>Un dictionnaire est affich\u00e9 sans ordre particulier.</p> <p>Comme pour les tableaux, on peut aussi cr\u00e9er un dictionnaire par compr\u00e9hension :</p> <pre><code>&gt;&gt;&gt; d = {x: x**2 for x in range(10)}\n&gt;&gt;&gt; d\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81} \n</code></pre> <p>Les cl\u00e9s de dictionnaire ne sont pas forc\u00e9ment des cha\u00eenes de caract\u00e8res. Ici ce sont des entiers. On pourrait aussi les convertir en chaines de caract\u00e8res avec str().</p> <p><pre><code>&gt;&gt;&gt; d = {str(x):x**2 for x in range (10)}\n&gt;&gt;&gt; d\n{'0': 0, '1': 1, '2': 4, '3': 9, '4': 16, '5': 25, '6': 36, '7': 49, '8': 64, '9': 81}\n</code></pre> Il est aussi possible d'utiliser d'autres types de variables comme des p-uplets, mais  les tableaux ne peuvent pas \u00eatre les cl\u00e9s d'un dictionnaire (car muables) :</p> <pre><code>&gt;&gt;&gt; d = {(0, 0): 'X', (0, 1): 'O', (1, 0): 'O', (1, 1): 'X'}\n&gt;&gt;&gt; d = {[0, 0]: 'X', [0, 1]: 'O', [1, 0]: 'O', [1, 1]: 'X'}\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>"},{"location":"types-construits/3-dictionnaires/#fonction-len","title":"Fonction <code>len()</code>","text":"<p>La fonction <code>len()</code> renvoie la longueur d'un dictionnaire, c'est-\u00e0-dire le nombre d'\u00e9l\u00e9ments (couple cl\u00e9 :valeur) qu'il contient.</p> <pre><code>&gt;&gt;&gt; capitales = {\"France\": \"Paris\", \"Italie\": \"Rome\", \"Espagne\": \"Madrid\"}\n&gt;&gt;&gt; len(capitales)\n3\n</code></pre>"},{"location":"types-construits/3-dictionnaires/#acces-aux-elements","title":"Acc\u00e8s aux \u00e9l\u00e9ments","text":"<p>Les \u00e9l\u00e9ments d'un dictionnaire n'ont pas d'ordre particulier, il n'est donc pas possible d'acc\u00e9der aux \u00e9l\u00e9ments par un indice de leur position (comme avec les p-uplets, tableaux et chaines de caract\u00e8res). </p> <pre><code>&gt;&gt;&gt; capitales[1]\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nKeyError: 1\n</code></pre> <p>Ce sont les cl\u00e9s du dictionnaire qui permettent d'acc\u00e9der aux valeurs. Pour r\u00e9cup\u00e9rer la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>key</code>  dans un dictionnaire <code>d</code>, il suffit d'utiliser la syntaxe suivante <code>d[key]</code><sup>1</sup>. </p> <p><pre><code>&gt;&gt;&gt; capitales[\"France\"]\n'Paris'\n</code></pre> mais un erreur est lev\u00e9e si la cl\u00e9 n'existe pas :</p> <pre><code>&gt;&gt;&gt; capitales['Allemagne']\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 'Allemagne'\n</code></pre> <p>Le mot cl\u00e9 <code>in</code> permet de v\u00e9rifier si une cl\u00e9  est pr\u00e9sente dans un dictionnaire, il renvoie un bool\u00e9en :</p> <pre><code>&gt;&gt;&gt; \"France\" in capitales\nTrue\n&gt;&gt;&gt; \"Allemagne\" in capitales\nFalse\n</code></pre> <p> <code>in</code> ne s'applique qu' aux cl\u00e9s d'un dictionnaire, pas \u00e0 ses valeurs :</p> <pre><code>&gt;&gt;&gt; \"Paris\" in capitales\nFalse\n</code></pre> <p>De fa\u00e7on tr\u00e8s similaire aux p-uplets et tableaux, le mot cl\u00e9 <code>in</code> permet aussi d'\u00e9crire une boucle pour parcourir (ou \u00abit\u00e9rer\u00bb) toutes les cl\u00e9s d'un dictionnaire :</p> <pre><code>&gt;&gt;&gt; for key in capitales:\n...     print(\"La capitale de\", key, \"est\", capitales[key])\nFrance Paris\nItalie Rome\nEspagne Madrid\n</code></pre>"},{"location":"types-construits/3-dictionnaires/#methodes-keys-values-et-items","title":"M\u00e9thodes <code>.keys()</code>, <code>.values()</code> et <code>.items()</code>","text":"<p>Les m\u00e9thodes <code>.keys()</code> et <code>.values()</code> renvoient les cl\u00e9s et les valeurs d'un dictionnaire :</p> <pre><code>&gt;&gt;&gt; capitales.keys()\ndict_keys(['France', 'Italie', 'Espagne'])\n&gt;&gt;&gt; capitales.values()\ndict_values(['Paris', 'Rome', 'Madrid'])\n</code></pre> <p>La m\u00e9thode <code>.items()</code> renvoie tous les couples cl\u00e9-valeur d'un dictionnaire :</p> <pre><code>&gt;&gt;&gt; capitales.items()\ndict_items([('France', 'Paris'), ('Italie', 'Rome'), ('Espagne', 'Madrid')])\n</code></pre> <p>Les mentions <code>dict_keys</code>, <code>dict_values</code>, <code>dict_items</code> indiquent que nous avons affaire \u00e0 des objets un peu particuliers. Pour les utiliser il faut par exemple les transformer en tableaux avec la fonction <code>list()</code> :</p> <pre><code>&gt;&gt;&gt; list(capitales.values())\n['France', 'Italie', 'Espagne']\n&gt;&gt;&gt; list(capitales.items())\n[('France', 'Paris'), ('Italie', 'Rome'), ('Espagne', 'Madrid')]\n</code></pre>"},{"location":"types-construits/3-dictionnaires/#modifier-un-dictionnaire","title":"Modifier un dictionnaire","text":""},{"location":"types-construits/3-dictionnaires/#modifier-ou-ajouter-un-element","title":"Modifier ou ajouter un \u00e9l\u00e9ment","text":"<p>Comme pour les tableaux, on peut modifier une valeur dans un dictionnaire (mais \u00e0 la diff\u00e9rence des tableaux on la d\u00e9signe par sa cl\u00e9, pas par un indice) :</p> <pre><code>capitales[\"Italie\"] = \"Roma\"\n&gt;&gt;&gt; capitales\n{'Espagne': 'Madrid', 'France': 'Paris', 'Italie': 'Roma'}\n</code></pre> <p>Dans un tableau, on ne peut pas modifier la valeur d'un indice qui n'existe pas :</p> <pre><code>&gt;&gt;&gt; pays = ['Madrid', 'Paris', 'Roma']\n&gt;&gt;&gt; pays[3] = 'Berlin'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list assignment index out of range\n</code></pre> <p>Mais dans un dictionnaire, si on essaie de modifier la valeur d'une cl\u00e9 qui n'existe pas, alors un nouveau couple cl\u00e9-valeur est cr\u00e9\u00e9 :</p> <pre><code>&gt;&gt;&gt; capitales[\"Allemagne\"] = 'Berlin'\n&gt;&gt;&gt; capitales\n{'Allemagne': 'Berlin', 'Espagne': 'Madrid',  'France': 'Paris',  'Italie': 'Roma'}\n</code></pre>"},{"location":"types-construits/3-dictionnaires/#supprimer-des-elements","title":"Supprimer des \u00e9l\u00e9ments","text":"<p>Comme pour les tableaux, il est possible d'utiliser les m\u00e9thodes <code>pop()</code> et <code>clear()</code> (mais pas <code>remove()</code>) pour supprimer des couples de cl\u00e9-valeur :</p> <ul> <li> <p><code>d.pop(key)</code><sup>6</sup> supprime du dictionnaire la cl\u00e9 <code>key</code> et renvoie la valeur associ\u00e9e : <pre><code>&gt;&gt;&gt; d = {'one':1, 'two':2, 'three' :3}\n&gt;&gt;&gt; d.pop('two')\n2\n</code></pre></p> </li> <li> <p><code>d.clear()</code> supprime tous les \u00e9l\u00e9ments du dictionnaire :     <pre><code>&gt;&gt;&gt; d = {'one':1, 'two' :2, 'three' :3}\n&gt;&gt;&gt; d.clear()\n</code></pre></p> </li> </ul> <p>Comme pour les tableaux, le mot cl\u00e9 <code>del</code> permet aussi de supprimer un \u00e9l\u00e9ment d'un dictionnaire :</p> <pre><code>&gt;&gt;&gt; del capitales['Allemagne']\n&gt;&gt;&gt; capitales\n{'Espagne': 'Madrid', 'France': 'Paris', 'Italie': 'Roma'} \n</code></pre> <p>Ou encore le dictionnaire entier avec l'instruction <code>del capitales</code>, alors la variable <code>capitales</code> n'existe plus.</p>"},{"location":"types-construits/3-dictionnaires/#dictionnaires-muables","title":"Dictionnaires muables","text":"<p>Les dictionnaires, comme les tableaux, sont de type muables, donc les m\u00eames limites s'appliquent.</p>"},{"location":"types-construits/3-dictionnaires/#copie-de-dictionnaire","title":"Copie de dictionnaire","text":"<p><pre><code>&gt;&gt;&gt; d1 = {'one':1, 'two':2, 'three':3}\n&gt;&gt;&gt; d2 = d1\n&gt;&gt;&gt; d2['three'] = 4\n&gt;&gt;&gt; d1 \n{'one':1, 'two':2, 'three':4}\n</code></pre> Comme avec les tableaux, <code>d1</code> a aussi \u00e9t\u00e9 modifi\u00e9e quand on a modifi\u00e9 <code>d2</code> ! Les deux variables <code>d1</code> et <code>d2</code> sont en fait deux noms qui font r\u00e9f\u00e9rence vers le m\u00eame objet<sup>2</sup>. </p> <p>Pour copier un dictionnaire , il faut cr\u00e9er une copie explicite du dictionnaire initial<sup>3</sup> :</p> <ul> <li> <p>Avec  la fonction <code>dict(it\u00e9rable)</code> qui renvoie un dictionnaire form\u00e9 des \u00e9l\u00e9ments de la variable it\u00e9rable :     <pre><code>&gt;&gt;&gt; d2 = dict(d)\n</code></pre></p> </li> <li> <p>Ou encore utiliser la m\u00e9thode <code>.copy()</code> :     <pre><code>&gt;&gt;&gt; d2 = d1.copy()\n</code></pre></p> </li> </ul>"},{"location":"types-construits/3-dictionnaires/#dictionnaire-passe-en-parametre-de-fonction","title":"Dictionnaire pass\u00e9 en param\u00e8tre de fonction","text":"<p>Les m\u00eames effets qu'avec les tableaux peuvent \u00eatre observ\u00e9s quand on passe un dictionnaire en param\u00e8tre d'une fonction : la fonction peut en modifier le contenu.</p> <p>Illustrons cela par deux fonctions <code>f(x)</code> et <code>g(x)</code> qui modifient simplement la valeur d'un param\u00e8tre <code>x</code> et appelons ces fonctions en passant des variables <code>a</code> (type <code>int</code>) et <code>d</code> (type <code>dict</code>) en param\u00e8tre : </p> avec une variable de type \"immuable\"avec une variable de type \"muable\" <pre><code>def f(x):\n    x = 2   \n</code></pre> <pre><code>def g(x):\n    x['four']=4\n</code></pre> <p>Appelons ces fonctions en passant des variables <code>a</code> et <code>d</code> en param\u00e8tre <sup>3</sup>: </p> avec une variable de type \"immuable\"avec une variable de type \"muable\" <p><pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; f(a)\n&gt;&gt;&gt; a\n1 \n</code></pre> La valeur de <code>a</code> n'a pas \u00e9t\u00e9 modifi\u00e9e par la fonction <code>f</code>.</p> <pre><code>&gt;&gt;&gt; d = {'one':1, 'two':2, 'three':3}\n&gt;&gt;&gt; h(d)\n&gt;&gt;&gt; d\n{'four': 4, 'one': 1, 'three': 3, 'two': 2}\n</code></pre> <p>La valeur de <code>d</code> a \u00e9t\u00e9 modifi\u00e9e par la fonction <code>g</code> !</p>"},{"location":"types-construits/3-dictionnaires/#conversion-de-type-cast","title":"Conversion de type (cast)","text":"<p>La fonction <code>dict(tableau de p-uplets)</code> transforme un tableau de tuples (comme obtenu par <code>items()</code>) en dictionnaire :</p> <pre><code>&gt;&gt;&gt; dict([(\"one\" , 1), (\"two\" , 2), (\"three\" , 3)])\n{'one': 1, 'three': 3, 'two': 2}\n</code></pre>"},{"location":"types-construits/3-dictionnaires/#un-exemple-dutilisation-de-dictionnaire-les-p-uplets-nommes","title":"Un exemple d'utilisation de dictionnaire : les p-uplets nomm\u00e9s","text":"<p>Un p-uplet nomm\u00e9 est un p-uplet, dont les \u00e9l\u00e9ments sont appel\u00e9s via un descripteur au lieu d'un indice. L'int\u00e9r\u00eat est d'am\u00e9liorer la lisibilit\u00e9 du code pour r\u00e9duire les risques d'erreurs. Le type des p-uplets nomm\u00e9s n'existe pas nativement dans Python<sup>4</sup>: , on peut alors utiliser des dictionnaires. Voici un exemple pour montrer la syntaxe :</p> <pre><code>&gt;&gt;&gt; monsieurX = {\"nom\": \"X\", \"\u0301prenom\": \"Monsieur\", \"age\": 47}\n&gt;&gt;&gt; monsieurX[\"age\"]\n47\n</code></pre>"},{"location":"types-construits/3-dictionnaires/#dictionnaire-de-tableaux-dictionnaires-de-dictionnaires","title":"Dictionnaire de tableaux, dictionnaires de dictionnaires","text":"<p>De m\u00eame qu'on peut utiliser des tableaux de tableaux, on peut utiliser des dictionnaires de tuples ou de tableaux :</p> <pre><code>&gt;&gt;&gt; traduction = {\"un\": [\"one\", \"eins\"], \"deux\": [\"two\", \"zwei\"], \"trois\": [\"three\", \"drei\"]}\n&gt;&gt;&gt; traduction[\"un\"]\n['one', 'eins']\n&gt;&gt;&gt; traduction[\"un\"][0]\n'one'\n</code></pre> <p>ou m\u00eame des dictionnaires de dictionnaires : <pre><code>&gt;&gt;&gt; traduction = {\"un\": {\"Ang\":\"one\", \"All\":\"eins\"}, \"deux\": {\"Ang\": \"two\", \"All\":\"zwei\"}, \"trois\": {\"Ang\":\"three\", \"All\":\"drei\"}}\n&gt;&gt;&gt; traduction[\"un\"]\n{'Ang': 'one', 'All': 'eins'}\n&gt;&gt;&gt; traduction[\"un\"][\"Ang\"]\n'one'\n</code></pre></p> <ol> <li> <p>Ou alors utiliser en utilisant la m\u00e9thode <code>.get()</code> qui permet de r\u00e9cup\u00e9rer la valeur associ\u00e9e \u00e0 une cl\u00e9 ou afficher un message si elle n'existe pas : <pre><code>&gt;&gt;&gt; capitale.get('France')\n'Paris'\n&gt;&gt;&gt; capitale.get('Allemagne', \"Cette cl\u00e9 n'existe pas\")\nCette cl\u00e9 n'existe pas\n</code></pre> \u21a9</p> </li> <li> <p>Pour s'en convaincre on peut v\u00e9rifier les adresses des variables avec id() : <pre><code>&gt;&gt;&gt; id(d1)                      &gt;&gt;&gt; id(d2)\n2156942732160                       2156942732160\n</code></pre> \u21a9</p> </li> <li> <p>Les variables <code>a</code> et <code>d</code> pourraient s'appeler aussi <code>x</code> ce qui donnerait le m\u00eame r\u00e9sultat.\u00a0\u21a9\u21a9</p> </li> <li> <p>Il existe un module Python <code>collection.namedtuple</code> mais le programme invite \u00e0 utiliser des dictionnaires dans ce cas.\u00a0\u21a9</p> </li> <li> <p>ou mutable en anglais.\u00a0\u21a9</p> </li> <li> <p>La cl\u00e9 dans <code>d.pop(key)</code> est obligatoire, alors que pour les tableaux elle est facultative (par d\u00e9faut le dernier \u00e9l\u00e9ment est supprim\u00e9)\u00a0\u21a9</p> </li> </ol>"},{"location":"types-construits/4-comparaisons/","title":"4 comparaisons","text":"p-uplet Tableau Dictionnaire Cha\u00eene de caract\u00e8res type Python <code>tuple</code> <code>list</code> <code>dict</code> <code>str</code> Suite d'\u00e9l\u00e9ments ordonn\u00e9s ordonn\u00e9s sans ordre ordonn\u00e9s El\u00e9ments modifiables immuable muable muable immuable Cr\u00e9ation/notation <code>t = (1, 2, 3, 4)</code> ou <code>t = 1, 2, 3, 4</code> <code>l = [1, 2, 3, 4]</code> <code>d = {'one':1, 'two':2, 'three':3}</code> <code>s='abcd'</code> Cr\u00e9ation par compr\u00e9hension impossible <code>l1 = [x**2 for x in range(5)]</code><code>l2 = [3*i for i in [1, 2, 3]]</code><code>l3 = [x for x in range(9) if x!=2]</code><code>l4 = [f(x) for x in l3]</code><code>d1 = {x: x**2 for x in range(5)}</code> <code>d2 = {str(x): x for x in range (5)}</code><code>d3 = {x: x for x in range(5) if x=2}</code><code>d4 = {x: f(x) for x in [1, 2, 3]}</code> Impossible Nombre d\u2019\u00e9l\u00e9ments <code>len(t)</code> <code>len(l)</code> <code>len(d)</code> <code>len(s)</code> Indices index\u00e9s de <code>0</code> \u00e0 <code>len(t) - 1</code> index\u00e9s de <code>0</code> \u00e0 <code>len(l) - 1</code> Acc\u00e8s \u00e0 un \u00e9l\u00e9ment <code>t[index]</code> <code>l[index]</code> <code>d[cl\u00e9]</code> <code>s[index]</code> Tranches <code>t[i1:i2]</code> de <code>i1</code> (inc.) \u00e0 <code>i2</code> (exclus) <code>l[i1 : i2]</code> de <code>i1</code> (inc.) \u00e0 <code>i2</code> (exclus) impossible <code>s[i1:i2]</code> de <code>i1</code> (inc.) \u00e0 <code>i2</code> (exclus) Mot-cl\u00e9 <code>in</code> <code>&gt;&gt;&gt; 1 in (1, 2, 3)</code><code>True</code><code>&gt;&gt;&gt; for i in (1, 2 ,3):</code> <code>print(i, end='-')</code><code>1-2-3-</code> <code>&gt;&gt;&gt; 1 in [1, 2, 3]</code><code>True</code><code>&gt;&gt;&gt; for i in [1, 2 ,3]:</code> <code>print(i, end='-')</code><code>1-2-3-</code> Le mot-cl\u00e9 <code>in</code> teste la presence d\u2019une cl\u00e9, pas d\u2019une valeur<code>&gt;&gt;&gt; \u2018one\u2019 in {'one':1, 'two':2}</code><code>True</code><code>&gt;&gt;&gt; for key in {'one':1, 'two':2}:</code> <code>print(key)</code> <code>&gt;&gt;&gt; 'z' in \u2018hello world\u2019</code><code>False</code><code>for car in 'hello':</code> <code>print(car, end='-')</code><code>h-e-l-l-o-</code> Modifier un \u00e9l\u00e9ment impossible <code>l[index]= nouvelle_valeur</code> avec <code>index &lt; len(l)</code> sinon erreur <code>d[cl\u00e9] = nouvelle_valeur</code> la cl\u00e9 est cr\u00e9\u00e9e si elle n\u2019existe pas Impossible Op\u00e9rations <code>&gt;&gt;&gt; 3*(1, 2)</code><code>(1, 2, 1, 2, 1, 2)</code><code>&gt;&gt;&gt; (1, 2) + (3, 4)</code><code>(1, 2, 3, 4)</code> <code>&gt;&gt;&gt; 3*[1, 2]</code><code>[1, 2, 1, 2, 1, 2]</code><code>&gt;&gt;&gt; [1, 2] + [3, 4]</code><code>[1, 2, 3, 4]</code> impossible <code>&gt;&gt;&gt; 3*'abc'</code><code>'abcabcabc'</code><code>&gt;&gt;&gt; 'abc'+'def'</code><code>'abcdef'</code> Ajouter de nouveaux \u00e9l\u00e9ments Impossible (mais on peut cr\u00e9er un nouveau p-uplet par concat\u00e9nation et \u00e9craser l\u2019ancien : <code>t = (1, 2, 3)</code><code>t = t + (4, 5, 6)</code> <code>&gt;&gt;&gt; [1,2,3].append(4)</code><code>[1, 2, 3, 4]</code><code>&gt;&gt;&gt; ['a','b','d'].insert(2,'c')</code><code>['a', 'b', 'c', 'd']</code><code>&gt;&gt;&gt; [1,2,3].extend([4,5,6])</code><code>[1, 2, 3, 4, 5, 6]</code> <code>d[nouvelle_cl\u00e9] = valeur</code> L\u2019ajout de nouveaux \u00e9l\u00e9ments est automatique quand la cl\u00e9 n\u2019existe pas d\u00e9j\u00e0 Impossible (mais on peut cr\u00e9er une nouvelle cha\u00eene par concat\u00e9nation et \u00e9craser l\u2019ancienne <code>&gt;&gt;&gt;ch = 'hello'</code><code>&gt;&gt;&gt; ch = ch + 'world'</code> Supprimer des \u00e9l\u00e9ments Impossible de supprimer un \u00e9l\u00e9ment seul. On peut supprimer le p-uplet avec <code>&gt;&gt;&gt; t= ['a', 'b', 'c']</code><code>&gt;&gt;&gt; del t</code> Avec le mot-cl\u00e9 <code>del</code><code>&gt;&gt;&gt; l= ['a', 'b', 'c']</code><code>&gt;&gt;&gt; del l[2]</code><code>&gt;&gt;&gt; del l</code>Avec les methodes<code>&gt;&gt;&gt; l= [1, 2, 3, 4, 5]</code><code>&gt;&gt;&gt; l.pop()</code> Avec le mot-cl\u00e9 <code>del</code><code>&gt;&gt;&gt; d={'one':1, 'two':2, 'three':3}</code><code>&gt;&gt;&gt; del d['two']</code><code>&gt;&gt;&gt; del d</code>Avec les methodes<code>&gt;&gt;&gt; d = {'one':1, 'two':2, 'three':3}</code><code>&gt;&gt;&gt; d.pop('two')</code> Impossible de supprimer un caract\u00e8re seul. On peut supprimer la cha\u00eene avec <code>&gt;&gt;&gt; s= 'hello world'</code><code>&gt;&gt;&gt; del s</code> Quelques m\u00e9thodes associ\u00e9es Aucune m\u00e9thode disponibles <code>&gt;&gt;&gt; l = [5, 8, 2, 1.]</code><code>&gt;&gt;&gt; l.sort()</code><code>&gt;&gt;&gt; l</code><code>[1, 2, 5, 8]</code><code>&gt;&gt;&gt; l.index(5)</code><code>2</code> <code>&gt;&gt;&gt; d = {'one':1, 'two':2, 'three':3}</code><code>&gt;&gt;&gt; d.keys()</code><code>dict_keys(['one', 'two', 'three'])</code><code>&gt;&gt;&gt; d.values()</code><code>dict_values([1, 2, 3])</code><code>&gt;&gt;&gt; d.items()</code><code>dict_items([('one', 1), ('two', 2), ('three', 3)])</code> <code>&gt;&gt;&gt; s = \"hello world\"</code><code>&gt;&gt;&gt; s.upper()</code><code>'HELLO WORLD'</code><code>&gt;&gt;&gt; s.split()</code><code>['hello', 'world']</code><code>&gt;&gt;&gt; s.find(\"lo\")</code><code>3</code> Conversion (cast) <code>&gt;&gt;&gt;tuple(\"abc\")</code><code>('a', 'b', 'c')</code><code>&gt;&gt;&gt; tuple(range(5))</code><code>(0, 1, 2, 3, 4)</code> <code>&gt;&gt;&gt; list('abc')</code><code>['a', 'b', 'c']</code><code>&gt;&gt;&gt; list(range(5))</code><code>[0, 1, 2, 3, 4]</code> <code>&gt;&gt;&gt; t = [(\"one\", 1), (\"two\", 2), (\"three\", 3)]</code><code>&gt;&gt;&gt; d = dict(t)</code><code>&gt;&gt;&gt; d</code><code>{'one': 1, 'three': 3, 'two': 2}</code> <code>&gt;&gt;&gt; l = [\"h\", \"e\", \"l\", \"l\", \"o\"]</code><code>&gt;&gt;&gt; \"\".join(l)</code><code>hello</code> Copier <code>t1 = t2</code> ou <code>a, b, c, \u2026 = t</code> pour disperser tuple <code>t</code> <code>l2 = l1</code> cr\u00e9\u00e9 deux noms pour la m\u00eame liste. Pour copier les valeurs de <code>l1</code> dans <code>l2</code> il faut utiliser : <code>l2 = l1[:]</code> ou <code>l2 = list(l1)</code> ou <code>l2 = l1.copy()</code> <code>d2 = d1</code> cr\u00e9\u00e9 deux noms pour le m\u00eame dictionnaire. Pour copier les valeurs de <code>d1</code> dans <code>d2</code> il faut utiliser : <code>d2 = dict(d1)</code> ou <code>d2 = d1.copy()</code> <code>s1 = s2</code> Argument de fonctions inchang\u00e9 par la fonction peut-\u00eatre modifi\u00e9 par la fonction peut-\u00eatre modifi\u00e9 par la fonction inchang\u00e9 par la fonction Utilisation notable fonction renvoyant plusieurs valeurs tableau de tableaux (matrices) p-uplet nomm\u00e9 manipulations de textes"},{"location":"types-construits/5-chaines-de-caracteres/","title":"Chaines de caract\u00e8res (hors programme)","text":""},{"location":"types-construits/5-chaines-de-caracteres/#operation-rappel","title":"Op\u00e9ration (rappel)","text":"<p>Pour les cha\u00eenes de caract\u00e8res, deux op\u00e9rations sont possibles, l'addition et la multiplication :</p> <pre><code>&gt;&gt;&gt; chaine = \"Salut\"\n&gt;&gt;&gt; chaine + \" Python\"\n'Salut Python'\n&gt;&gt;&gt; chaine * 3\n'SalutSalutSalut'\n</code></pre> <ul> <li>L'op\u00e9rateur d'addition <code>+</code> concat\u00e8ne (assemble) deux cha\u00eenes de caract\u00e8res.</li> <li>L'op\u00e9rateur de multiplication <code>*</code> entre un nombre entier et une cha\u00eene de caract\u00e8res duplique (r\u00e9p\u00e8te) plusieurs fois une cha\u00eene de caract\u00e8res.</li> </ul> <p>Attention aux op\u00e9rations illicites :</p> <pre><code>&gt;&gt;&gt; \"toto\" * 1.3\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't multiply sequence by non-int of type 'float'\n&gt;&gt;&gt; \"toto\" + 2\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre>"},{"location":"types-construits/5-chaines-de-caracteres/#acces-aux-elements-lettres","title":"Acc\u00e8s aux \u00e9l\u00e9ments (lettres)","text":"<p>Comme pour les p-uplets et tableaux, on peut acc\u00e9der \u00e0 un caract\u00e8re d'une cha\u00eene de caract\u00e8res par sa position :</p> <pre><code>&gt;&gt;&gt; animaux = \"girafe tigre\"\n&gt;&gt;&gt; len(animaux)\n12\n&gt;&gt;&gt; animaux[3]\n'a'\n</code></pre> <p>Ou \u00e0 une partie de la cha\u00eene (tranches) :</p> <pre><code>&gt;&gt;&gt; animaux[0:4]\n'gira'  &gt;&gt;&gt; animaux[9:]\n'gre'   &gt;&gt;&gt; animaux[:-2]\n'girafe tig'\n</code></pre>"},{"location":"types-construits/5-chaines-de-caracteres/#modifier-une-chaine","title":"Modifier une cha\u00eene","text":"<p>Le type <code>str</code> est immuable, on ne peut pas modifier un des \u00e9l\u00e9ments d'une cha\u00eene de caract\u00e8re : </p> <pre><code>&gt;&gt;&gt; animaux[4] = \"F\"\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'str' object does not support item assignment\n</code></pre> <p>Par cons\u00e9quent, pour modifier une cha\u00eene de caract\u00e8res, il faut \u00e9craser l'ancienne.   </p>"},{"location":"types-construits/5-chaines-de-caracteres/#caracteres-speciaux","title":"Caract\u00e8res sp\u00e9ciaux","text":"<p>Il existe certains caract\u00e8res sp\u00e9ciaux tr\u00e8s pratiques, par exemple :</p> <ul> <li><code>\\n</code> pour le retour \u00e0 la ligne, </li> <li><code>\\t</code> produit une tabulation,</li> <li><code>\\</code> (caract\u00e8re d'\u00e9chappement) par exemple dans  <code>\\'</code> ou <code>\\\"</code> permet d'\u00e9crire des guillemets simples ou doubles sans que ceux-ci ne soient pas confondus avec les guillemets de de la cha\u00eene de caract\u00e8res.</li> </ul> <pre><code>&gt;&gt;&gt; print(\"Un retour \u00e0 la ligne\\npuis une tabulation\\t puis un guillemet\\\"\")\nUn retour \u00e0 la ligne\npuis une tabulation     puis un guillemet\"\n&gt;&gt;&gt; print('J\\'affiche un guillemet simple')\nJ'affiche un guillemet simple\n&gt;&gt;&gt; print(\"Un brin d'ADN\")\nUn brin d'ADN\n&gt;&gt;&gt; print('Python est un \"super\" langage de programmation')\nPython est un \"super\" langage de programmation\n</code></pre>"},{"location":"types-construits/5-chaines-de-caracteres/#methodes-associees-aux-chaines-de-caracteres","title":"M\u00e9thodes associ\u00e9es aux cha\u00eenes de caract\u00e8res","text":"<p>Voici quelques m\u00e9thodes sp\u00e9cifiques aux objets de type str :</p> <ul> <li><code>chaine.upper()</code> cConvertit la cha\u00eene en majuscule.     <pre><code>&gt;&gt;&gt; x = \"girafe\"\n&gt;&gt;&gt; x.upper()\n'GIRAFE'\n</code></pre></li> <li> <p><code>chaine.lower()</code> convertit la cha\u00eene en minuscule.     <pre><code>&gt;&gt;&gt; 'TIGRE'.lower()\n'tigre'\n</code></pre></p> </li> <li> <p><code>chaine.split(sep)</code> d\u00e9coupe une cha\u00eene de caract\u00e8res en utilisant le s\u00e9parateur sep (ou blanc si il n'est pas pr\u00e9cis\u00e9).      <pre><code>animaux = \"girafe tigre singe souris\"\n&gt;&gt;&gt; animaux.split()\n['girafe', 'tigre', 'singe', 'souris']\n</code></pre></p> </li> <li> <p><code>chaine.find(sub)</code> renvoie la position d'une sous-cha\u00eene dans une chaine de caract\u00e8res ou -1 si elle n'est pas trouv\u00e9e.      <pre><code>&gt;&gt;&gt; animal = \"girafe\"\n&gt;&gt;&gt; animal.find(\"i\")\n1\n&gt;&gt;&gt; animal.find(\"afe\")\n3\n&gt;&gt;&gt; animal.find(\"z\")\n-1\n</code></pre></p> </li> <li> <p><code>chaine.replace(x, y)</code> substitue une sous cha\u00eene x par une autre y dans une cha\u00eene de caract\u00e8res.  <pre><code>&gt;&gt;&gt; animaux = \"girafe tigre\"\n&gt;&gt;&gt; animaux.replace(\"tigre\", \"singe\")\n'girafe singe'\n&gt;&gt;&gt; animaux.replace(\"i\", \"o\")\n'gorafe togre'\n</code></pre></p> </li> <li> <p><code>chaine.count(x)</code> renvoie le nombre d'occurrence d'une sous cha\u00eene x dans une cha\u00eene de caract\u00e8res.      <pre><code>&gt;&gt;&gt; animaux.count(\"i\")\n2\n&gt;&gt;&gt; animaux.count(\"tigre\")\n1\n</code></pre></p> </li> </ul> <p>Ces m\u00e9thodes n'alt\u00e8rent pas la cha\u00eene de caract\u00e8res de d\u00e9part mais renvoient une nouvelle cha\u00eene de caract\u00e8re.</p>"},{"location":"types-construits/5-chaines-de-caracteres/#conversion-de-type-cast","title":"` Conversion de type (cast)","text":"<p>La conversion d'un tableau de cha\u00eenes de caract\u00e8res en une cha\u00eene de caract\u00e8res est un peu particuli\u00e8re puisqu'elle fait appel \u00e0 la m\u00e9thode <code>.join()</code>.</p> <pre><code>&gt;&gt;&gt; seq = [\"A\", \"T\", \"G\", \"A\", \"T\"]\n&gt;&gt;&gt; \"-\".join(seq)\n'A-T-G-A-T'\n</code></pre> <p>Les \u00e9l\u00e9ments de la liste initiale sont concat\u00e9n\u00e9s les uns \u00e0 la suite des autres et intercal\u00e9s par un s\u00e9parateur qui peut \u00eatre une cha\u00eene vide <code>\"\"</code>  pour concat\u00e9ner plusieurs cha\u00eenes ensembles.</p> <p>PEP 8</p> <p>Pr\u00e9f\u00e9rer l'utilisation de  <code>.join()</code> plut\u00f4t que <code>+</code> pour concat\u00e9ner des chaines . </p> <pre><code>&gt;&gt;&gt; \"\".join(seq)\n'ATGAT'\n</code></pre>"},{"location":"types-et-valeurs-de-base/","title":"Repr\u00e9sentation des donn\u00e9es : types et valeurs de base","text":"<p>Toute machine informatique manipule une repr\u00e9sentation des donn\u00e9es dont l\u2019unit\u00e9 minimale est le bit 0/1, ce qui permet d\u2019unifier logique et calcul. Les donn\u00e9es de base sont repr\u00e9sent\u00e9es selon un codage d\u00e9pendant de leur nature : entiers, flottants, caract\u00e8res et cha\u00eenes de caract\u00e8res. Le codage conditionne la taille des diff\u00e9rentes valeurs en m\u00e9moire.</p>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/","title":"\u00c9criture d\u2019un entier positif dans une base b &gt;= 2","text":""},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#systeme-decimal-ou-base-10","title":"Syst\u00e8me d\u00e9cimal ou base 10","text":"<p>Dans le syst\u00e8me d\u00e9cimal que l'on utilise tous les jours, les nombres sont \u00e9crit \u00e0 l'aide des 10 chiffres bien connus : 0, 1, 2, 3, 4, 5, 6, 7, 8 et 9. </p> <p>C'est la position d'un chiffre dans un nombre qui indique son importance, ou poids, dans ce nombre. Par exemple, le nombre qui s'\u00e9crit 2083 est \u00e9gal \u00e0 2 milliers plus 8 dizaines plus 3 unit\u00e9s. Il n'est pas \u00e9gal au nombre 8320, m\u00eame s'il s'\u00e9crit avec les m\u00eames chiffres 0, 2, 8 et 3.</p> <p>Tout nombre entier naturel peut s\u2019\u00e9crire comme combinaison lin\u00e9aire de puissance de 10. Par exemple, les chiffres du nombre 2083 correspondent \u00e0 :</p> chiffre 2 0 8 3 i 3 2 1 0 \\(10^i\\) \\(10^3\\) \\(10^2\\) \\(10^1\\) \\(10^0\\) combinaison \\(2 \\times 10^3\\) \\(0 \\times 10^2\\) \\(8 \\times 10^1\\) \\(3 \\times 10^0\\) <p>\\(2083 = 2 \\times 10^3 + 0 \\times 10^2 + 8 \\times 10^1 + 3 \\times 10^0\\)</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, un nombre \\(n\\) qui s'\u00e9crit dans le syst\u00e8me d\u00e9cimal avec \\(p\\) chiffres \\(d_{p\u22121}d_{p\u22122}...d_2d_1d_0\\)  (chaque \\(d_i\\) est un chiffre valant entre 0 et 9)<sup>1</sup> est \u00e9gal \u00e0 : </p> <p>\\(n = d_{p\u22121} \\times 10^{p\u22121}  + d_{p\u22122} \\times 10^{p\u22122} + ... +  d_2 \\times 10^2 + d_1 \\times 10^1 + d_0 \\times 10^0\\)</p> <p>ou encore avec la formule math\u00e9matique d'une somme de \\(0\\) \u00e0 \\(p-1\\) : \\(n = \\sum_{i=0}^{p-1} d_i \u00d7 10^i\\)</p> <p>Noter qu'on peut \u00e9crire 10 nombres allant de 0 \u00e0 9 avec 1 seul chiffre, 100 nombres allant de 0 \u00e0 99 avec 2 chiffres, 1000 nombres allant de 0 \u00e0 999 avec 3 chiffres, ... \\(10^p\\) nombres allant de 0 \u00e0 \\(10^p-1\\) avec \\(p\\) chiffres.</p> <p>Quand on ajoute un chiffre 0 \u00e0 droite d'un nombre \\(n\\), tous les chiffres sont d\u00e9cal\u00e9s vers la droite, les puissances de 10 correspondantes sont augment\u00e9es d'une unit\u00e9, donc le nombre \\(n\\) est multipli\u00e9 par 10.</p> <p>R\u00e9ciproquement, on peut \u00e9crire chacun des chiffres d'un nombre d\u00e9cimal \\(n\\) qui s'\u00e9crit dans le syst\u00e8me d\u00e9cimal avec \\(p\\) chiffres \\(d_{p\u22121}d_{p\u22122}...d_2d_1d_0\\) par un algorithme simple qui consiste \u00e0 effectuer une succession de divisions enti\u00e8res par 10  :</p> <p>L'op\u00e9rateur de division enti\u00e8re <code>//</code> et l\u2019op\u00e9ration modulo <code>%</code> utilis\u00e9s avec des entiers (de type <code>int</code>) donnent respectivement le quotient et le reste d'une division euclidienne : si <code>a</code> et <code>b</code> sont des entiers tels que \\(a = b \\times q + r\\),  alors <code>a // b</code> renvoie \\(q\\) et <code>a % b</code> renvoie \\(r\\).</p> <ul> <li> <p>Le reste de la division enti\u00e8re de \\(n\\) par \\(10\\), <code>n % 10</code> en Python, renvoie \\(d_0\\). Cela permet d'obtenir le dernier chiffre de l'\u00e9criture d\u00e9cimale de \\(n\\).</p> </li> <li> <p>Le quotient de la division enti\u00e8re de \\(n\\) par \\(10\\), <code>n // 10</code> en Python, renvoie \\(d_{p\u22121}d_{p\u22122}...d_2b_1\\). On remplace \\(n\\) par ce nombre pour trouver les autres chiffres.</p> </li> </ul> <p>Il suffit alors de r\u00e9p\u00e9ter l'op\u00e9ration jusqu'\u00e0 ce que \\(n\\) soit \u00e9gal \u00e0 0, on aura bien obtenu tous les chiffres de l'\u00e9criture d\u00e9cimale de \\(n\\). </p> <p>Prenons l'exemple du nombre \\(n = 2083\\), le reste de la division enti\u00e8re par 10 est 3 et le quotient 208.</p> <p> </p> <pre><code>&gt;&gt;&gt; 2083 % 10\n3\n&gt;&gt;&gt; 2083 // 10\n208\n</code></pre> <p>On a d\u00e9j\u00e0 trouv\u00e9 le dernier chiffre : 3. Continuons avec 208. Le reste de la division enti\u00e8re de 208 par 10 est 8 et le quotient 20.</p> <p></p> <p></p> <pre><code>&gt;&gt;&gt; 208 % 10\n8\n&gt;&gt;&gt; 208 // 10\n20\n</code></pre> <p>On obtient le 8. Continuons avec 20. Le reste de la division enti\u00e8re de 20 par 10 est 0 et le quotient 2.</p> <p> </p> <pre><code>&gt;&gt;&gt; 20 % 10\n0\n&gt;&gt;&gt; 20 // 10\n2\n</code></pre> <p>On obtient le 0. Continuons avec 2. Le reste de la division enti\u00e8re de 2 par 10 est 2 et le quotient 0.</p> <p> </p> <p><pre><code>&gt;&gt;&gt; 2 % 10\n2\n&gt;&gt;&gt; 2 // 10\n0\n</code></pre> On a obtenu le dernier chiffre 2.  Le quotient est 0, inutile de continuer les divisions, tous les chiffres ont \u00e9t\u00e9 trouv\u00e9s.</p> <p> </p> <p>Noter qu'on a obtenu les chiffres de l'\u00e9criture d\u00e9cimale de 2083, mais  de gauche \u00e0 droite, il faut donc les lire de droite \u00e0 gauche pour retrouver 2083.</p> <p>On peut traduire cet algorithme en Python, par exemple pour \u00e9crire une fonction <code>etoile</code> qui renvoie une cha\u00eene de caract\u00e8re compos\u00e9es de tous les chiffres d'un nombre entier <code>n</code> suivis d'une \u00e9toile.</p> <p><pre><code>def etoile(n):\n    n_etoile = ''\n    while n &gt; 0:\n        n_etoile =  str(n % 10) + '*' + n_etoile\n        n = n // 10\n    return n_etoile\n\n&gt;&gt;&gt; etoile(2083)\n'2*0*8*3*'\n</code></pre> On note que le cas ou <code>n</code> est \u00e9gal \u00e0 <code>0</code>, la fonction n'entre pas dans la boucle <code>while</code> et renvoie une cha\u00eene vide. On peut traiter le cas s\u00e9par\u00e9ment en ajoutant les lignes :</p> <pre><code>def etoile(n):\n    if n == 0:\n        return '0*'\n    n_etoile = ''\n    while n &gt; 0:\n        ...\n</code></pre> <p>Exercice corrig\u00e9</p> <p>Un nombre harshad, ou nombre de Niven, est un entier naturel qui est divisible par la somme de ses chiffres dans une base donn\u00e9e [...]. En base dix, les vingt premiers nombres harshad strictement sup\u00e9rieurs \u00e0 10 sont (suite A005349 de l'OEIS) : 12, 18, 20, 21, 24, 27, 30, 36, 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80 et 81. Source : https://fr.wikipedia.org/wiki/Nombre_harshad.</p> <p>\u00c9crire un programme demande un nombre entier et affiche s'il est un nombre harshad ou pas.</p> R\u00e9ponse <pre><code>n = int(input())\nn_initial = n\nsomme = 0\nwhile n &gt; 0:\n    somme = somme + n % 10\n    n = n // 10\nif n_initial % somme == 0:\n    print(n_initial, \"est un nombre de harshad\")\nelse:\n    print(n_initial, \"n'est pas un nombre de harshad\")\n</code></pre>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#systeme-binaire-ou-base-2","title":"Syst\u00e8me binaire ou base 2","text":"<p>Cours</p> <p>En binaire, ou base 2, les seuls chiffres utilis\u00e9s pour \u00e9crire des nombres sont 0 et 1, aussi appel\u00e9s \u00ab bits \u00bb pour binary digits, ou \u00ab chiffres binaires \u00bb en fran\u00e7ais. </p> <p>8 bits forment un octet.</p> <p>Par exemple on peut \u00e9crire \\(1101\\), que l'on note aussi \\(1101_2\\), pour indiquer qu'il est \u00e9crit en binaire.</p> <p>Il convient \u00e9galement de ne pas lire ces nombres comme on lirait des nombres d\u00e9cimaux. Ainsi, \\(1101_2\\) ne se dit pas \u00ab mille cent un \u00bb mais plut\u00f4t \u00ab un un z\u00e9ro un \u00bb.</p> <p>Comme dans le syst\u00e8me d\u00e9cimal, c'est la position qui indique le poids de chaque bit dans un nombre. Mais en binaire, c'est une combinaison lin\u00e9aire de puissances de 2. Par exemple, les bits du nombre \\(1101_2\\) correspondent \u00e0 :</p> bits 1 1 0 1 i 3 2 1 0 \\(2^i\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) combinaison \\(1 \\times 2^3=8\\) \\(1 \\times 2^2=4\\) \\(0 \\times 2^1=0\\) \\(1 \\times 2^0=1\\) <p>\\(1101_2 = 1 \u00d7 2^3 + 1 \u00d7 2^2 + 0 \u00d7 2^1 + 1 \u00d7 2^0 = 13_{10}\\)</p> <p>Noter le \\(..._{10}\\) pour indiquer que \\(13\\) est un nombre en base 10.</p> <p>Cours</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, un nombre \\(n\\) qui s'\u00e9crit dans le syst\u00e8me binaire avec \\(p\\) bits \\(b_{p\u22121}b_{p\u22122}...b_2b_1b_0\\)  (chaque \\(b_i\\) est un bit valant 0 ou 1) a une valeur d\u00e9cimale \u00e9gale \u00e0 : </p> <p>\\(n = b_{p\u22121} \\times 2^{p\u22121}  + b_{p\u22122} \\times 2^{p\u22122} + ... +  b_2 \\times 2^2 + b_1 \\times 2^1  + b_0 \\times 2^0\\)</p> <p>ou encore avec la formule math\u00e9matique d'une somme de \\(0\\) \u00e0 \\(p-1\\) : \\(n = \\sum_{i=0}^{p-1} b_i \u00d7 2^i\\)</p>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#ecrire-un-nombre-binaire-en-decimal","title":"\u00c9crire un nombre binaire en d\u00e9cimal","text":"<p>La formule pr\u00e9c\u00e9dente permet d'\u00e9crire facilement un nombre binaire en d\u00e9cimal. Il suffit de multiplier chaque bit par la puissance de 2 correspondante et de faire la somme des valeurs obtenues. </p> <p>\u00c9num\u00e9rons les premiers nombres binaires et quelques autres :</p> binaire combinaison d\u00e9cimal \\(0\\) 0 0 \\(1\\) \\(1 \\times 2^0\\) 1 \\(10\\) \\(1 \\times 2^1\\) 2 \\(11\\) \\(1 \\times 2^1 + 1 \\times 2^0\\) 3 \\(100\\) \\(1 \\times 2^2\\) 4 \\(101\\) \\(1 \\times 2^2 + 1 \\times 2^0\\) 5 \\(110\\) \\(1 \\times 2^2 + 1 \\times 2^1\\) 6 \\(111\\) \\(1 \\times 2^2 + 1 \\times 2^1 + 1 \\times 2^0\\) 7 \\(1000\\) \\(1 \\times 2^3\\) 8 \\(1 \\space 0000\\) \\(1 \\times 2^4\\) 16 \\(10 \\space 0000\\) \\(1 \\times 2^5\\) 32 \\(100 \\space 0000\\) \\(1 \\times 2^6\\) 64 \\(1000 \\space 0000\\) \\(1 \\times 2^7\\) 128 \\(1111 \\space 1111\\) \\(1 \\times 2^8 + 1 \\times 2^7 + 1 \\times 2^6 +...1 \\times 2^0\\) 255 <p>Exercice corrig\u00e9</p> <p>Calculer la valeur d\u00e9cimale des nombres binaires suivants :</p> <ul> <li>11010</li> <li>10101</li> <li>11100110</li> </ul> R\u00e9ponse <p>\\(11010_2 = 1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^1 = 16 + 8 + 2 = 26_{10}\\)</p> <p>\\(1 \\space 0101_2 = 1 \\times 2^4 + 1 \\times 2^2 + 1 \\times 2^0 = 16 + 4 + 1= 21_{10}\\)</p> <p>\\(1110 \\space 0110_2 = 1 \\times 2^7 + 1 \\times 2^6 + 1 \\times 2^5 + 1 \\times 2^2 + 1 \\times 2^1 =  128 + 64 + 32 + 4 + 2=230_{10}\\)</p> <p>Traduisons cela en Python. Pour plus de simplicit\u00e9, on peut parcourir le nombre binaire de gauche \u00e0 droite.</p> <pre><code>def bin_to_dec(n):\n    \"\"\" str -&gt; int\n    Renvoie l'\u00e9criture d\u00e9cimale de la chaine de caract\u00e8re n repr\u00e9sentant un nombre binaire\n    \"\"\"\n    dec = 0\n    for i in range(len(n)):\n        dec = dec + int(n[-i-1]) * 2**i\n    return dec\n</code></pre> <p>En Python, les nombres binaires s'\u00e9crivent avec le pr\u00e9fixe <code>0b</code> et l'\u00e9quivalent en d\u00e9cimal est affich\u00e9 automatique dans la console :</p> <pre><code>&gt;&gt;&gt; 0b1101\n13\n</code></pre>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#ecrire-un-nombre-decimal-en-binaire","title":"\u00c9crire un nombre d\u00e9cimal en binaire","text":"<p>Il existe plusieurs m\u00e9thodes pour \u00e9crire un nombre d\u00e9cimal en binaire : </p> <ul> <li> <p>Trouver les puissances de 2 est la m\u00e9thode la plus simple qui aide \u00e0 comprendre la structure du binaire, mais elle est peu utilis\u00e9e en pratique.</p> </li> <li> <p>Effectuer des divisions successives par 2 est pratique pour un calcul algorithmique.</p> </li> <li> <p>Utiliser une fonction Python.</p> </li> </ul>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#trouver-les-puissances-de-2","title":"Trouver les puissances de 2","text":"<p>On peut faire l'op\u00e9ration inverse de l'\u00e9criture d'un nombre binaire en d\u00e9cimal en essayant de retrouver la combinaison lin\u00e9aire de puissances de 2 d'un nombre binaire.</p> <p>Cherchons pas exemple, l'\u00e9criture binaire du nombre \\(13_{10}\\). Il faut remplir le tableau des puissances de 2 suivant :</p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire ? ? ? ? ? <p>On pourrait commencer par remplir le tableau \u00e0 droite, du c\u00f4t\u00e9 des petites puissances de 2 : \\(2^0 = 1\\)</p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire ? ? ? ? 1 <p>Puis on continue :  \\(2^0 + 2^1 = 1+2=3\\)</p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire ? ? ? 1 1 <p>Et encore :  \\(2^0 + 2^1 + 2^2  = 1+2+4=7\\)</p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire ? ? 1 1 1 <p>Mais quand on arrive l\u00e0, on est coinc\u00e9 ! La puissance suivante est \\(2^3 = 8\\), c'est trop grand pour obtenir \\(13\\) et toutes les autres puissances seront encore plus grande. </p> <p>Il faut donc proc\u00e9der dans l'autre sens, en partant de la gauche, du c\u00f4t\u00e9 des grandes puissances<sup>2</sup>.</p> <p>\\(2^4 = 16\\), c'est plus grand que \\(13\\), on ne peut pas prendre le bit correspondant, on met 0 ! </p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire 0 ? ? ? ? <p>\\(2^3 = 8\\), c'est plus petit que \\(13\\), on met 1 pour le bit correspondant. Il reste \\(13-8=5\\) \u00e0 trouver. </p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire 0 1 ? ? ? <p>\\(2^2 = 4\\), c'est plus petit que \\(5\\), on met 1 pour le bit correspondant. Il reste \\(5-4=1\\) \u00e0 trouver. </p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire 0 1 1 ? ? <p>\\(2^1 = 2\\), c'est plus grand que  \\(1\\),  on ne peut pas prendre le bit correspondant, on met 0. </p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire 0 1 1 0 ? <p>\\(2^0 = 1\\), c'est le dernier bit que l'on cherchait, on met 1. </p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) binaire 0 1 1 0 1 <p>On a bien trouv\u00e9 l'\u00e9criture binaire de \\(13_{10}\\), c'est \\(1101_2\\).</p> <p>Voil\u00e0 l'algorithme que l'on a suivi :</p> <ul> <li>On rep\u00e8re la plus grande puissance de 2 plus petite ou \u00e9gale au nombre.</li> <li>On soustrait, puis on continue avec le reste.</li> <li>On met 1 si la puissance est utilis\u00e9e, 0 sinon.</li> </ul> <p>Exercice corrig\u00e9</p> <p>Compl\u00e9ter le tableau pour \u00e9crire \\(22_{10}\\) et \\(29_{10}\\) en binaire :</p> i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) \\(22_{10}\\) \\(29_{10}\\) R\u00e9ponse i 4 3 2 1 0 \\(2^i\\) \\(2^4=16\\) \\(2^3=8\\) \\(2^2=4\\) \\(2^1=2\\) \\(2^0=1\\) \\(22_{10}\\) 1 0 1 1 0 \\(= 10110_2\\) \\(29_{10}\\) 1 1 1 0 1 \\(= 11101_2\\) <p>C'est une m\u00e9thode simple et intuitive, mais en pratique elle est inefficace et peu utilis\u00e9e, en particulier pour les grands nombres, car elle consiste \u00e0 calculer et garder en m\u00e9moire de nombreuses puissances de 2 inutiles. </p>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#effectuer-des-divisions-successives-par-2","title":"Effectuer des divisions successives par 2","text":"<p>De la m\u00eame mani\u00e8re qu'on a utilis\u00e9e pr\u00e9c\u00e9demment pour trouver les chiffres en base 10 d'un nombre par une succession de divisions enti\u00e8res par 10, on peut \u00e9crire un nombre d\u00e9cimal \\(n\\) sous sa forme binaire \\(b_{p\u22121}b_{p\u22122}...b_2b_1b_0\\) en effectuant des divisions enti\u00e8res par 2 :</p> <ul> <li> <p>Le reste de la division enti\u00e8re de \\(n\\) par \\(2\\), <code>n % 2</code> en Python, renvoie \\(b_0\\). Cela permet d'obtenir le dernier bit de l'\u00e9criture binaire de \\(n\\).</p> </li> <li> <p>Le quotient de la division enti\u00e8re de \\(n\\) par \\(2\\), <code>n // 2</code> en Python, renvoie \\(b_{p\u22121}b_{p\u22122}...b_2b_1\\). On remplace \\(n\\) par ce nombre pour trouver les autres bits.</p> </li> </ul> <p>Il suffit alors de r\u00e9p\u00e9ter l'op\u00e9ration jusqu'\u00e0 ce que \\(n\\) soit \u00e9gal \u00e0 0, on aura bien obtenu tous les bits de l'\u00e9criture binaire de \\(n\\). </p> <p> Attention, on obtient les bits de la gauche vers la droite.</p> <p>Prenons l'exemple de \\(n_{10} = 13\\),  le reste de la division enti\u00e8re par 2 est 1 et le quotient 6.</p> <p> </p> <pre><code>&gt;&gt;&gt; 13 % 2\n1\n&gt;&gt;&gt; 13 // 2\n6\n</code></pre> <p>On a d\u00e9j\u00e0 trouv\u00e9 le dernier bit : 1. Continuons avec 6. Le reste de la division enti\u00e8re de 6 par 2 est 0 et le quotient 3.</p> <p> </p> <pre><code>&gt;&gt;&gt; 6 % 2\n0\n&gt;&gt;&gt; 6 // 2\n3\n</code></pre> <p>On obtient le bit 0. Continuons avec 3. Le reste de la division enti\u00e8re de 3 par 2 est 1 et le quotient 1.</p> <p> </p> <pre><code>&gt;&gt;&gt; 3 % 2\n1\n&gt;&gt;&gt; 3 // 2\n1\n</code></pre> <p>On obtient le bit 1. Continuons avec 1. Le reste de la division enti\u00e8re de 1 par 2 est 1 et le quotient 0.</p> <p> </p> <p><pre><code>&gt;&gt;&gt; 1 % 2\n1\n&gt;&gt;&gt; 1 // 2\n0\n</code></pre> On a obtenu le dernier bit, c'est encore 1.  Le quotient est 0, inutile de continuer les divisions, tous les bits ont \u00e9t\u00e9 trouv\u00e9s.</p> <p> </p> <p>On a obtenu les bits de l'\u00e9criture binaire de \\(13_{10}\\), mais  de gauche \u00e0 droite, il faut donc les lire de droite \u00e0 gauche pour trouver \\(1101_2\\).</p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire les nombres suivants en binaire :</p> <ul> <li> <p>178</p> </li> <li> <p>761</p> </li> </ul> R\u00e9ponse <p>\\(178_{10} = 10110010_2\\)</p> <p>\\(761_{10} = 1011111001_2\\)</p> <p>On peut traduire cet algorithme en Python, par exemple pour \u00e9crire une fonction <code>dec_to_bin</code> qui renvoie l'\u00e9criture binaire d'un nombre entier <code>n</code> :</p> <pre><code>def dec_to_bin(n):\n    \"\"\" int -&gt; str\n    Renvoie l'\u00e9criture binaire de l'entier n \n    \"\"\"\n    b = ''\n    while n &gt; 0:\n        b =  str(n % 2) + b     \n        n = n // 2\n    return b\n\n\n&gt;&gt;&gt; bin_to_dec(13)\n'1101'\n</code></pre> <p> Il faut \u00e9crire <code>b =  str(n % 2) + b</code> et non pas <code>b =  b + str(n % 2)</code>, c''est un bug classique, car le premier bit trouv\u00e9 est \\(b_0\\) et le dernier est \\(b_{p\u22121}\\).</p> <p>On note que le cas ou <code>n</code> est \u00e9gal \u00e0 <code>0</code>, la fonction n'entre pas dans la boucle <code>while</code> et renvoie une cha\u00eene vide. On peut traiter le cas s\u00e9par\u00e9ment au d\u00e9but de la fonction :</p> <pre><code>def dec_to_bin(n):\n    \"\"\" int -&gt; str\n    Renvoie l'\u00e9criture binaire de l'entier n \n    \"\"\"\n    if n == 0:\n        return '0'\n    b = ''\n    while n &gt; 0:\n        b =  str(n % 2) + b\n        n = n // 2\n    return b\n</code></pre>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#fonction-python-bin","title":"Fonction Python <code>bin</code>","text":"<p>En Python, il existe bien s\u00fbr une fonction <code>bin</code> qui permet d'\u00e9crire un nombre d\u00e9cimal en binaire, mais il est souvent interdit de l'utiliser dans le cadre de NSI :</p> <pre><code>&gt;&gt;&gt; bin(13)\n'0b1101'\n</code></pre>"},{"location":"types-et-valeurs-de-base/1-ecriture-entier-positif-en-base-b/#operations","title":"Op\u00e9rations","text":"<p>Les quatre op\u00e9rations de base (addition, soustraction, multiplication et division) restent exactement les m\u00eames qu'en \u00e9criture d\u00e9cimale, mais sont plus simples parce qu'il n'y a que les deux chiffres 0 et 1.</p> <ul> <li> <p>Addition</p> <p>On additionne bit \u00e0 bit en prenant soin d'aligner les bits de m\u00eame poids \u00e0 droite et on calcule de la droite vers la gauche en passant la retenue si n\u00e9cessaire. </p> <p>Les additions bit \u00e0 bit sont simples :</p> <ul> <li>0 + 0 = 0    </li> <li>0 + 1 = 1</li> <li>1 + 0 = 1</li> <li>1 + 1 = 10  passer la retenue de 1 \u00e0 droite</li> </ul> <p>Exemple : Calculer  \\(101101 + 1100\\)</p> <p> </p> <p>On aligne d'abord \u00e0 gauche les bits des deux nombres l'un au dessus de l'autre. Puis on commence par ajouter les deux bits les plus \u00e0 droite, \\(1 + 0 = 1\\), puis on continue vers la gauche, \\(0 + 0 = 0\\). On arrive \u00e0 \\(1 + 1\\), ce qui fait \\(10\\), on garde le \\(0\\) et on ajoute une retenue de \\(1\\) \u00e0 gauche. On ajoute les bits suivants, avec cette retenue on a \\(1 + 1 + 1\\), ce qui fait \\(11\\), on garde le \\(1\\) et on ajoute une nouvelle retenue de \\(1\\) encore \u00e0 gauche. Les deux derniers bits ne sont que sur le premier nombre, on fait comme si c'\u00e9tait des \\(0\\) sur le second pour terminer l'addition. On trouve le r\u00e9sultat final, \\(101101 + 1100 = 111011\\), c'est l'\u00e9quivalent binaire de \\(45+12=57\\) en d\u00e9cimal.</p> <p>Exercice corrig\u00e9</p> <p>Calculer les additions suivantes en binaire :</p> <ul> <li> <p>\\(10101 + 1011\\)</p> </li> <li> <p>\\(11101 + 11011\\)</p> </li> <li> <p>\\(11010 + 11010\\)</p> </li> </ul> R\u00e9ponse <p>\\(10101 + 1011 = 11110\\)</p> <p>\\(11101 + 11011 = 111000\\)</p> <p>\\(11010 + 11010 = 110100\\)</p> </li> <li> <p>Soustraction</p> <p>Comme pour l'addition, on soustrait bit \u00e0 bit en prenant soin d'aligner les bits de m\u00eame poids \u00e0 droite et on calcule de la droite vers la gauche en passant la retenue si n\u00e9cessaire. </p> <p>Les soustractions bit \u00e0 bit sont simples :</p> <ul> <li>0 - 0 = 0    </li> <li>1 - 0 = 1</li> <li>1 - 1 = 0</li> <li>0 - 1.   Il faut calculer 10 - 1 = 1  et passer la retenue de 1 \u00e0 droite</li> </ul> <p>Exemple : Calculer  \\(110001 - 11100\\)</p> <p> </p> <p>On aligne d'abord \u00e0 gauche les bits des deux nombres le plus grand au dessus de l'autre. Puis on commence par soustraire les deux bits les plus \u00e0 droite, \\(1 - 0 = 1\\), et on remonte vers la gauche, \\(0 - 0 = 0\\). On arrive \u00e0 \\(0 - 1\\), on garde le \\(0\\) et on ajoute la retenue de \\(1\\) au chiffre du bas \u00e0 droite. Ici on applique la m\u00e9thode fran\u00e7aise (ou m\u00e9thode \u00ab par compensation \u00bb)<sup>3</sup> qui consiste \u00e0 ajouter la retenue \u00e0 la gauche du nombre en bas : \\(11 + 1 = 100\\). On continue la soustraction en rempla\u00e7ant ces deux bits \\(11\\) par \\(100\\). On obtient \\(0 - 0 = 0\\), puis \\(1-0=1\\), et enfin \\(1-1=0\\). On trouve le r\u00e9sultat final, \\(110001 - 11100 = 010101\\), ou \\(10101\\) en omettant le \\(0\\) inutile \u00e0 gauche, c'est l'\u00e9quivalent binaire de \\(49-28=21\\) en d\u00e9cimal.</p> <p>Exercice corrig\u00e9</p> <p>Calculer les additions suivantes en binaire :</p> <ul> <li> <p>\\(10101 - 1001\\)</p> </li> <li> <p>\\(10000 - 1\\)</p> </li> <li> <p>\\(1101001 - 1011011\\)</p> </li> </ul> R\u00e9ponse <p>\\(10101 - 1001 = 1100\\)</p> <p>\\(10000 - 1 = 111000\\)</p> <p>\\(1101001 - 1011011 = 1110\\)</p> </li> <li> <p>Multiplication</p> <p>On a fait dans un exercice pr\u00e9c\u00e9dant la multiplication d'un nombre binaire par 2 en l'ajoutant \u00e0 lui-m\u00eame : \\(11010 + 11010 = 110100\\)</p> <p>On aurait pu aussi poser cette multiplication bit \u00e0 bit comme pour une multiplication dans le syst\u00e8me d\u00e9cimal, en notant que 2 s'\u00e9crit 10 en binaire :</p> <p> </p> <p>On commence par multiplier \\(11010\\) par le \\(0\\) de \\(10\\) et on \u00e9crit le r\u00e9sultat, \\(0\\), sur la premi\u00e8re ligne. Puis on multiplie \\(11010\\) par le \\(1\\) de \\(10\\) et on \u00e9crit le r\u00e9sultat, \\(11010\\), sur la seconde ligne en d\u00e9calant d'un bit vers la gauche. On fait ensuite la somme des deux lignes et on obtient le r\u00e9sultat final \\(110100\\).</p> <p>On constate que multiplier un nombre binaire par 2 (\\(= 10_2\\) en binaire) se fait en ajoutant un z\u00e9ro \u00e0 droite.</p> <p>En effet, si on reprend la d\u00e9composition en puissances de 2 de \\(11010_2\\) (ou \\(26_{10}\\)) :</p> <p>\\(11010_2 = 1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^1\\)</p> <p>quand on le multiplie par 2, toutes les puissances augmentent d'une unit\u00e9. On obtient bien le nombre binaire :</p> <p>\\(2 \\times(1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^1) = 1 \\times 2^5 + 1 \\times 2^4 + 1 \\times 2^2 = 110100_2\\)</p> <p>qui s'\u00e9crit \\(52_{10}\\) en d\u00e9cimal.</p> <p>Cours</p> <p>Quand on ajoute un bit 0 \u00e0 droite d'un nombre, tous les bits sont d\u00e9cal\u00e9s vers la droite, les puissances de 2 correspondantes sont augment\u00e9es d'une unit\u00e9, donc le nombre est multipli\u00e9 par 2.</p> <p>De la m\u00eame fa\u00e7on, on peut multiplier deux nombres binaires ensembles.</p> <p>Exercice corrig\u00e9</p> <p>Calculer les additions suivantes en binaire :</p> <ul> <li> <p>\\(1101 \\times 11\\)</p> </li> <li> <p>\\(10101 \\times 101\\)</p> </li> <li> <p>\\(1000 \\times 1000\\)</p> </li> </ul> R\u00e9ponse <p>\\(1101 \\times 11 = 100111\\)</p> <p>\\(10101 \\times 101 = 1101001\\)</p> <p>\\(1000 \\times 1000 = 1000000\\)</p> </li> </ul> <ol> <li> <p>Dans l'\u00e9criture \\(d_{p\u22121}d_{p\u22122}...d_2d_1d_0\\), le chiffre \\(d_{p\u22121}\\) est dit de \u00ab poids fort \u00bb et \\(d_0\\) de \u00ab poids faible \u00bb. On a l'habitude d'\u00e9crire les nombres en partant du poids le plus fort \u00e0 gauche jusqu'au poids le plus faible \u00e0 droite, cette repr\u00e9sentation est appel\u00e9e \u00ab gros boutisme \u00bb, ou \u00ab big endian \u00bb, mais certains syst\u00e8mes d'exploitation utilisent la convention inverse, appel\u00e9e \u00ab petit boutisme \u00bb, ou \u00ab little endian \u00bb.\u00a0\u21a9</p> </li> <li> <p>Ce type d'algorithme appartient \u00e0 la famille des \u00ab algorithmes gloutons \u00bb.\u00a0\u21a9</p> </li> <li> <p>Il existe une autre m\u00e9thode, appel\u00e9e m\u00e9thode anglo-saxonne \u00ab par emprunt \u00bb ou \u00ab par cassage \u00bb, qui consiste \u00e0 soustraire la retenue du nombre du haut.\u00a0\u21a9</p> </li> </ol>"},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/","title":"Repr\u00e9sentation binaire d\u2019un entier relatif","text":""},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/#nombres-de-bits","title":"Nombres de bits","text":"<p>On a vu qu'un nombre \\(n\\) qui s'\u00e9crit dans le syst\u00e8me binaire avec \\(p\\) bits \\(b_{p\u22121}b_{p\u22122}...b_2b_1b_0\\)  (chaque \\(b_i\\) est un bit valant 0 ou 1) a une valeur d\u00e9cimale \u00e9gale \u00e0 : </p> <p>\\(n = b_{p\u22121} \\times 2^{p\u22121}  + b_{p\u22122} \\times 2^{p\u22122} + ... +  b_2 \\times 2^2 + b_1 \\times 2^1  + b_0 \\times 2^0\\)</p> <p>ou encore avec la formule math\u00e9matique d'une somme de \\(0\\) \u00e0 \\(p-1\\) : \\(n = \\sum_{i=0}^{p-1} b_i \u00d7 2^i\\)</p> <p>Cours</p> <p>On peut \u00e9crire les 2 nombres 0 et 1 avec 1 seul bit, 4 nombres allant de 0 \u00e0 3 avec 2 bits, 8 nombres allant de 0 \u00e0 7 avec 3 bits, ... \\(2^p\\) nombres allant de 0 \u00e0 \\(2^p-1\\) avec \\(p\\) bits.</p> <p>Exercice corrig\u00e9</p> <ol> <li> <p>Quel est le plus grand nombre d\u00e9cimal repr\u00e9sentable en binaire sur 16 bits (2 octets) ?</p> </li> <li> <p>Combien de bits doit-on utiliser au minimum pour repr\u00e9senter en base 2 le nombre entier 72 ?</p> </li> </ol> R\u00e9ponse <ol> <li> <p>\\(2^{16}-1 = 65535\\)</p> </li> <li> <p>7 bits permettent de repr\u00e9senter les 128 nombres allant de 0 \u00e0 127.</p> </li> </ol>"},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/#nombre-de-bits-necessaires-pour-une-somme","title":"Nombre de bits n\u00e9cessaires pour une somme","text":"<p>Si on additionne deux nombres entiers qui s'\u00e9crivent respectivement dans le syst\u00e8me binaire avec \\(p\\) et \\(q\\) bits, la somme s'\u00e9crit avec le plus grand nombre de bits entre \\(p\\) et \\(q\\) plus 1 pour prendre en compte le cas d'une retenue sur le bit de poids le plus fort :</p> <p>\\(bits(a + b) \u2264 max(bits(a), bits(b)) + 1\\)</p> <p>o\u00f9 \\(bits(n)\\) est le nombre de bits n\u00e9cessaires pour \u00e9crire \\(n\\) en binaire.</p> <p>De la m\u00eame fa\u00e7on, si on multiplie deux nombres entiers qui s'\u00e9crivent respectivement dans le syst\u00e8me binaire avec \\(p\\) et \\(q\\) bits, le produit s'\u00e9crit avec \\(p+q\\) bits :</p> <p>\\(bits(a\u00d7b) \u2264 bits(a) + bits(b)\\)</p> <p>Cours</p> <p>Si a et b sont deux nombres entiers, le nombre de bits n\u00e9cessaire pour \u00e9crire leur somme et leur produit est au maximum :</p> <ul> <li> <p>\\(bits(a + b) \\leq max(bits(a), bits(b)) + 1\\)</p> </li> <li> <p>\\(bits(a \\times b) \\leq bits(a) + bits(b)\\)</p> </li> </ul> <p>o\u00f9 \\(bits(n)\\) est le nombre de bits n\u00e9cessaires pour \u00e9crire \\(n\\) en binaire.</p> <p>Exemple :</p> <p>Si \\(a = 13\\) (4 bits) et \\(b = 7\\) (3 bits).</p> <p>\\(a + b = 20\\), et  \\(20 &lt; 2^5\\) (\\(2^5 = 32\\)), donc 5 bits suffisent.</p> <p>\\(a \\times b = 91\\). Or \\(91 &lt; 2^7\\) (\\(2^7 = 128\\)), donc 7 bits suffisent.</p> <p>Exercice corrig\u00e9</p> <p>Si \\(a = 200\\) et  \\(b = 58\\), combien de bits au maximum sont n\u00e9cessaires pour \u00e9crire  \\(a + b\\) ? Pour  \\(a \\times b\\) ?</p> R\u00e9ponse <p>a s'\u00e9crit avec 8 bits car \\(200 &lt; 2^8\\) (\\(2^8 = 256\\)), b s'\u00e9crit avec 6 bits car \\(58 &lt; 2^6\\) (\\(2^6 = 64\\)),  donc   \\(a + b\\) s'\u00e9crit avec au maximum 9 bits et \\(a \\times b\\) avec 14 bits.</p>"},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/#complement-a-2","title":"Compl\u00e9ment \u00e0 2","text":"<p>En binaire, les ordinateurs savent repr\u00e9senter naturellement les entiers positifs. Mais pour les entiers relatifs (positifs et n\u00e9gatifs), il faut une convention. L\u2019une des plus utilis\u00e9es est le compl\u00e9ment \u00e0 2, car elle simplifie les calculs (pas besoin de distinguer signe et valeur).</p>"},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/#principe-du-complement-a-2","title":"Principe du compl\u00e9ment \u00e0 2","text":"<p>a) Repr\u00e9sentation sur n bits</p> <ul> <li> <p>Un entier est cod\u00e9 sur n bits.</p> </li> <li> <p>Les entiers positifs (y compris 0) se codent comme d\u2019habitude en binaire.</p> </li> <li> <p>Pour les entiers n\u00e9gatifs, on utilise la r\u00e8gle suivante : $ x&lt;0\u21d2code(x)=2^n+x$. C\u2019est-\u00e0-dire qu\u2019on ajoute \\(2^n\\) au nombre n\u00e9gatif.</p> </li> </ul> <p>Exemple sur 4 bits : Capacit\u00e9 : de \u22128 \u00e0 +7.</p> D\u00e9cimal Binaire (compl\u00e9ment \u00e0 2) -8 1000 -7 1001 -6 1010 -5 1011 -4 1100 -3 1101 -2 1110 -1 1111 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111"},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/#comment-calculer-le-complement-a-2-dun-nombre-negatif","title":"Comment calculer le compl\u00e9ment \u00e0 2 d\u2019un nombre n\u00e9gatif ?","text":"<p>Pour trouver la repr\u00e9sentation binaire en compl\u00e9ment \u00e0 2 d\u2019un entier n\u00e9gatif :</p> <ol> <li>\u00c9crire sa valeur absolue en binaire sur n bits.</li> <li>Prendre le compl\u00e9ment \u00e0 1 (inverser tous les bits).</li> <li>Ajouter 1.</li> </ol> <p>Exemple : coder  \u22125 sur 4 bits</p> <ol> <li>5 = 0101</li> <li>Compl\u00e9ment \u00e0 1 \u2192 1010</li> <li>+1 \u2192 1011</li> </ol> <p>Donc  \u22125 = 1011 (comme dans le tableau).</p>"},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/#avantage-du-complement-a-2","title":"Avantage du compl\u00e9ment \u00e0 2","text":"<p>Les op\u00e9rations d\u2019addition et de soustraction fonctionnent de la m\u00eame fa\u00e7on que pour les entiers positifs. Les op\u00e9rations arithm\u00e9tiques s\u2019effectuent sans distinction, comme avec des entiers positifs.</p> <p>On ne distingue plus les cas : la machine effectue les calculs en binaire et le r\u00e9sultat est correct tant qu\u2019on reste dans la plage  \\([\u22122^{n-1}, 2^{n-1}-1]\\).</p> <p>Exemple sur 4 bits : \u22123+2=\u22121</p> <p>\u22123 = 1101 + 2 = 0010</p> <p>Somme binaire : 1101 + 0010 = 1111</p> <p>1111 = \u22121.</p> <ol> <li>Plage de valeurs</li> </ol> <p>Sur n bits, le compl\u00e9ment \u00e0 2 permet de repr\u00e9senter :  \\([\u22122^{n-1}, 2^{n-1}-1]\\)</p> <p>Exemple :</p> <ul> <li>Sur 4 bits : [\u22128,+7]</li> <li>Sur 8 bits : [\u2212128,+127]</li> <li>Sur 32 bits :  \\([\u22122^31, ,+2^31 \u22121]\\)</li> </ul>"},{"location":"types-et-valeurs-de-base/2-representation-binaire-entier-relatif/#tailles-courantes","title":"Tailles courantes","text":"<p>Il s\u2019agit de d\u00e9crire les tailles courantes des entiers (8, 16, 32 ou 64 bits). Il est possible d\u2019\u00e9voquer  la repr\u00e9sentation des entiers de taille arbitraire de Python.</p>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/","title":"Repr\u00e9sentation des entiers en machine, entiers relatifs","text":""},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#representation-en-machine-et-depassement","title":"Repr\u00e9sentation en machine et d\u00e9passement","text":"<p>En Python, le type <code>int</code> permet de repr\u00e9senter des nombre entiers de taille arbitraire (Big Integers) sans limite de taille. Lorsqu'on stocke un entier dans une variable, Python alloue dynamiquement un nombre de bits suffisants pour le repr\u00e9senter en m\u00e9moire. Cela permet d'effectuer des calculs avec des nombres entiers extr\u00eamement grands, limit\u00e9s uniquement par la m\u00e9moire disponible sur l'ordinateur.</p> <pre><code>&gt;&gt;&gt; 2**100\n1267650600228229401496703205376\n&gt;&gt;&gt; 2**100 * 3**50 \n910043815000214977332758527534256632492715260325658624\n</code></pre> <p>Mais ce n'est pas le cas de tous les langages informatiques. Dans la plupart des langages (C, Java, etc.), les entiers sont g\u00e9n\u00e9ralement stock\u00e9s en utilisant un nombre de bits fixe pr\u00e9d\u00e9fini. Les tailles standard sont des puissances de 2 en bits, correspondant souvent \u00e0 la taille des registres du processeur, souvent 32 ou 64 bits. </p> <p>L'utilisation d'une taille fixe pose le probl\u00e8me du d\u00e9passement (overflow). Lorsqu'une op\u00e9ration arithm\u00e9tique (comme l'addition ou la multiplication) produit un r\u00e9sultat qui sort de la plage de valeurs permise par le nombre de bits allou\u00e9s, il y a d\u00e9passement. </p> <p>Prenons l'exemple d'une addition de deux entiers naturels stock\u00e9s sur 8 bits : \\(150+150=300\\). L'ordinateur effectue une somme en binaire \u00e9quivalente, \u200b1001 0110 + 1001 0110, mais le r\u00e9sultat comporte 9 bits \u00e0 cause de la retenue : 1 0010 1100. Cela d\u00e9passe la capacit\u00e9 de stockage de 8 bits, le premier bit est alors ignor\u00e9 et l'ordinateur ne garde que les 8 derniers bits, 0010 1100, c'est-\u00e0-dire 44 ce qui est bien s\u00fbr faux ! </p> <p>M\u00eame si certains langages informatique offrent des types d'entiers Big Integer \u00e9quivalents \u00e0 <code>int</code> en Python qui offrent l'avantage d'\u00e9liminer les erreurs de d\u00e9passement, les op\u00e9rations sont plus lentes que les op\u00e9rations natives d'un processeur sur des entiers tailles fixes et il n'est pas toujours int\u00e9ressant de les utiliser. Il est souvent pr\u00e9f\u00e9rable de comprendre le nombre de bits utilis\u00e9s et de choisir un type d'entier adapt\u00e9 \u00e0 la taille des nombres manipul\u00e9s.</p>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#nombres-de-bits","title":"Nombres de bits","text":"<p>On a vu pr\u00e9c\u00e9demment qu'un nombre qui s'\u00e9crit dans le syst\u00e8me binaire avec \\(n\\) bits \\(b_{n\u22121}b_{n\u22122}...b_2b_1b_0\\)  (chaque \\(b_i\\) est un bit valant 0 ou 1) a une valeur d\u00e9cimale \u00e9gale \u00e0 : </p> <p>\\(b_{n\u22121} \\times 2^{n\u22121}  + b_{n\u22122} \\times 2^{n\u22122} + ... +  b_2 \\times 2^2 + b_1 \\times 2^1  + b_0 \\times 2^0\\)</p> <p>ou encore avec la formule math\u00e9matique d'une somme de \\(0\\) \u00e0 \\(n-1\\) : \\(\\sum_{i=0}^{n-1} b_i \u00d7 2^i\\)</p> <p>On peut \u00e9crire les 2 nombres 0 et 1 avec 1 seul bit, 4 nombres allant de 0 \u00e0 3 avec 2 bits, 8 nombres allant de 0 \u00e0 7 avec 3 bits, ... \\(2^n\\) nombres allant de 0 \u00e0 \\(2^n-1\\) avec \\(n\\) bits.</p> <p>Cours</p> <p>Avec \\(n\\) bits, on peut \u00e9crire \\(2^n\\) nombres entiers naturels (positifs), allant de \\(0\\) \u00e0 \\(2^n-1\\).</p> <p>Exercice corrig\u00e9</p> <ol> <li> <p>En C, le type <code>unsigned short int</code> permet de stocker les entiers positifs sur 2 octets (16 bits). Quel est le plus grand nombre entier accept\u00e9 ?</p> </li> <li> <p>On donne les puissances de 2 suivantes : \\(2^0 = 1\\), \\(2^1 = 2\\), \\(2^2 = 4\\), \\(2^3 = 8\\), \\(2^4 = 16\\), \\(2^5 = 32\\), \\(2^6 = 64\\), \\(2^7 = 128\\) et \\(2^8 = 256\\).     Combien de bits doit-on utiliser au minimum pour repr\u00e9senter le nombre entier 72 ?</p> </li> </ol> R\u00e9ponse <ol> <li> <p>\\(2^{16}-1 = 65535\\)</p> </li> <li> <p>7 bits permettent de repr\u00e9senter les 128 nombres allant de 0 \u00e0 127.</p> </li> </ol>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#nombre-de-bits-necessaires-pour-une-somme-et-un-produit","title":"Nombre de bits n\u00e9cessaires pour une somme et un produit","text":"<p>Si on additionne deux nombres entiers qui s'\u00e9crivent respectivement dans le syst\u00e8me binaire avec \\(p\\) et \\(q\\) bits, la somme s'\u00e9crit avec le plus grand nombre de bits entre \\(p\\) et \\(q\\), auquel on ajoute \u00e9ventuellement 1 pour prendre en compte le cas d'une retenue sur le bit de poids le plus fort. La somme s'\u00e9crit donc avec au maximum \\(max(p, q) + 1\\) bits.</p> <p>Prenons par exemple \\(a = 13\\) (4 bits) et \\(b = 7\\) (3 bits). D'apr\u00e8s cette formule, la somme de \\(a\\) et \\(b\\) s'\u00e9crit donc sur \\(max(4, 3) + 1 = 5\\) bits ou moins. En effet \\(a + b = 20\\) et \\(20\\) est inf\u00e9rieur ou \u00e9gal \u00e0 \\(2^5 - 1 = 31\\), donc 5 bits suffisent.</p> <p> </p> <p>De la m\u00eame fa\u00e7on, si on multiplie deux nombres entiers qui s'\u00e9crivent respectivement dans le syst\u00e8me binaire avec \\(p\\) et \\(q\\) bits, on obtient le produit en ajoutant jusqu'\u00e0 \\(q-1\\) bits aux \\(p\\) bits du premier nombre auxquels il faut encore ajouter 1 pour prendre en compte le cas d'une retenue sur le bit de poids le plus fort. Le produit s'\u00e9crit donc avec au maximum \\(p+q\\) bits.</p> <p>Cours</p> <p>Si \\(a\\) et \\(b\\) sont deux nombres entiers, les nombres de bits n\u00e9cessaires pour \u00e9crire leur somme et leur produit v\u00e9rifient :</p> <ul> <li> <p>\\(bits(a + b) \\leq max(bits(a), bits(b)) + 1\\)</p> </li> <li> <p>\\(bits(a \\times b) \\leq bits(a) + bits(b)\\)</p> </li> </ul> <p>o\u00f9 \\(bits(n)\\) est le nombre de bits n\u00e9cessaires pour \u00e9crire \\(n\\) en binaire.</p> <p>Exemple :</p> <p>Si \\(a = 13\\) (4 bits) et \\(b = 7\\) (3 bits).</p> <p>\\(a + b = 20\\) et  \\(20 &lt;= 2^5 - 1\\) (\\(2^5 = 32\\)), donc 5 bits suffisent.</p> <p>\\(a \\times b = 91\\) et \\(91 &lt;= 2^7 - 1\\) (\\(2^7 = 128\\)), donc 7 bits suffisent.</p> <p>Exercice corrig\u00e9</p> <p>Si \\(a = 200\\) et  \\(b = 58\\), combien de bits au maximum sont n\u00e9cessaires pour \u00e9crire  \\(a + b\\) ? Pour  \\(a \\times b\\) ?</p> R\u00e9ponse <p>a s'\u00e9crit avec 8 bits car \\(200 &lt; 2^8\\) (\\(2^8 = 256\\)), b s'\u00e9crit avec 6 bits car \\(58 &lt; 2^6\\) (\\(2^6 = 64\\)),  donc   \\(a + b\\) s'\u00e9crit avec au maximum 9 bits et \\(a \\times b\\) avec 14 bits.</p>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#representation-binaire-des-entiers-relatifs","title":"Repr\u00e9sentation binaire des entiers relatifs","text":"<p>On a vu comment les ordinateurs encodent naturellement les entiers positifs en binaire. Mais comment faire pour les entiers relatifs qui peuvent \u00eatre positifs ou n\u00e9gatifs ? En informatique on dit que ces entiers sont sign\u00e9s, car ils ont un signe  \u00ab + \u00bb ou  \u00ab - \u00bb. Dans ce cas, l'encodage le plus souvent utilis\u00e9 est le compl\u00e9ment \u00e0 2 qui offre l'avantage de simplifier les calculs en ne distinguant pas le signe et de la valeur. </p>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#principe-du-complement-a-2","title":"Principe du compl\u00e9ment \u00e0 2","text":"<p>Avec \\(n\\) bits on peut repr\u00e9senter les \\(2^n\\) entiers positifs entre \\(0\\) et \\(2^n - 1\\). Par exemple sur 4 bits, on peut repr\u00e9senter les 16 (=\\(2^4\\)) entiers positifs compris entre 0 et 15 :</p> 0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <p>L'id\u00e9e du compl\u00e9ment \u00e0 2 et de partager la plage de nombres binaires disponibles sur n bits en deux parties \u00e9gales : </p> <ul> <li> <p>La premi\u00e8re moiti\u00e9, contenant les \\(2^{n-1}\\) premiers nombres binaires, permet de repr\u00e9senter les entiers positifs entre 0 et \\(2^{n-1} - 1\\). Par exemple sur 4 bits :</p> 0000 0001 0010 0011 0100 0101 0110 0111 0 1 2 3 4 5 6 7 </li> <li> <p>La seconde moiti\u00e9, contenant les \\(2^{n-1}\\) nombres binaires suivants, permet de repr\u00e9senter les entiers positifs entre \\(-2^{n-1}\\) et \\(-1\\). Par exemple sur 4 bits :</p> 1000 1001 1010 1011 1100 1101 1110 1111 -8 -7 -6 -5 -4 -3 -2 -1 </li> </ul> <p>Autrement dit, on ajoute \\(2^n\\) aux nombres n\u00e9gatifs pour obtenir leur repr\u00e9sentation binaire<sup>1</sup>. Par exemple sur 4 bits :</p> <ul> <li>\\(-1\\) est repr\u00e9sent\u00e9 par \\(-1 + 16 = 15\\) en binaire : 1111.</li> <li>\\(-2\\) est repr\u00e9sent\u00e9 par \\(-2 + 16 = 14\\) en binaire : 1110.</li> <li>...</li> <li>\\(-8\\) est repr\u00e9sent\u00e9 par \\(-8 + 16 = 8\\) en binaire : 1000.</li> </ul> <p>On observe imm\u00e9diatement un premier avantage du compl\u00e9ment \u00e0 2 : il permet d'identifier imm\u00e9diatement le signe d'un nombre juste en observant son premier bit :  \\(0\\) pour les nombres n\u00e9gatifs, \\(1\\) pour les positifs. Ce premier bit est appel\u00e9 \u00ab bit de signe \u00bb.</p> <p>On peut toujours repr\u00e9senter \\(2^n\\) nombres entiers relatifs sur n bits avec le compl\u00e9ment \u00e0 2, mais \u00e0 la diff\u00e9rence des nombres positifs, les entiers repr\u00e9sent\u00e9s par le complement \u00e0 deux vont de \\(\u22122^{n-1}\\) \u00e0 \\(2^{n-1} - 1\\).</p> <p>Voici les plages d'entiers que l'on peut repr\u00e9senter avec les nombres de bits les plus courants :</p> n bits Plage d'entiers naturels (non sign\u00e9s) Plage d'entiers relatifs (compl\u00e9ment \u00e0 2) 4 bits \\([0, 2^4 - 1] = [0, 15]\\) \\([-2^3, 2^3 - 1] = [-8, 7]\\) 8 bits \\([0, 2^8 - 1] = [0, 255]\\) \\([-2^7, 2^7 - 1] = [-128, 127]\\) 16 bits \\([0, 2^{16} - 1] = [0, 65\\ 535]\\) \\([-2^{15}, 2^{15} - 1] = [-32\\ 768, 32\\ 767]\\) 32 bits \\([0, \\approx 4,29 \\times 10^9]\\) \\([\\approx -2,14 \\times 10^9, \\approx 2,14 \\times 10^9]\\) 64 bits \\([0, \\approx 1,84 \\times 10^{19}]\\) \\([\\approx -9,22 \\times 10^{18}, \\approx 9,22 \\times 10^{18}]\\) <p>Noter qu'il y a toujours un nombre n\u00e9gatif de plus que les positifs car \\(0\\) est repr\u00e9sent\u00e9 avec les positifs.</p> <p>Cours</p> <p>Le compl\u00e9ment \u00e0 2 permet de stocker en machine les nombres entiers relatifs, dit \u00ab entiers sign\u00e9s \u00bb, en binaire sur un nombre de bits fix\u00e9. </p> <p>Avec un codage sur \\(n\\)  bits :</p> <ul> <li> <p>Les entiers positifs (y compris 0) sont repr\u00e9sent\u00e9s de mani\u00e8re usuelle par leur valeur. </p> </li> <li> <p>Les entiers n\u00e9gatifs sont repr\u00e9sent\u00e9s par leur valeur \u00e0 laquelle on ajoute \\(2^n\\). </p> </li> <li> <p>Le premier bit, dit \u00ab bit de signe \u00bb, indique le signe du nombre : 0 s'il est positif, 1 s'il est n\u00e9gatif. Les \\(n-1\\) bits suivants indiquent la valeur du nombre ( attention au risque de d\u00e9passement). </p> </li> <li> <p>Cette m\u00e9thode permet de repr\u00e9senter les \\(2^n\\) nombres entiers de \\(\u22122^{n-1}\\) \u00e0 \\(2^{n-1}-1\\).</p> </li> </ul>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#avantage-du-complement-a-2","title":"Avantage du compl\u00e9ment \u00e0 2","text":"<p>L'avantage du compl\u00e9ment \u00e0 2 est d'encoder les entiers relatifs de telle fa\u00e7on que la somme bit \u00e0 bit d'un nombre et de son oppos\u00e9, en ignorant le d\u00e9passement \u00e9ventuel, est \u00e9gale \u00e0 0.</p> <p>Par exemple \\(5_{10}\\) = \\(0101_{2}\\) et \\(\u22125_{10}\\) = \\(1011_{2}\\) donne \\(\u22125_{10} + 5_{10}\\) = \\(1011_{2} + 0101_{2}\\) = \\(0000_{2}\\) (noter que la derni\u00e8re retenue disparait sur 4 bits). Cela permet d'effectuer toutes les op\u00e9rations d\u2019addition et de soustraction sur des entiers relatifs de la m\u00eame fa\u00e7on que pour les entiers positifs, sans distinction du signe des nombres (tant qu\u2019on reste dans la plage \\([\u22122^{n-1}, 2^{n-1}-1]\\)).</p> <p>Par exemple, calculons \u22125 + 2 comme le ferait un ordinateur sur 4 bits :</p> <ul> <li> <p>\u22125 sur 4 bits : 1011</p> </li> <li> <p>2 sur 4 bits : 0010</p> </li> <li> <p>Somme binaire : 1011 + 0010 = 1101. On obtient le r\u00e9sultat attendu, \u22123 !</p> </li> </ul>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#encoder-un-entier-negatif-sur-n-bits","title":"Encoder un entier n\u00e9gatif sur n bits","text":"<p>Bien s\u00fbr on peut encoder un entier n\u00e9gatif sur n bits en \u00e9crivant en binaire sa valeur ajout\u00e9e de \\(2^n\\). Par exemple pour \u00e9crire -5 sur 4 bits, il suffit d\u00e9crire \\(-5 + 2^4 = -5 + 16 = 11\\) en binaire. On obtient \\(1011\\).</p> <p>Mais un ordinateur ne fait pas comme \u00e7a, cela serait trop long. Les op\u00e9rations bits \u00e0 bits du compl\u00e9ment \u00e0 2 sont beaucoup plus rapide.</p> <p>Cours</p> <p>En machine, le compl\u00e9ment \u00e0 2 d'un nombre n\u00e9gatif est obtenu en effectuant les op\u00e9rations suivantes :</p> <ol> <li> <p>\u00c9crire en binaire le nombre positif correspondant.</p> </li> <li> <p>Inverser tous les bits (\u00ab compl\u00e9ment \u00e0 1 \u00bb) :</p> <ul> <li>0  devient  1 </li> <li>1  devient  0 </li> </ul> </li> <li> <p>Ajouter 1, en ignorant le d\u00e9passement \u00e9ventuel (\u00ab compl\u00e9ment \u00e0 2 \u00bb).</p> </li> </ol> <p>Par exemple, pour coder -5 sur 4 bits : </p> <ol> <li>5 en binaire \u2192 0101</li> <li>Compl\u00e9ment \u00e0 1 \u2192 1010</li> <li>+1 \u2192 1011</li> </ol> <p>Donc -26 est encod\u00e9 par 1011 sur 4 bits.</p> <p>Noter que sur 8 bits (1 octet) on obtient  :</p> <ol> <li>5 en binaire \u2192 0000 0101</li> <li>Compl\u00e9ment \u00e0 1 \u2192 1111 1010</li> <li>+1 \u2192 1111 1011</li> </ol> <p>Exercice corrig\u00e9</p> <p>Encoder -3, -13 et -26  sur 1 octet  ?</p> R\u00e9ponse <ol> <li>3 en binaire  \u2192 0000 0011</li> <li>Compl\u00e9ment \u00e0 1 \u2192 1111 1100</li> <li>+1 \u2192 1111 1101</li> </ol> <p>-3 s'encode 1111 1101 sur 1 octet.</p> <ol> <li>13 en binaire  \u2192 0000 1101</li> <li>Compl\u00e9ment \u00e0 1 \u2192 1111 0010</li> <li>+1 \u2192 1111 0011</li> </ol> <p>-13 s'encode 1111 0011 sur 1 octet.</p> <ol> <li>26 en binaire  \u2192 0001 1010</li> <li>Compl\u00e9ment \u00e0 1 \u2192 1110 0101</li> <li>+1 \u2192 1110 0110</li> </ol> <p>-26 s'encode 1110 0110 sur 1 octet.</p>"},{"location":"types-et-valeurs-de-base/2-representation-des-entiers-en-machine-entiers-relatifs/#decoder-un-nombre-negatif-sur-n-bits","title":"D\u00e9coder un nombre n\u00e9gatif sur n bits","text":"<p>De la m\u00eame fa\u00e7on que pour l'encodage, on pourrait convertir un nombre n\u00e9gatif cod\u00e9 en compl\u00e9ment \u00e0 2 sur n bits en calculant sa valeur enti\u00e8re puis en soustrayant \\(2^n\\). Par exemple la valeur de \\(1011\\) est 11 sur 4 bits, \u00e0 laquelle on soustrait \\(2^4 = 16\\) pour obtenir -3. Une fois de plus, un ordinateur ne fait pas comme \u00e7a, cela serait trop long ! </p> <p>On peut constater que r\u00e9p\u00e9ter deux fois les op\u00e9rations bit \u00e0 bit du compl\u00e9ment \u00e0 2 (inverser tous les bit puis ajouter 1) sur un nombre, revient \u00e0 ajouter deux fois \\(2^n\\) \u00e0 ce nombre, c'est \u00e0 dire lui ajouter \\(2 \\times 2^n = 2^{n+1}\\). Or \\(2^{n+1}\\) correspond \u00e0 un bit en dehors des \\(n\\) premiers bits, cela n'affecte donc pas le codage en \\(n\\) bits du nombre, on retrouve donc son codage de d\u00e9part. Pour d\u00e9coder un nombre n\u00e9gatif, il suffit donc d'appliquer une nouvelle fois la m\u00e9thode du compl\u00e9ment \u00e0 2.</p> <p>Cours</p> <p>En machine, le compl\u00e9ment \u00e0 2 d'un nombre n\u00e9gatif (dont le bit de signe est 1) est obtenu en effectuant les op\u00e9rations suivantes :</p> <ol> <li> <p>Inverser tous les bits (\u00ab compl\u00e9ment \u00e0 1 \u00bb) :</p> <ul> <li>0  devient  1 </li> <li>1  devient  0 </li> </ul> </li> <li> <p>Ajouter 1, en ignorant le d\u00e9passement \u00e9ventuel (\u00ab compl\u00e9ment \u00e0 2 \u00bb)</p> </li> <li> <p>D\u00e9coder le nombre binaire et prendre son oppos\u00e9.</p> </li> </ol> <p>Exercice corrig\u00e9</p> <p>Trouver la valeur du nombre binaire 1110 0111</p> R\u00e9ponse <p>Le premier bit est 1, c'est donc un nombre n\u00e9gatif</p> <ol> <li>Compl\u00e9ment \u00e0 1 \u2192 0001 1000</li> <li>+1 \u2192 0001 1001</li> <li>0001 1001 \u2192 \\(2^4 + 2^3 + 2^0 = 16 + 8 + 1 = 25\\)</li> </ol> <p>1110 0111 est donc d\u00e9cod\u00e9 en -25.</p> <ol> <li> <p>D'o\u00f9 le nom \u00ab compl\u00e9ment \u00e0 2 puissance n \u00bb, tronqu\u00e9 en \u00ab compl\u00e9ment \u00e0 2 \u00bb.\u00a0\u21a9</p> </li> </ol>"},{"location":"types-et-valeurs-de-base/3-representation-approximative-nombres-reels/","title":"Repr\u00e9sentation approximative des nombres r\u00e9els : nombres flottants","text":"<p>En informatique, les nombres r\u00e9els (comme 3.14, 0.1 ou 1/3) ne peuvent pas \u00eatre repr\u00e9sent\u00e9s de mani\u00e8re exacte dans la plupart des cas. On utilise une repr\u00e9sentation approximative appel\u00e9e nombre flottant (ou float en anglais<sup>1</sup>). Cette limitation a des cons\u00e9quences importantes en programmation, notamment lorsqu'on effectue des calculs ou des comparaisons.</p>"},{"location":"types-et-valeurs-de-base/3-representation-approximative-nombres-reels/#ecriture-binaire-dun-nombre-flottant","title":"\u00c9criture binaire d'un nombre flottant","text":"<p>On a vu dans un chapitre pr\u00e9c\u00e9dant comment repr\u00e9senter un nombre entier en binaire, par exemple \\(13_{10}\\) s'\u00e9crit en binaire \\(1101_2\\). Mais comment repr\u00e9senter les nombres r\u00e9els, et \u00e0 quoi correspondent des bits \u00e9crits apr\u00e8s une virgule ?</p> <p>En maths, quel que soit le nombre \\(n\\), on a la formule : \\(2^{-n} = {1 \\over 2^n}\\).</p> <p>Comme pour les nombres entiers, c'est la position qui indique le poids de chaque bit apr\u00e8s la virgule, mais avec des puissances n\u00e9gatives de 2. Par exemple, les bits du nombre binaire \\(0,1011_2\\) correspondent \u00e0 :</p> bits 1 0 1 1 i -1 -2 -3 -4 \\(2^i\\) \\(2^{-1} = {1 \\over 2^1}  = 0,5\\) \\(2^{-2} = {1 \\over 2^2} = 0,25\\) \\(2^{-3} = {1 \\over 2^3} = 0.125\\) \\(2^{-4} = {1 \\over 2^4}=0.0625\\) combinaison \\(1 \\times 2^{-1}=0,5\\) \\(0 \\times 2^{-2}=0\\) \\(1 \\times 2^{-3}=0,125\\) \\(1 \\times 2^{-4}=0.0625\\) <p>\\(0,1011_2 = 1 \u00d7 2^{-1} + 0 \u00d7 2^{-2} + 1 \u00d7 2^{-3} + 1 \u00d7 2^{-4} = 0,6875_{10}\\)</p> <p>Cours</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, un nombre \\(n &lt; 1\\) qui s'\u00e9crit dans le syst\u00e8me binaire \\(0,b_{1}b_{2}b_{3}...\\)  (chaque \\(b_i\\) est un bit valant 0 ou 1) a une valeur en base 10 \u00e9gale \u00e0 : </p> <p>\\(n = b_{1} \\times 2^{\u22121}  + b_{2} \\times 2^{\u22122} + + b_{3} \\times 2^{\u22123} + ...\\) </p> <p>ou encore, sans puissances n\u00e9gatives : \\(n = b_1 \\times {1 \\over 2^1}  + b_2 \\times {1 \\over 2^2} + b_3 \\times {1 \\over 2^3} + ...\\) </p> <p>Bien s\u00fbr, on peut aussi compl\u00e9ter avec une partie enti\u00e8re comme vu pr\u00e9c\u00e9demment : </p> <p>\\(1101,1011_2 = 13,6875_{10}\\).</p>"},{"location":"types-et-valeurs-de-base/3-representation-approximative-nombres-reels/#ecrire-un-nombre-binaire-en-decimal","title":"\u00c9crire un nombre binaire en d\u00e9cimal","text":"<p>La formule pr\u00e9c\u00e9dente permet d'\u00e9crire facilement un nombre binaire en d\u00e9cimal. Il suffit de multiplier chaque bit par la puissance de 2 correspondante et de faire la somme des valeurs obtenues.  Attention, on commence \u00e0 \\(2^{-1}\\) pour le premier bit apr\u00e8s la virgule.</p> <p>Exemple :</p> <p>\\(101,011_2\\) </p> <p>\\(= 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 + 0 \\times 2^{-1} + 1 \\times 2^{-2} + 1 \\times 2^{-2}\\)</p> <p>\\(= 1 \\times 4 + 0 \\times 2 + 1 \\times 1 + 0 \\times 0,5 + 1 \\times 0,25 + 1 \\times 0,125\\)</p> <p>\\(=  4 + 1 + 0,25 + 0,125\\)</p> <p>\\(= 5,375_{10}\\) </p> <p>Exercice corrig\u00e9</p> <p>Calculer la valeur en base 10 des nombres binaires suivants :</p> <ul> <li>0,0011</li> <li>1,10101</li> <li>101,1110011</li> </ul> R\u00e9ponse <p>\\(0,0011_2 = 1 \\times 2^{-3} + 1 \\times 2^{-4} = 0,125 +  0,0625 = 0,1875_{10}\\)</p> <p>\\(1,10101_2 = 1 \\times 2^{0} + 1 \\times 2^{-1} + 1 \\times 2^{-3} + 1 \\times 2^{-5} = 1 + 0,5 + 0,125 + 0,03125 = 1,65625_{10}\\)</p> <p>\\(101,1110011_2 = 1 \\times 2^{2} +1 \\times 2^{0} +1 \\times 2^{-1} + 1 \\times 2^{-2} + 1 \\times 2^{-3} + 1 \\times 2^{-6} + 1 \\times 2^{-7} = 4+1+ 0,5+0,25+0,125 + 0,015625 + 0,0078125=5,8671875_{10}\\)</p>"},{"location":"types-et-valeurs-de-base/3-representation-approximative-nombres-reels/#ecrire-un-nombre-reel-en-binaire","title":"\u00c9crire un nombre r\u00e9el en binaire","text":"<p>Voyons maintenant comment passer de l'\u00e9criture d\u00e9cimale d'un nombre r\u00e9el \\(n\\) \u00e0 son \u00e9criture binaire. </p> <p>Une premi\u00e8re chose \u00e0 noter est le fait que de la m\u00eame mani\u00e8re certains nombres ne peuvent pas s'\u00e9crire avec un nombre fini de chiffres apr\u00e8s la virgules en base 10, par exemple \\(1/3\\) s'\u00e9crit avec une infinit\u00e9 de 3, tous les nombres r\u00e9els ne pourront pas s'\u00e9crire avec un nombre fini de bits apr\u00e8s la virgules en binaire. On ne pourra obtenir qu'une approximation de leur valeur en machine.</p> <p>Prenons l'exemple de \\(13,6875_{10}\\).  La partie enti\u00e8re, \\(13_{10}\\), s'\u00e9crit en base 2 en effectuant une succession de division par 2 jusqu'\u00e0 obtenir 0, comme on l'a vu avant. On trouve \\(1101_2\\). Il faut maintenant \u00e9crire la partie factionnaire, \\(0,6875\\), en binaire. </p> <p>De la m\u00eame mani\u00e8re qu'on a utilis\u00e9e pr\u00e9c\u00e9demment pour trouver les bits d'un nombre entier par une succession de divisions enti\u00e8res par 2, on peut \u00e9crire une partie d\u00e9cimale \\(0,n\\) sous sa forme binaire $0,b_{1}b_{2}b_{3}... en effectuant des multiplications successives par 2 :</p> <p>Le produit de \\(n\\) par \\(2\\), <code>n * 2</code> en Python, peut \u00eatre d\u00e9compos\u00e9 en deux parties :</p> <ul> <li> <p>La partie enti\u00e8re \u00e9gale \u00e0 \\(b_1\\). Cela permet d'obtenir le premier bit de l'\u00e9criture binaire de \\(n\\).</p> </li> <li> <p>La partie d\u00e9cimale enti\u00e8re \u00e9gale \u00e0 \\(b_2b_3b_4...\\). On remplace \\(n\\) par ce nombre pour trouver les autres bits.</p> </li> </ul> <p>Il suffit alors de r\u00e9p\u00e9ter l'op\u00e9ration :</p> <ul> <li>jusqu'\u00e0 ce que \\(n\\) soit \u00e9gal \u00e0 0, on aura bien obtenu tous les bits de l'\u00e9criture binaire de \\(n\\) ; ou alors</li> <li>jusqu'\u00e0 ce que obtenir une valeur de \\(n\\) d\u00e9j\u00e0 vue pendant les calculs, l'\u00e9criture binaire de \\(n\\) est alors cyclique, la m\u00eame suite de bit se r\u00e9p\u00e8te \u00e0 l'infini ; ou encore</li> <li>jusqu'\u00e0 obtenir un nombre de bits dans la limite de la pr\u00e9cision que souhaite obtenir. </li> </ul> <p> Dans ces deux derniers cas, l'\u00e9criture d'un nombre flottant en machine sera une approximation de sa valeur, dans la limite du nombre de bits que l'on veut stocker, c'est souvent source de bugs !</p> <p>Revenons \u00e0 l'exemple de \\(n_{10} = 0,6875\\) :</p> <p> </p> <p>\\(0,6875 \\times 2 = 1,375\\),  la partie enti\u00e8re est 1, c'est le premier bit que l'on obtient : 1.</p> <pre><code>&gt;&gt;&gt; 0.6875 * 2\n1.375\n</code></pre> <p> </p> <p>Continuons avec la partie d\u00e9cimale. \\(0,375 \\times 2 = 0,75\\), la partie enti\u00e8re est 0, on obtient un second bit : 0.</p> <p><pre><code>&gt;&gt;&gt; 0.375 * 2\n0.75\n</code></pre> </p> <p>Puis \\(0,75 \\times 2 = 1,5\\), on obtient un autre bit:  1.</p> <p><pre><code>&gt;&gt;&gt; 0.75 * 2\n1.5\n</code></pre> </p> <p>Et \\(0,5 \\times 2 = 1,0\\), on obtient encore un bit 1.</p> <pre><code>&gt;&gt;&gt; 0.5 * 2\n1.0\n</code></pre> <p> </p> <p>A ce stade, la partie d\u00e9cimale est 0, il est inutile de continuer les multiplications par 2, tous les bits ont \u00e9t\u00e9 trouv\u00e9s. On peut les lire dans l'ordre de gauche \u00e0 droite, sans oublier le \\(0,...\\) au d\u00e9but.</p> <p>L'\u00e9criture binaire de \\(0,675_{10}\\) est donc :  \\(0,1011_2\\).</p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire les nombres suivants en binaire :</p> <ul> <li> <p>\\(5,25\\)</p> </li> <li> <p>\\(10,625\\)</p> </li> </ul> R\u00e9ponse <p>\\(5_{10} = 101_2\\) \\(0,25 times 2 = 0,5\\)   \u2192  0 \\(0,5 times 2 = 1\\)   \u2192  1 donc  \\(0,25_{10} = 0,01_2\\) et    \\(5,25_{10} = 101,01_2\\)</p> <p>\\(10_{10} = 1010_2\\) \\(0,625 times 2 = 1,25\\)   \u2192  1 \\(0,25 times 2 = 0,5\\)   \u2192  0 \\(0,5 times 2 = 1\\)   \u2192  1 donc \\(0,625_{10} = 0,101_2\\) et     \\(10,625_{10} = 1010,101_2\\)</p> <p>Dans l'exemple pr\u00e9c\u00e9dant, \\(0,675_{10}\\) peut \u00eatre repr\u00e9sent\u00e9 exactement en binaire car il s'\u00e9crit comme une somme finie de puissances de 2. Mais ce n'est pas toujours le cas, prenons maintenant l'exemple de \\(0,1_{10}\\) en binaire.</p> <p>On obtient son \u00e9criture binaire en multipliant successivement par 2 :</p> <ul> <li>\\(0,1 \\times 2 = 0,2\\) \u2192 on obtient le bit 0, on continue avec \\(0,2\\)</li> <li>\\(0,2 \\times 2 = 0,4\\) \u2192 on obtient le bit 0, on continue avec \\(0,4\\)</li> <li>\\(0,4 \\times 2 = 0,8\\) \u2192 on obtient le bit 0, on continue avec \\(0,8\\)</li> <li>\\(0,8 \\times 2 = 1,6\\) \u2192 on obtient le bit 1, on continue avec \\(0,6\\)</li> <li>\\(0,6 \\times 2 = 1,2\\) \u2192 on obtient le bit 1, et on retombe sur \\(0,2\\)</li> <li>inutile de refaire les calculs, on sait que les bits suivants seront \u00e0 nouveau 0, 0, 1, 1, 0, 0, 1, etc. C'est cyclique.</li> </ul> <p>L'\u00e9criture binaire de \\(0,1_{10}\\) est donc \\(0,00011001100110011....\\) avec \\(0011\\) qui se r\u00e9p\u00e8te \u00e0 l'infini.</p> <p>Exercice corrig\u00e9</p> <p>\u00c9crire les nombres suivants en binaire :</p> <ul> <li> <p>\\(0,2\\)</p> </li> <li> <p>\\(1 \\over 3\\)</p> </li> </ul> R\u00e9ponse <ul> <li>\\(0,2 \\times 2 = 0,4\\) \u2192 0</li> <li>\\(0,4 \\times 2 = 0,8\\) \u2192 0</li> <li>\\(0,8 \\times 2 = 1,6\\) \u2192 1</li> <li>\\(0,6 \\times 2 = 1,2\\) \u2192 1</li> <li>on retrouve \\(0,2\\), la suite des bits est \\(0011\\) qui se r\u00e9p\u00e8te.</li> </ul> <p>donc \\(0,2_{10}\\) est donc \\(0,0011001100110011....\\). C'est exactement le m\u00eame que \\(0.1\\), mais avec une p\u00e9riode d\u00e9cal\u00e9e.</p> <ul> <li> <p>\\(1 \\over 3\\) \\(\\times 2\\) = \\({2 \\over 3} \\approx 0,666...\\) \u2192 0</p> </li> <li> <p>\\(2 \\over 3\\) \\(\\times 2\\) = \\({4 \\over 3} \\approx 1,333...\\) \u2192 1</p> </li> <li> <p>on retrouve \\(1 \\over 3\\), la suite des bits est \\(01\\) qui se r\u00e9p\u00e8te.</p> </li> </ul> <p>donc \\({1 \\over 3}\\) est donc \\(0,01010101010101....\\).</p> <p>Dans certains cas on ne trouvera pas de cycle,  par exemple les nombres irrationnels comme \\(\\pi\\) ou \\(\\sqrt 2\\). Il faut s'arr\u00eater quand on atteint un certain nombre de bits qui donne une approximation suffisante.</p>"},{"location":"types-et-valeurs-de-base/3-representation-approximative-nombres-reels/#02-01-nest-pas-egal-a-03","title":"0.2 + 0.1 n\u2019est pas \u00e9gal \u00e0 0.3","text":"<p>L'\u00e9criture binaire de \\(0,1_{10}\\) est donc \\(0,00011001100110011....\\) avec \\(0011\\) qui se r\u00e9p\u00e8te \u00e0 l'infini.</p> <p>En machine, l'ordinateur ne dispose que d'un nombre fini de bits, il doit tronquer cette repr\u00e9sentation, ce qui cr\u00e9e une approximation. On peut le v\u00e9rifier en Python en affichant la valeur 0.1 dans une f-string avec une pr\u00e9cision de 20 chiffres apr\u00e8s la virgule :</p> <pre><code>&gt;&gt;&gt; f\"{0.1:.20f}\"\n'0.10000000000000000555'\n</code></pre> <p>De la m\u00eame fa\u00e7on, le nombre \\(0,2\\) ne peut pas \u00eatre repr\u00e9sent\u00e9 de fa\u00e7on exacte en Python : </p> <pre><code>&gt;&gt;&gt; f\"{0.2:.20f}\"\n'0.20000000000000001110'\n</code></pre> <p> Puisque \\(0,1\\) et \\(0,2\\) ne peuvent pas \u00eatre repr\u00e9sent\u00e9s exactement, leur somme ne donne pas exactement \\(0,3\\) !</p> <pre><code>&gt;&gt;&gt; 0.1 + 0.2\n0.30000000000000004\n</code></pre> <p>Cours</p> <p>En Python, <code>0.2 + 0.1</code> n'est pas \u00e9gal \u00e0 <code>0.3</code> !</p> <p>Ces erreurs d'arrondi sont la cause de nombreux bugs. Il ne faut jamais tester d'\u00e9galit\u00e9 sur les nombres de type <code>float</code>:</p> <pre><code>if 0.1 + 0.2 == 0.3:\n    print(\"\u00c9gal\")\nelse:\n    print(\"Diff\u00e9rent\")  # C'est ce qui s'affiche !\n</code></pre> <p>mais toujours tester avec une tol\u00e9rance : </p> <pre><code>if abs(0.1 + 0.2 - 0.3) &lt;= 1e-9:   # 0.000000001\n    print(\"Les nombres sont suffisamment proches\")  # C'est ce qui s'affiche !\nelse:\n    print(\"Les nombres sont diff\u00e9rents\") \n</code></pre>"},{"location":"types-et-valeurs-de-base/3-representation-approximative-nombres-reels/#le-format-des-nombres-flottants-en-machine","title":"Le format des nombres flottants en machine","text":"<p>Les ordinateurs utilisent g\u00e9n\u00e9ralement la norme IEEE 754 pour repr\u00e9senter les nombres flottants. L'id\u00e9e ressemble \u00e0 l'\u00e9criture scientifique en math\u00e9matiques, par exemple : \\(1234,56 = 1,23456 \\times 10^3\\)</p> <p>En binaire, on \u00e9crit de la m\u00eame fa\u00e7on : \\(101,11_2 = 1,0111\u2082 \\times 2^2\\).</p> <p>Un nombre flottant sur 32 bits<sup>2</sup> se d\u00e9compose en 3 parties :</p> S exposant mantisse 1 bit 8 bits 23 bits <p>o\u00f9 :</p> <ul> <li>S est un bit de signe, 0 pour un nombre positif, 1 pour un nombre n\u00e9gatif.</li> <li>L'exposant est cod\u00e9 en notation biais\u00e9, en ajoutant 127 \u00e0 sa valeur r\u00e9elle.</li> <li>La mantisse repr\u00e9sente les bits significatifs apr\u00e8s la virgule. En base 2, il y a toujours un 1 avant la virgule, il n'est pas stock\u00e9, on stocke uniquement la partie apr\u00e8s la virgule.</li> </ul> <p>La valeur stock\u00e9e est donc : \\((-1)^{S} \\times 1,mantisse \\times 2^{exposant}\\).</p> <p>Prenons par exemple 5,75 cod\u00e9 sur 32 bits. \\(5.75_{10}\\) s'\u00e9crit en binaire \\(101.11_2 = 1.0111 \\times  2^3\\). On obtient :</p> <ul> <li>Signe S = \\(0\\) (positif)</li> <li>Exposant : \\(3 + 127 = 130 = 10000010_2\\)</li> <li>Mantisse : \\(0111 0000 0000 0000 0000 000\\)</li> </ul> <p>En machine, 5,75 sera cod\u00e9 sur 32 bits en <code>0 10000010 01110000000000000000000</code>.</p> <ol> <li> <p>Le terme \u00ab\u00a0virgule flottante\u00a0\u00bb d\u00e9signe le fait que la virgule d'un nombre peut \u00ab\u00a0flotter\u00a0\u00bb n'importe o\u00f9 \u00e0 gauche, \u00e0 droite ou entre les chiffres significatifs. Cette position est indiqu\u00e9e par l'exposant.\u00a0\u21a9</p> </li> <li> <p>Sur 64 bits (double pr\u00e9cision, le plus courant en Python), la r\u00e9partition est :</p> <ul> <li>1 bit de signe</li> <li>11 bits pour l'exposant</li> <li>52 bits pour la mantisse</li> </ul> <p>\u21a9</p> </li> </ol>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/","title":"Valeurs, op\u00e9rations et expressions bool\u00e9ennes","text":""},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#valeurs-booleennes","title":"Valeurs bool\u00e9ennes","text":"<p>Cours</p> <p>En informatique, une valeur bool\u00e9enne (du nom du math\u00e9maticien George Boole) ne peut prendre que deux \u00e9tats :</p> <ul> <li>Faux (False) ou 0</li> <li>Vrai (True) ou 1</li> </ul> <p>Ces valeurs sont \u00e0 la base de toute la logique informatique et du fonctionnement des circuits \u00e9lectroniques. Un bit est la plus petite unit\u00e9 d'information et peut repr\u00e9senter une valeur bool\u00e9enne.</p> <p>En Python, ces deux valeurs s'\u00e9crivent <code>False</code> et <code>True</code> (avec une majuscule et sans guillemets). Elle sont du type <code>bool</code> :</p> <pre><code>&gt;&gt;&gt; type(True)\n&lt;class 'bool'&gt;\n</code></pre>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#operateurs-booleens","title":"Op\u00e9rateurs bool\u00e9ens","text":""},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#not","title":"NOT","text":"<p>Cours</p> <p>L'op\u00e9rateur NOT, \u00ab NON \u00bb en fran\u00e7ais, inverse la valeur bool\u00e9enne. </p> <p>Table de v\u00e9rit\u00e9 :</p> A NOT A 0 1 1 0 <p>En Python, NOT s'\u00e9crit en minuscule <code>not</code> :</p> <pre><code>&gt;&gt;&gt; not True\nFalse\n&gt;&gt;&gt; not False\nTrue\n</code></pre>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#and","title":"AND","text":"<p>Cours</p> <p>L'op\u00e9rateur AND, \u00ab ET \u00bb en fran\u00e7ais,  renvoie 1 (Vrai) uniquement si toutes les valeurs sont \u00e0 1.</p> <p>Table de v\u00e9rit\u00e9 :</p> A B A AND B 0 0 0 0 1 0 1 0 0 1 1 1 <p>En Python, AND s'\u00e9crit en minuscule <code>and</code> :</p> <pre><code>&gt;&gt;&gt; True and True\nTrue\n&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; False and False\nFalse\n</code></pre>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#or","title":"OR","text":"<p>Cours</p> <p>L'op\u00e9rateur OR, \u00ab OU \u00bb en fran\u00e7ais,  renvoie 1 (Vrai) si au moins une des valeurs est \u00e0 1.</p> <p>Table de v\u00e9rit\u00e9 :</p> A B A OR B 0 0 0 0 1 1 1 0 1 1 1 1 <p>En Python, OR s'\u00e9crit en minuscule <code>or</code> :</p> <pre><code>&gt;&gt;&gt; True or False\nTrue\n&gt;&gt;&gt; False or False\nFalse\n&gt;&gt;&gt; True or True\nTrue\n</code></pre>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#xor","title":"XOR","text":"<p>Cours</p> <p>L'op\u00e9rateur XOR (eXclusive OR), \u00ab OU exclusif \u00bb en fran\u00e7ais,  renvoie 1 uniquement si les deux valeurs sont diff\u00e9rentes.</p> <p>Table de v\u00e9rit\u00e9 :</p> A B A XOR B 0 0 0 0 1 1 1 0 1 1 1 0 <p>En Python, XOR n'existe pas avec les valeurs de type <code>bool</code><sup>1</sup> mais on peut l'obtenir avec <code>^</code>sur des entiers  :</p> <pre><code>&gt;&gt;&gt; 1 ^ 0\n1\n&gt;&gt;&gt; 1 ^ 1\n0\n&gt;&gt;&gt; 0 ^ 0\n0\n</code></pre>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#expressions-booleennes","title":"Expressions bool\u00e9ennes","text":"<p>Cours</p> <p>Une expression bool\u00e9enne est une combinaison de valeurs et d'op\u00e9rateurs bool\u00e9ens.</p> <p>Prenons l'exemple de l'expression : (A AND B) OR (NOT C).</p> <p>Si A = 1, B = 0 et C = 1, alors :</p> <ul> <li>A AND B = 1 AND 0 = 0</li> <li>NOT C = NOT 1 = 0</li> <li>(A AND B) OR (NOT C) = 0 OR 0 = 0</li> </ul> <p>Exercice corrig\u00e9</p> <p>Que vaut l'expression NOT(A OR B) AND C si A = 0, B = 1, C = 1 ?</p> R\u00e9ponse <ul> <li>A OR B = 0 OR 1 = 1</li> <li>NOT(A OR B) = NOT 1 = 0</li> <li>NOT(A OR B) AND C = 0 AND 1 = 0</li> </ul>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#table-de-verite-dune-expression","title":"Table de v\u00e9rit\u00e9 d'une expression","text":"<p>Pour dresser la table de v\u00e9rit\u00e9 d'une expression, on liste toutes les combinaisons possibles des variables d'entr\u00e9e et on calcule le r\u00e9sultat.</p> <p>Prenons l'exemple de l'expression bool\u00e9enne A AND (B OR C). On commence par lister toutes les combinaisons possibles de A,B et C (2\u00b3 = 8 lignes), on calcule les expressions interm\u00e9diaires (B OR C), puis le r\u00e9sultat final :</p> A B C B OR C A AND (B OR C) 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 1 1 1 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#application-laddition-binaire","title":"Application : l'addition binaire","text":"<p>L'addition binaire utilise directement les op\u00e9rateurs bool\u00e9ens XOR et AND. </p> <p>En effet pour additionner deux bits A et B :</p> <ul> <li>Somme (S) = A XOR B</li> <li>Retenue (C<sub>out</sub>) = A AND B</li> </ul> <p>Table de v\u00e9rit\u00e9 :</p> A B Somme (S) Retenue (C<sub>out</sub>) 0 0 0 0 0 1 1 0 1 0 1 0 1 1 0 1 <p>On peut obtenir un additionneur complet, avec une retenue entrante (C<sub>in</sub>), en utilisant les expressions suivantes :</p> <ul> <li>Somme (S) = A XOR B XOR C<sub>in</sub></li> <li>Retenue (C<sub>out</sub>) = (A AND B) OR (C<sub>in</sub> AND (A XOR B))</li> </ul> <p>Par exemple calculons, avec la retenue, l'addition: 1 + 1 + 1 (A = B = C<sub>in</sub> = 1) :</p> <ul> <li>S = 1 XOR 1 XOR 1 = 0 XOR 1 = 1</li> <li>C<sub>out</sub> = (1 AND 1) OR (1 AND 0) = 1 OR 0 = 1</li> <li>R\u00e9sultat : 11 en binaire (3 en d\u00e9cimal) </li> </ul>"},{"location":"types-et-valeurs-de-base/4-valeurs-expressions-booleennes/#priorites-et-caractere-sequentiel-des-operateurs","title":"Priorit\u00e9s et caract\u00e8re s\u00e9quentiel des op\u00e9rateurs","text":"<p>Cours</p> <p>En Python, les op\u00e9rateurs logiques <code>not</code>, <code>and</code> et <code>or</code> s'ex\u00e9cutent par ordre de priorit\u00e9 :</p> <ol> <li><code>not</code></li> <li><code>and</code></li> <li><code>or</code></li> </ol> <p>Cela signifie que :</p> <ul> <li><code>not</code> s\u2019applique avant <code>and</code>, et</li> <li><code>and</code> s\u2019\u00e9value avant <code>or</code>.</li> </ul> <p>Exemple : <pre><code>&gt;&gt;&gt; True or False and False\nTrue\n</code></pre> Ici, Python calcule d\u2019abord <code>False and False</code>, c'est <code>False</code>, puis <code>True or False</code>, c'est donc <code>True</code>.</p> <p>Pour \u00e9viter les erreurs et am\u00e9liorer la lisibilit\u00e9 du code on utilise des parenth\u00e8ses : <code>True or (False and False)</code>.</p> <p>Exercice corrig\u00e9</p> <p>En Python, que renvoie l'expression suivant ? <pre><code>&gt;&gt;&gt; not True or False\n</code></pre></p> R\u00e9ponse <p><code>not True</code> est <code>False</code>, puis <code>False or False</code> renvoie <code>False</code> donc <code>not True or False</code> est <code>False</code></p> <p>Cours</p> <p>En Python, les op\u00e9rateurs <code>and</code> et <code>or</code> ont un comportement s\u00e9quentiel : ils \u00e9valuent les expressions de gauche \u00e0 droite et s'arr\u00eatent d\u00e8s que le r\u00e9sultat est d\u00e9termin\u00e9. L'\u00e9valuation est dite \u00ab paresseuse \u00bb (lazy evaluation).</p> <p>Prenons l'exemple de ce programme :</p> <pre><code>x = 0\nif x != 0 and 10/x &gt; 2:  \n    print(\"Condition vraie\")\n</code></pre> <p>Si Python \u00e9valuait <code>10/x</code>, cela provoquerait une division par z\u00e9ro. Mais comme <code>x != 0</code> est faux, l'expression <code>10/x &gt; 2</code> n'est jamais \u00e9valu\u00e9e et le programme ne l\u00e8ve pas d'erreur.</p> <p>De la m\u00eame fa\u00e7on, voyons le programme suivant :</p> <pre><code>age = 25\nif age &gt; 18 or verifier_base_donnees():  \n    print(\"Acc\u00e8s autoris\u00e9\")\n</code></pre> <p>Si la premi\u00e8re condition est <code>True</code>, la seconde n'est pas \u00e9valu\u00e9e et la fonction <code>verifier_base_donnees()</code> n'est pas appel\u00e9e.</p> <p>L'\u00e9valuation paresseuse est particuli\u00e8rement utile pour optimiser les performances d'un programme et \u00e9viter certaines erreurs (division par z\u00e9ro, acc\u00e8s \u00e0 des valeurs non d\u00e9finies).</p> <p>Prenons un exemple qui montre l'importance de l'ordre des conditions :</p> <pre><code>def fonction_lente():\n    print(\"Fonction appel\u00e9e\")\n    return True\n\n# Version 1 : fonction appel\u00e9e\nresultat = fonction_lente() and True\n\n# Version 2 : fonction appel\u00e9e\nresultat = True and fonction_lente()\n\n# Version 3 : fonction NON appel\u00e9e\nresultat = False and fonction_lente()\n</code></pre> <p>\u00c0 noter : L'\u00e9valuation s\u00e9quentielle des op\u00e9rations bool\u00e9ennes en programmation est une diff\u00e9rence importante avec les circuits \u00e9lectroniques \u00e9tudi\u00e9s dans le chapitre \u00ab Transistors et circuits logiques \u00bb dans lesquels toutes les entr\u00e9es sont \u00e9valu\u00e9es simultan\u00e9ment.</p> <ol> <li> <p>On peut r\u00e9aliser A XOR B en Python avec l'expression \u00e9quivalente : (A OR B) AND NOT(A AND B).\u00a0\u21a9</p> </li> </ol>"},{"location":"types-et-valeurs-de-base/5-representation-texte/","title":"Repr\u00e9sentation d\u2019un texte en machine.","text":"<p>Exemples des encodages ASCII, ISO-8859-1, Unicode Identifier l\u2019int\u00e9r\u00eat des diff\u00e9rents syst\u00e8mes d\u2019encodage. Convertir un fichier texte dans diff\u00e9rents formats d\u2019encodage. Aucune connaissance pr\u00e9cise des normes d\u2019encodage n\u2019est exigible.</p>"}]}